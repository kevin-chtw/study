#pragma once

#include "TKProtocol.h"

//#include "TKSTBillUniversalDic.h"
//#include "TKMoneyUniversalDicSrv.h"

enum eCommiteeType
{
    TK_MATCHCMT_TYPE_NULL = 0,   // 老组委会
    TK_MATCHCMT_TYPE_SIGN = 1,   // 报名组委会
    TK_MATCHCMT_TYPE_DATA = 2,   // 数据组委会
    TK_MATCHCMT_TYPE_AWARD = 3,  // 颁奖组委会
    TK_MATCHCMT_TYPE_EVENT = 4,  // 事件组委会
    TK_MATCHCMT_TYPE_PROXY = 5,  // 过程数据正向代理服务
};

//========================================================================================
// 常量定义
//========================================================================================

// Tourney类型定义
enum eTourneyType
{
    TK_TOURNEYTYPE_RESERVE = 0,  // 0，预留

    TK_TOURNEYTYPE_SITANDGO = 1,       // 常规赛（满多少人即刻开始的比赛，这种类型的Tourney会根据人满条件创建很多各自独立运行的Match）
    TK_TOURNEYTYPE_TITLE = 2,          // 非常规赛（这种类型的Tourney只有一个单独运行的Match，有确定的开始结束等时间）
    TK_TOURNEYTYPE_ISLAND = 3,         // 生存岛赛（这种类型的Tourney只有一个单独运行的Match，有确定的开始结束等时间）
    TK_TOURNEYTYPE_SERIES = 4,         // 系列锦标赛
    TK_TOURNEYTYPE_USER = 5,           // 用户自建比赛
    TK_TOURNEYTYPE_AMTTBATCH = 6,      // 班车类常规锦标赛，每一场开赛时间是动态变化的（一段时间一开，或满多少人一开比赛，即人数和时间班车）
    TK_TOURNEYTYPE_MINUTE = 7,         // 分钟赛Tourney，这样的Tourney有特殊的开始时间点
    TK_TOURNEYTYPE_TABLE = 8,          // 散桌赛Tourney，这样的Tourney有很多同时进行的比赛，每个比赛就是一桌，用户可以随时加入离开
    TK_TOURNEYTYPE_BROADCAST_DEL = 9,  // 删除wuqy02017.7.28 (转播Tourney，由转播控制客户端来控制比赛的状态和流程)
    TK_TOURNEYTYPE_RANKBATCH = 10,     // 等级班车tourney
    TK_TOURNEYTYPE_GROUPTITLE = 11,    // 分组锦标赛(比如好几万人的抢金赛，2000人组，没组各自颁奖)
    TK_TOURNEYTYPE_ROOM = 12,          // 自由房间
    TK_TOURNEYTYPE_DYNBATCH = 13,      // 动态开赛点的班车锦标赛
    TK_TOURNEYTYPE_TIMEBATCH = 14,     // 标准时间班车锦标赛，每个班车的时间是固定配置的
    TK_TOURNEYTYPE_LONGRANGE = 15,     // 长程赛，自动晋级下一阶段，不需要输入名单
    TK_TOURNEYTYPE_INTRO = 16,         // 赛事介绍类型的Tourney wuqy add 2013.11.21
    TK_TOURNEYTYPE_LADDER = 17,        // 闯关赛模拟锦标赛
    TK_TOURNEYTYPE_LBS = 18,           // LBS面对面玩牌
    TK_TOURNEYTYPE_RANK = 19,          // 天梯赛
    TK_TOURNEYTYPE_FDTABLE = 20,       // 朋友桌/自建桌 wuqy 2016.12.11
    TK_TOURNEYTYPE_CUSTOMIZED = 21,    // 自建比赛
    TK_TOURNEYTYPE_DUPLEX = 22,        // 复式赛
    TK_TOURNEYTYPE_BREAKING = 23,      // 新闯关赛
    TK_TOURNEYTYPE_COMBATTEAM = 24,    // 战队赛
    TK_TOURNEYTYPE_ENDGAME = 25,       // 残局
    TK_TOURNEYTYPE_DOUBLELADDER = 26,  // 双人班车

    TK_TOURNEYTYPE_FAMILYMATCH_BEGIN = 27,                                    // 家族比赛
    TK_TOURNEYTYPE_FAMILYMATCH_TABLE = TK_TOURNEYTYPE_FAMILYMATCH_BEGIN + 0,  // 家族棋桌
    TK_TOURNEYTYPE_FAMILYMATCH_END = 47,                                      // 家族比赛

    TK_TOURNEYTYPE_TIME_LIMIT = 48,  // 限时积分赛
    TK_TOURNEYTYPE_CHICKEN = 49,     // 吃鸡模式
    TK_TOURNEYTYPE_BOSS = 50,        // 龙凤牌boss战
    TK_TOURNEYTYPE_STANDARD = 51,    // 达标赛(麻将类)
    TK_TOURNEYTYPE_END
};

// 与用户关联的Touney状态
enum eTourneyInterfixUserState
{
    TK_USER_TOURNEYRESERVE = 0,   // 0，预留
    TK_USER_TOURNEYSIGNUPED = 1,  // 用户报名了
    TK_USER_TOURNEYUNSIGNUP = 2   // 用户没有报名
};

// 用户出局状态
enum eOutRoundState
{
    TK_USER_INROUNDSTATE = 0,  // 非出局
    TK_USER_OUTROUNDSTATE = 1  // 出局
};

// 报名状态
enum eMatchSignUpState
{
    TK_MATCHSIGNUP_SUCCESS = 0,  // 报名成功
    TK_MATCHSIGNUP_FAILED = 1,   // 报名失败

    TK_MATCHSIGNUP_MATCHUNEXIST = 2,  // 比赛不存在

    TK_MATCHSIGNUP_PHASENOBEGIN = 3,  // 报名没开始
    TK_MATCHSIGNUP_PHASEEND = 4,      // 报名时间结束

    TK_MATCHSIGNUP_SIGNUPED = 5,  // 已经报名
    TK_MATCHSIGNUP_PLAYERIN = 6,  // 用户已经在比赛中
    TK_MATCHSIGNUP_TESTOK = 7,    // 测试报名成功

    TK_MATCHSIGNUP_GOLDLACK = 8,   // 金币数不够
    TK_MATCHSIGNUP_BONUSLACK = 9,  // 奖券数不够
    TK_MATCHSIGNUP_CERTLACK = 10,  // 代金券(门票)不够

    TK_MATCHSIGNUP_FULL = 11,  // 已经报满

    TK_MATCHSIGNUP_MIN_MASTERSCORE = 12,  // 低于最少大师分限制
    TK_MATCHSIGNUP_MAX_MASTERSCORE = 13,  // 高于最大大师分限制
    TK_MATCHSIGNUP_MIN_MATCHSCORE = 14,   // 低于最少比赛积分限制
    TK_MATCHSIGNUP_MAX_MATCHSCORE = 15,   // 高于最大比赛积分限制

    TK_MATCHSIGNUP_MIN_GAMEMATCHCOUNT = 16,         // 低于游戏次数限制（参加该游戏比赛次数）
    TK_MATCHSIGNUP_MIN_MATCHCOUNT = 17,             // 低于总参赛次数限制（参加所有游戏的比赛总场数）
    TK_MATCHSIGNUP_MIN_GAMETIME = 18,               // 低于游戏时长限制（秒）
    TK_MATCHSIGNUP_MIN_TOTALTIME = 19,              // 低于总时长限制（秒）
    TK_MATCHSIGNUP_NOTINPERMITSIGNUPUSERLIST = 20,  //不在允许报名的用户列表中

    TK_MATCHSIGNUP_LCVERSION_LOW = 21,  // 客户端版本低，不能报名

    TK_MATCHSIGNUP_GROWLACK = 22,  // 积分不足
    TK_MATCHSIGNUP_WARELACK = 23,  // 物品不足

    TK_MATCHSIGNUP_GROWCONDITIONLACK = 24,  // 积分不符合报名条件
    TK_MATCHSIGNUP_WARECONDITIONLACK = 25,  // 物品不符合报名条件

    TK_MATCHSIGNUP_MATCHPAUSESIGNUP = 26,    //系统即将进行维护，比赛暂停报名
    TK_MATCHSIGNUP_TABLEPAUSESIGNUP = 27,    //系统即将进行维护，暂停游戏
    TK_MATCHSIGNUP_TABLEUNEXIST = 28,        // 游戏桌不存在
    TK_MATCHSIGNUP_TABLEROOMFULL = 29,       // 游戏已经满
    TK_MATCHSIGNUP_TABLESIGNUPED = 30,       // 已经在游戏桌上
    TK_MATCHSIGNUP_TABLEMULTGAMELIMIT = 31,  // 超出最大进入入桌限制

    TK_MATCHSIGNUP_MSGLEN_FAIL = 32,          // 消息长度错误
    TK_MATCHSIGNUP_PARAM_FAIL = 33,           // 消息参数错误
    TK_MATCHSIGNUP_WILDER_FAIL = 34,          // 防沉迷未通过
    TK_MATCHSIGNUP_SIGNUPSVR_ERR = 35,        // SignSvr出现异常
    TK_MATCHSIGNUP_SIGNUPSVR_COND_FAIL = 36,  // SignSvr验证用户报名条件未通过
    TK_MATCHSIGNUP_SIGNUPSVR_FEE_FAIL = 37,   // SignSvr扣除用户报名费用失败

    TK_MATCHSIGNUP_SIGNUPDATA_LOADING = 38,  // 报名数据载入中
    TK_MATCHSIGNUP_RESTRICT = 39,            // 用户被限制操作
    TK_MATCHSIGNUP_CROWDFUNDING = 40,        // 众筹中，无法报名
    TK_MATCHSIGNUP_SAMEIPLIMIT = 41,         // 相同IP限制
    TK_MATCHSIGNUP_SAMEMACLIMIT = 42,        // 相同Mac限制
    TK_MATCHSIGNUP_HAS_ARCHIVE = 43,         // 个人有存档（应用于DAG双人班车）
    TK_MATCHSIGNUP_HAS_CROWDFUND = 44,       // 个人有众筹（应用于DAG双人班车）
    TK_MATCHSIGNUP_ONLYWEB = 45,             // 仅限Web端内部报名，不允许客户端报名
    TK_MATCHSIGNUP_LOGINUNSAFE = 46,         // 登录安全验证机制扩充新增（限制不安全用户报名，Lobby限制）

    TK_MATCHSIGNUP_RELATION_FAIL = 200,     // 好友关系验证失败
    TK_MATCHSIGNUP_TABLE_NOEXISTENT = 201,  // 桌子不存在

    TK_MATCHSIGNUP_WRONG_PWD = 301,             // 密码错误
    TK_MATCHSIGNUP_MAX_SNS_PLAYER_LIMIT = 302,  // 家族赛超出报名人数限制
    TK_MATCHSIGNUP_TEAM_FULL = 303,             // 自建团赛队伍数满
    TK_MATCHSIGNUP_PWD_CNT_OUT = 304,           // 密码次数用完
    TK_MATCHSIGNUP_NOSURPORT_LARGERATE = 402,   // 不支持高摇摆的兑换率
};

// 众筹相关：购买众筹状态
enum eBuyCrownState
{
    TK_BUYCROWN_SUCCESS = 0,          // 购买成功
    TK_BUYCROWN_FAILED = 1,           // 购买失败
    TK_BUYCROWN_BRUSH = 2,            // 刷子用户
    TK_BUYCROWN_USERBUYCNTFULL = 3,   // 用户购买次数已满
    TK_BUYCROWN_MONEY_SRCLACK = 100,  // 货币不足（除了金币，奖券，代金券以外的问题）
    TK_BUYCROWN_GOLD_SRCLACK = 101,   // 金币不足
    TK_BUYCROWN_BONUS_SRCLACK = 102,  // 奖券不足
    TK_BUYCROWN_CERT_SRCLACK = 103,   // 代金券（门票）不足
    TK_BUYCROWN_WARE_SRCLACK = 104,   // 物品不足
    TK_BUYCROWN_GROW_SRCLACK = 105,   // 积分不足
    TK_BUYCROWN_SRCLACK = 106,        // 源货币不足
    TK_BUYCROWN_DSTACCNOEXIST = 107,  // 目标账户不存在
};

// 众筹相关：发起众筹状态
enum eAttachCrownState
{
    TK_ATTACHCROWN_SUCCESS = 0,  // 发起众筹成功
    TK_ATTACHCROWN_FAILED = 1,   // 发起众筹失败
};

// 解除状态
enum eMatchUnSignUpState
{
    TK_MATCHUNSIGNUP_SUCCESS = 0,  // 解除报名成功
    TK_MATCHUNSIGNUP_FAILED = 1,   // 解除报名失败

    TK_MATCHUNSIGNUP_MATCHUNEXIST = 2,  // 比赛不存在

    TK_MATCHUNSIGNUP_PHASENOBEGIN = 3,  // 报名没开始
    TK_MATCHUNSIGNUP_PHASEEND = 4,      // 报名时间结束

    TK_MATCHUNSIGNUP_NOSIGNUP = 5,     // 还没有报名
    TK_MATCHUNSIGNUP_PLAYERIN = 6,     // 用户已经在比赛中
    TK_MATCHUNSIGNUP_TEAMUNEXIST = 7,  // 队伍不存在
    TK_MATCHUNSIGNUP_CUSTOMFINAL = 8,  // 自建赛决赛取消失败
    TK_MATCHUNSIGNUP_ONLYWEB = 9,      // 仅限Web端内部报名，不允许客户端取消报名

};

// 旁观状态
enum eMatchWatchState
{
    TK_MATCHWATCH_SUCCESS = 0,              // 旁观成功
    TK_MATCHWATCH_FAILED = 1,               // 旁观失败（其他原因导致）
    TK_MATCHWATCH_TIMEOUT = 2,              // 旁观消息处理超时
    TK_MATCHWATCH_MATCHUNEXIST = 3,         // 比赛不存在
    TK_MATCHWATCH_WATCHEEUNEXIST = 4,       // 被旁观者不存在（不在某个Round中）
    TK_MATCHWATCH_ONESELF = 5,              // 旁观自己
    TK_MATCHWATCH_WATCHED = 6,              // 已请求过旁观
    TK_MATCHWATCH_WATCH_DROPOUT_ROUND = 7,  // 请求旁观中途退出的Round（目前不允许中途退出游戏的玩家再去旁观已退出的那个Round中的玩家）
    TK_MATCHWATCH_SIGNUP_PLAYERIN = 8,      // 用户（旁观者）报名时已在比赛中
    TK_MATCHWATCH_SIGNUP_FAILED = 9,        // 旁观报名失败
    TK_MATCHWATCH_SIGNUPED = 10,            // 已经报名
    TK_MATCHWATCH_SIGNUP_SUCCESS = 11       // 旁观报名成功
};

// 约战状态
enum eMatchInviteState
{
    TK_MATCH_INVITE_SUCCESS = 0,               // 约战成功（经比赛服务裁定，当前约战会话中的两玩家符合条件，可以开赛）
    TK_MATCH_INVITE_FAILED = 1,                // 约战失败
    TK_MATCH_INVITE_SERVICE_BUSY = 2,          // 服务忙
    TK_MATCH_INVITE_MATCHUNEXIST = 3,          // 比赛不存在
    TK_MATCH_INVITE_ONESELF = 4,               // 被约战方是自己（不允许约战自己）
    TK_MATCH_INVITE_USERID_INVALID = 5,        // 消息发送者，既不是会话中的约战发起者，也不是约战接受者
    TK_MATCH_INVITE_MISMATCH = 6,              // 约战接受者与约战发起者不在同一个会话里
    TK_MATCH_INVITE_FIND_SESSION_FAILED = 7,   // 找不到会话
    TK_MATCH_INVITE_SESSION_TIMEOUT = 8,       // 约战会话超时
    TK_MATCH_INVITE_SEND_INVITATION_DUP = 9,   // 重复发起约战
    TK_MATCH_INVITE_CREATE_TABLE_FAILED = 10,  // 创建Table失败
    TK_MATCH_INVITE_ENTER_TABLE_FAILED = 11,   // 进入Table失败

    TK_MATCH_INVITE_SESSION_CREATOR_INVALID = 12,  // 无效的约战会话创建者
    TK_MATCH_INVITE_SESSION_JOINER_INVALID = 13,   // 无效的约战会话参与者
    TK_MATCH_INVITE_SESSION_INVALID = 14,          // 无效的约战会话
    TK_MATCH_INVITE_CREATE_SESSION_FAILED = 15,    // 创建约战会话失败
    TK_MATCH_INVITE_JOIN_SESSION_FAILED = 16,      // 加入约战会话失败
    TK_MATCH_INVITE_CANCEL_SESSION_FAILED = 17,    // 取消约战会话失败
    TK_MATCH_INVITE_SESSION_CANCELED = 18,         // 约战会话已被取消

};

// 创建队伍
enum eMatchCreateTeamState
{
    TK_MATCH_CREATE_TEAM_SUCCESS = 0,  // 创建成功
    TK_MATCH_CREATE_TEAM_FAILED = 1,   // 创建失败

    TK_MATCH_CREATE_TEAM_MATCHUNEXIST = TK_MATCHSIGNUP_MATCHUNEXIST,  // 比赛不存在

    TK_MATCH_CREATE_TEAM_PHASENOBEGIN = TK_MATCHSIGNUP_PHASENOBEGIN,  // 报名没开始
    TK_MATCH_CREATE_TEAM_PHASEEND = TK_MATCHSIGNUP_PHASEEND,          // 报名时间结束

    TK_MATCH_CREATE_TEAM_SIGNUPED = TK_MATCHSIGNUP_SIGNUPED,  // 已经报名
    TK_MATCH_CREATE_TEAM_PLAYERIN = TK_MATCHSIGNUP_PLAYERIN,  // 用户已经在比赛中
    TK_MATCH_CREATE_TEAM_TESTOK = TK_MATCHSIGNUP_TESTOK,      // 测试报名成功

    TK_MATCH_CREATE_TEAM_GOLDLACK = TK_MATCHSIGNUP_GOLDLACK,    // 金币数不够
    TK_MATCH_CREATE_TEAM_BONUSLACK = TK_MATCHSIGNUP_BONUSLACK,  // 奖券数不够
    TK_MATCH_CREATE_TEAM_CERTLACK = TK_MATCHSIGNUP_CERTLACK,    // 代金券(门票)不够

    TK_MATCH_CREATE_TEAM_FULL = TK_MATCHSIGNUP_FULL,  // 队伍数量已满

    TK_MATCH_CREATE_TEAM_MIN_MASTERSCORE = TK_MATCHSIGNUP_MIN_MASTERSCORE,  // 低于最少大师分限制
    TK_MATCH_CREATE_TEAM_MAX_MASTERSCORE = TK_MATCHSIGNUP_MAX_MASTERSCORE,  // 高于最大大师分限制
    TK_MATCH_CREATE_TEAM_MIN_MATCHSCORE = TK_MATCHSIGNUP_MIN_MATCHSCORE,    // 低于最少比赛积分限制
    TK_MATCH_CREATE_TEAM_MAX_MATCHSCORE = TK_MATCHSIGNUP_MAX_MATCHSCORE,    // 高于最大比赛积分限制

    TK_MATCH_CREATE_TEAM_MIN_GAMEMATCHCOUNT = TK_MATCHSIGNUP_MIN_GAMEMATCHCOUNT,                // 低于游戏次数限制（参加该游戏比赛次数）
    TK_MATCH_CREATE_TEAM_MIN_MATCHCOUNT = TK_MATCHSIGNUP_MIN_MATCHCOUNT,                        // 低于总参赛次数限制（参加所有游戏的比赛总场数）
    TK_MATCH_CREATE_TEAM_MIN_GAMETIME = TK_MATCHSIGNUP_MIN_GAMETIME,                            // 低于游戏时长限制（秒）
    TK_MATCH_CREATE_TEAM_MIN_TOTALTIME = TK_MATCHSIGNUP_MIN_TOTALTIME,                          // 低于总时长限制（秒）
    TK_MATCH_CREATE_TEAM_NOTINPERMITSIGNUPUSERLIST = TK_MATCHSIGNUP_NOTINPERMITSIGNUPUSERLIST,  //不在允许报名的用户列表中

    TK_MATCH_CREATE_TEAM_LCVERSION_LOW = TK_MATCHSIGNUP_LCVERSION_LOW,  // 客户端版本低，不能报名

    TK_MATCH_CREATE_TEAM_GROWLACK = TK_MATCHSIGNUP_GROWLACK,  // 积分不足
    TK_MATCH_CREATE_TEAM_WARELACK = TK_MATCHSIGNUP_WARELACK,  // 物品不足

    TK_MATCH_CREATE_TEAM_GROWCONDITIONLACK = TK_MATCHSIGNUP_GROWCONDITIONLACK,  // 积分不符合报名条件
    TK_MATCH_CREATE_TEAM_WARECONDITIONLACK = TK_MATCHSIGNUP_WARECONDITIONLACK,  // 物品不符合报名条件

    TK_MATCH_CREATE_TEAM_MATCHPAUSESIGNUP = TK_MATCHSIGNUP_MATCHPAUSESIGNUP,  //系统即将进行维护，比赛暂停报名

    TK_MATCH_CREATE_TEAM_NAME_CLASH,    // 队伍名冲突
    TK_MATCH_CREATE_TEAM_HAS_ARCHIVE,   // 个人有存档（应用于DAG双人班车）
    TK_MATCH_CREATE_TEAM_HAS_CROWDFUND  // 个人有众筹（应用于DAG双人班车）
};

// 修改队伍选项
enum eMatchAlterTeamState
{
    TK_MATCH_ALTER_TEAM_SUCCESS = 0,  // 修改成功
    TK_MATCH_ALTER_TEAM_FAILED = 1,   // 修改失败

    TK_MATCH_ALTER_TEAM_TEAMUNEXIST,   // 队伍不存在
    TK_MATCH_ALTER_TEAM_NO_PERMISSION  // 没有权限
};

// 加入队伍
enum eMatchJoinTeamState
{
    TK_MATCH_JOIN_TEAM_SUCCESS = 0,  // 加入成功
    TK_MATCH_JOIN_TEAM_FAILED = 1,   // 加入失败

    TK_MATCH_JOIN_TEAM_MATCHUNEXIST = TK_MATCHSIGNUP_MATCHUNEXIST,  // 比赛不存在

    TK_MATCH_JOIN_TEAM_PHASENOBEGIN = TK_MATCHSIGNUP_PHASENOBEGIN,  // 报名没开始
    TK_MATCH_JOIN_TEAM_PHASEEND = TK_MATCHSIGNUP_PHASEEND,          // 报名时间结束

    TK_MATCH_JOIN_TEAM_SIGNUPED = TK_MATCHSIGNUP_SIGNUPED,  // 已经报名
    TK_MATCH_JOIN_TEAM_PLAYERIN = TK_MATCHSIGNUP_PLAYERIN,  // 用户已经在比赛中
    TK_MATCH_JOIN_TEAM_TESTOK = TK_MATCHSIGNUP_TESTOK,      // 测试报名成功

    TK_MATCH_JOIN_TEAM_GOLDLACK = TK_MATCHSIGNUP_GOLDLACK,    // 金币数不够
    TK_MATCH_JOIN_TEAM_BONUSLACK = TK_MATCHSIGNUP_BONUSLACK,  // 奖券数不够
    TK_MATCH_JOIN_TEAM_CERTLACK = TK_MATCHSIGNUP_CERTLACK,    // 代金券(门票)不够

    TK_MATCH_JOIN_TEAM_FULL = TK_MATCHSIGNUP_FULL,  // 队伍数量已满

    TK_MATCH_JOIN_TEAM_MIN_MASTERSCORE = TK_MATCHSIGNUP_MIN_MASTERSCORE,  // 低于最少大师分限制
    TK_MATCH_JOIN_TEAM_MAX_MASTERSCORE = TK_MATCHSIGNUP_MAX_MASTERSCORE,  // 高于最大大师分限制
    TK_MATCH_JOIN_TEAM_MIN_MATCHSCORE = TK_MATCHSIGNUP_MIN_MATCHSCORE,    // 低于最少比赛积分限制
    TK_MATCH_JOIN_TEAM_MAX_MATCHSCORE = TK_MATCHSIGNUP_MAX_MATCHSCORE,    // 高于最大比赛积分限制

    TK_MATCH_JOIN_TEAM_MIN_GAMEMATCHCOUNT = TK_MATCHSIGNUP_MIN_GAMEMATCHCOUNT,                // 低于游戏次数限制（参加该游戏比赛次数）
    TK_MATCH_JOIN_TEAM_MIN_MATCHCOUNT = TK_MATCHSIGNUP_MIN_MATCHCOUNT,                        // 低于总参赛次数限制（参加所有游戏的比赛总场数）
    TK_MATCH_JOIN_TEAM_MIN_GAMETIME = TK_MATCHSIGNUP_MIN_GAMETIME,                            // 低于游戏时长限制（秒）
    TK_MATCH_JOIN_TEAM_MIN_TOTALTIME = TK_MATCHSIGNUP_MIN_TOTALTIME,                          // 低于总时长限制（秒）
    TK_MATCH_JOIN_TEAM_NOTINPERMITSIGNUPUSERLIST = TK_MATCHSIGNUP_NOTINPERMITSIGNUPUSERLIST,  //不在允许报名的用户列表中

    TK_MATCH_JOIN_TEAM_LCVERSION_LOW = TK_MATCHSIGNUP_LCVERSION_LOW,  // 客户端版本低，不能报名

    TK_MATCH_JOIN_TEAM_GROWLACK = TK_MATCHSIGNUP_GROWLACK,  // 积分不足
    TK_MATCH_JOIN_TEAM_WARELACK = TK_MATCHSIGNUP_WARELACK,  // 物品不足

    TK_MATCH_JOIN_TEAM_GROWCONDITIONLACK = TK_MATCHSIGNUP_GROWCONDITIONLACK,  // 积分不符合报名条件
    TK_MATCH_JOIN_TEAM_WARECONDITIONLACK = TK_MATCHSIGNUP_WARECONDITIONLACK,  // 物品不符合报名条件

    TK_MATCH_JOIN_TEAM_MATCHPAUSESIGNUP = TK_MATCHSIGNUP_MATCHPAUSESIGNUP,  //系统即将进行维护，比赛暂停报名

    TK_MATCH_JOIN_TEAM_NUMBER_INVALID,  // 队伍名冲突
    TK_MATCH_JOIN_TEAM_TEAMUNEXIST,     // 队伍不存在
    TK_MATCH_JOIN_TEAM_HAS_ARCHIVE,     // 个人有存档（应用于DAG双人班车）
    TK_MATCH_JOIN_TEAM_HAS_CROWDFUND    // 个人有众筹（应用于DAG双人班车）
};

// 离开队伍状态
enum eMatchLeaveTeamState
{
    TK_MATCH_LEAVE_TEAM_SUCCESS = 0,  // 离开队伍成功
    TK_MATCH_LEAVE_TEAM_FAILED = 1,   // 离开队伍失败

    TK_MATCH_LEAVE_TEAM_MATCHUNEXIST = TK_MATCHUNSIGNUP_MATCHUNEXIST,  // 比赛不存在

    TK_MATCH_LEAVE_TEAM_PHASENOBEGIN = TK_MATCHUNSIGNUP_PHASENOBEGIN,  // 报名没开始
    TK_MATCH_LEAVE_TEAM_PHASEEND = TK_MATCHUNSIGNUP_PHASEEND,          // 报名时间结束

    TK_MATCH_LEAVE_TEAM_NOSIGNUP = TK_MATCHUNSIGNUP_NOSIGNUP,  // 还没有报名
    TK_MATCH_LEAVE_TEAM_PLAYERIN = TK_MATCHUNSIGNUP_PLAYERIN,  // 用户已经在比赛中

    TK_MATCH_LEAVE_TEAM_TEAMUNEXIST = TK_MATCHUNSIGNUP_TEAMUNEXIST  // 队伍不存在
};

// 删除队伍状态
enum eMatchDeleteTeamState
{
    TK_MATCH_DELETE_TEAM_SUCCESS = 0,  // 离开队伍成功
    TK_MATCH_DELETE_TEAM_FAILED = 1,   // 离开队伍失败

    TK_MATCH_DELETE_TEAM_MATCHUNEXIST = TK_MATCHUNSIGNUP_MATCHUNEXIST,  // 比赛不存在

    TK_MATCH_DELETE_TEAM_PHASENOBEGIN = TK_MATCHUNSIGNUP_PHASENOBEGIN,  // 报名没开始
    TK_MATCH_DELETE_TEAM_PHASEEND = TK_MATCHUNSIGNUP_PHASEEND,          // 报名时间结束

    TK_MATCH_DELETE_TEAM_NOSIGNUP = TK_MATCHUNSIGNUP_NOSIGNUP,  // 还没有报名
    TK_MATCH_DELETE_TEAM_PLAYERIN = TK_MATCHUNSIGNUP_PLAYERIN,  // 用户已经在比赛中

    TK_MATCH_DELETE_TEAM_TEAMUNEXIST = TK_MATCHUNSIGNUP_TEAMUNEXIST,  // 队伍不存在
    TK_MATCH_DELETE_TEAM_NO_PERMISSION                                // 没有权限
};

// 报备人员状态
enum eMatchRegisterUserToTeamState
{
    TK_MATCH_REGISTER_USER_TO_TEAM_SUCCESS = 0,                                   // 报备人员成功
    TK_MATCH_REGISTER_USER_TO_TEAM_FAILED = 1,                                    // 报备人员失败
    TK_MATCH_REGISTER_USER_TO_TEAM_MATCHUNEXIST = TK_MATCHUNSIGNUP_MATCHUNEXIST,  // 比赛不存在
    TK_MATCH_REGISTER_USER_TO_TEAM_TEAMUNEXIST                                    // 队伍不存在
};

// 确认队伍完成状态
enum eMatchConfirmTeamState
{
    TK_MATCH_CONFIRM_TEAM_SUCCESS = 0,  //确认队伍完成成功
    TK_MATCH_CONFIRM_TEAM_FAILED = 1,   //确认队伍完成失败

    TK_MATCH_CONFIRM_TEAM_MATCHUNEXIST = TK_MATCHUNSIGNUP_MATCHUNEXIST,  // 比赛不存在
    TK_MATCH_CONFIRM_TEAM_PHASENOBEGIN = TK_MATCHUNSIGNUP_PHASENOBEGIN,  // 报名没开始
    TK_MATCH_CONFIRM_TEAM_PHASEEND = TK_MATCHUNSIGNUP_PHASEEND,          // 报名时间结束
    TK_MATCH_CONFIRM_TEAM_NOSIGNUP = TK_MATCHUNSIGNUP_NOSIGNUP,          // 还没有报名
    TK_MATCH_CONFIRM_TEAM_PLAYERIN = TK_MATCHUNSIGNUP_PLAYERIN,          // 用户已经在比赛中

    TK_MATCH_CONFIRM_TEAM_TEAMUNEXIT,    //被确认队伍不存在
    TK_MATCH_CONFIRM_TEAM_NO_PERMISSION  //没有权限
};

// 存档状态
enum eMatchArchiveState
{
    TK_MATCH_ARCHIVE_SUCCESS = 0,           // 存档成功
    TK_MATCH_ARCHIVE_FAILED = 1,            // 存档失败
    TK_MATCH_ARCHIVE_FAILED_LOCKTABLE = 2,  // 存档失败，锁桌不能存档
    TK_MATCH_ARCHIVE_FAILED_FINAL = 3,      // 存档失败，最后一轮不能存档
};

enum eMatchCreateSelfBuildPlaceState
{
    TK_MATCH_CREATE_SELFBUILD_PLACE_SUCCESS = TK_MATCHSIGNUP_SUCCESS,
    TK_MATCH_CREATE_SELFBUILD_PLACE_FAILED = TK_MATCHSIGNUP_FAILED,
    TK_MATCH_CREATE_SELFBUILD_PLACE_MATCHUNEXIST = TK_MATCHUNSIGNUP_MATCHUNEXIST,
    TK_MATCH_CREATE_SELFBUILD_PLACE_DROPOUT_LIMIT = 1002,
    TK_MATCH_CREATE_SELFBUILD_PLACE_SERVICE_BUSY = 1003,
    TK_MATCH_CREATE_SELFBUILD_PLACE_FORBID = 1012,          // 禁止当前客户创建
    TK_MATCH_CREATE_SELFBUILD_PLACE_ADMIN_IP_LIMIT = 1013,  // 当前客户为管理员且其IP不在允许范围内
};

enum eMatchEnterSelfBuildPlaceState
{
    TK_MATCH_ENTER_SELFBUILD_PLACE_SUCCESS = TK_MATCHSIGNUP_SUCCESS,
    TK_MATCH_ENTER_SELFBUILD_PLACE_FAILED = TK_MATCHSIGNUP_FAILED,
    TK_MATCH_ENTER_SELFBUILD_PLACE_MATCHUNEXIST = TK_MATCHUNSIGNUP_MATCHUNEXIST,
    TK_MATCH_ENTER_SELFBUILD_PLACE_DROPOUT_LIMIT = 1002,
    TK_MATCH_ENTER_SELFBUILD_PLACE_SERVICE_BUSY = 1003,
    TK_MATCH_ENTER_SELFBUILD_PLACE_FULL = 1004,
    TK_MATCH_ENTER_SELFBUILD_PLACE_MATCHING = 1005,
    TK_MATCH_ENTER_SELFBUILD_PLACE_UNKNOWN_TYPE = 1006,
    TK_MATCH_ENTER_SELFBUILD_PLACE_ALREADY_IN = 1007,
    TK_MATCH_ENTER_SELFBUILD_PLACE_ID_INVALID = 1008,
    TK_MATCH_ENTER_SELFBUILD_PLACE_IN_ENTERING = 1009,
    TK_MATCH_ENTER_SELFBUILD_PLACE_NOT_IN_ENTERING = 1010,
    TK_MATCH_ENTER_SELFBUILD_PLACE_MULTI_STATUS = 1011,
    TK_MATCH_ENTER_SELFBUILD_PLACE_FORBID = 1012,          // 禁止当前客户进入
    TK_MATCH_ENTER_SELFBUILD_PLACE_ADMIN_IP_LIMIT = 1013,  // 当前客户为管理员且其IP不在允许范围内
};

enum eMatchLeaveRoomState
{
    TK_MATCH_LEAVE_ROOM_SUCCESS = 0,
    TK_MATCH_LEAVE_ROOM_FAILED = 1,
    TK_MATCH_LEAVE_ROOM_NOT_IN_SEAT = 2,  // 玩家不在任何座位上
    TK_MATCH_LEAVE_ROOM_NOT_IN_ROOM = 3,  // 玩家不在房间里
};

// 复活费用类型
enum eDicReliveCostType
{
    RELIVECOSTTYPE_NULL = 0,  // 保留

    RELIVECOSTTYPE_MONEY = 1,  // Money复活
    RELIVECOSTTYPE_WARE = 2,   //物品复活

};

// 复活费用ID
enum eDicReliveCostID
{
    RELIVECOSTID_NULL = 0,
    RELIVECOSTID_MONEY_GOLD = 2,  //=2, 金币（Gold）
    RELIVECOSTID_MONEY_CERT = 4   //=4, 参赛积分（Cert）
};

// 复活费用计算公式
enum eDicReliveCostFormula
{
    RELIVECOSTFORMULA_NULL = 0,  // 保留

    RELIVECOSTFORMULA_LIST = 1,      // 列表指定
    RELIVECOSTFORMULA_BUYIN = 2,     // 买入
    RELIVECOSTFORMULA_BASEMULT = 3,  // 基数倍数
    RELIVECOSTFORMULA_POWER = 4,     // 人数指数
    RELIVECOSTFORMULA_LINE = 5,      // 人数线性
    RELIVECOSTFORMULA_TABLE = 6,     // 查表
};

// 连胜清除模式
enum eDicClearWinningStreakMode
{
    TK_CLEARWINNINGSTREAK_MODE_NULL = 0,      // 保留
    TK_CLEARWINNINGSTREAK_MODE_LOSS = 1,      // 输分时终止连胜（系统默认）
    TK_CLEARWINNINGSTREAK_MODE_LOSSDRAW = 2,  // 平分或输分时都终止连胜
};

// 连败清除模式
enum eDicClearLossingStreakMode
{
    TK_CLEARLOSSINGSTREAK_MODE_NULL = 0,    // 保留
    TK_CLEARLOSSINGSTREAK_MODE_WIN = 1,     // 赢分时终止连败
    TK_CLEARLOSSINGSTREAK_MODE_WINDRAW = 2  // 平分或赢分时都终止连败
};

// 赛况信息类型定义(目前用于MC界面显示数据定义)
enum eDicMatchInfoType
{
    TK_MATCHINFO_ENUM_NULL = 0,  // 保留

    TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN = 100,  // 比赛信息其实定义

    TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN = 200,  // 比赛信息其实定义

    TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN = 300,  // 比赛信息其实定义

    TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN = 400,  // 比赛信息其实定义

    TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN = 500,  // 比赛信息其实定义

    TK_MATCHINFO_ENUM_TABLE_DEFINEBEGIN = 600,  // 比赛信息其实定义

    TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN = 700,  // 比赛信息其实定义

    TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN = 800,  // 比赛信息其实定义

    TK_MATCHINFO_ENUM_COMMITTEE_DEFINEBEGIN = 900,  // 比赛信息其实定义

    TK_MATCHINFO_ENUM_DAG_UNIT_DEFINEBEGIN = 1000,  // DAG参赛单元信息起始定义
};

enum
{
    TK_MATCHINFO_ENUM_TOURNEY_NAME = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 0,                     // 赛事名称( string )
    TK_MATCHINFO_ENUM_TOURNEY_PRODUCTID = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 1,                // 产品ID( DWORD )
    TK_MATCHINFO_ENUM_TOURNEY_GAMEID = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 2,                   // 游戏ID( WORD )
    TK_MATCHINFO_ENUM_TOURNEY_TYPE = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 3,                     // 赛事类型( BYTE )
    TK_MATCHINFO_ENUM_TOURNEY_TEAM_TYPE = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 4,                // 参赛单元类型( BYTE )
    TK_MATCHINFO_ENUM_TOURNEY_START_TYPE = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 5,               // 比赛开赛类型(参见eTourneyStartMatchType定义)( BYTE )
    TK_MATCHINFO_ENUM_TOURNEY_STATE = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 6,                    // 状态( BYTE )
    TK_MATCHINFO_ENUM_TOURNEY_TEAM_MEMBER_COUNT = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 7,        // 队员数( BYTE )
    TK_MATCHINFO_ENUM_TOURNEY_TEAM_SUBSTITUTE_COUNT = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 8,    // 替补数( BYTE )
    TK_MATCHINFO_ENUM_TOURNEY_SIGN_MODE = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 9,                // 报名方式( BYTE )
    TK_MATCHINFO_ENUM_TOURNEY_SIGN_PLAYER_COUNT = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 10,       // 报名人数( DWORD )
    TK_MATCHINFO_ENUM_TOURNEY_MATCHING_PLAYER_COUNT = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 11,   // 激战人数( DWORD )
    TK_MATCHINFO_ENUM_TOURNEY_UNIT_COUNT_LIMIT = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 12,        // 人数限制( 两个DWORD )
    TK_MATCHINFO_ENUM_TOURNEY_AVERAGE_MATCH_INTERVAL = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 13,  // 平均开赛时间( DWORD秒 )

    TK_MATCHINFO_ENUM_TOURNEY_CHAT_SVRIP = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 14,         // DWORD
    TK_MATCHINFO_ENUM_TOURNEY_CHAT_SVRPORT = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 15,       // DWORD
    TK_MATCHINFO_ENUM_TOURNEY_CHAT_CHANNELTYPE = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 16,   // DWORD
    TK_MATCHINFO_ENUM_TOURNEY_CHAT_CHANNELID = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 17,     // DWORD
    TK_MATCHINFO_ENUM_TOURNEY_CHAT_CHANNELSUBID = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 18,  // DWORD
    TK_MATCHINFO_ENUM_TOURNEY_CHAT_USERTYPE = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 19,      // DWORD
    TK_MATCHINFO_ENUM_TOURNEY_DNY_FIELD_DEF = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 20,      // 动态字段定义(player_dny_field_def_attribute)

    TK_MATCHINFO_ENUM_TOURNEY_AVERAGE_PLAYER_COUNT = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 21,  // 平均开赛人数( DWORD秒 )

    TK_MATCHINFO_ENUM_TOURNEY_LADDER_MATCH = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 22,        // 是否快速赛制( byte )
    TK_MATCHINFO_ENUM_TOURNEY_CROWD_FUND_TYPE = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 23,     // 1：支持众筹与报名；2：仅支持众筹( byte )
    TK_MATCHINFO_ENUM_TOURNEY_USER_BUY_TOTAL_CNT = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 24,  // 用户购买总次数（DWORD）
    TK_MATCHINFO_ENUM_TOURNEY_USER_CODE_CNT = TK_MATCHINFO_ENUM_TOURNEY_DEFINEBEGIN + 25,       // 用户验证码位数（DWORD）
    TK_MATCHINFO_ENUM_TOURNEY_DEFINE_END
};
enum sign_mode
{
    sign_mode_normal,          // 普通
    sign_mode_commune,         // 公社报名
    sign_mode_random,          // 随机组队
    sign_mode_club,            // 战队报名
    sign_mode_mix_random,      // 玩家组队、随机组队混合报名方式
    sign_mode_mix_club,        // 普通组队、战队报名混合报名方式
    sign_mode_mix_club_random  // 普通组队、战队报名、随机组队混合报名方式
};
enum tourney_state
{
    tourney_state_null,
    tourney_state_memprepare,
    tourney_state_preshow,
    tourney_state_signing,
    tourney_state_waittingmatch,
    tourney_state_matching,
    tourney_state_canceled,
    tourney_state_resultshow,
    tourney_state_waittingdelete
};

enum
{
    TK_MATCHINFO_ENUM_COMMITTEE_START_TIME = TK_MATCHINFO_ENUM_COMMITTEE_DEFINEBEGIN + 0,              // 开始时间( timet )
    TK_MATCHINFO_ENUM_COMMITTEE_STATE = TK_MATCHINFO_ENUM_COMMITTEE_DEFINEBEGIN + 1,                   // 状态( BYTE )
    TK_MATCHINFO_ENUM_COMMITTEE_PLAYER_COUNT = TK_MATCHINFO_ENUM_COMMITTEE_DEFINEBEGIN + 2,            // 已报名人数( DWORD )
    TK_MATCHINFO_ENUM_COMMITTEE_UNIT_COUNT = TK_MATCHINFO_ENUM_COMMITTEE_DEFINEBEGIN + 3,              // 已报名参赛单元数( DWORD )
    TK_MATCHINFO_ENUM_COMMITTEE_EANBLE_PUSH_UNIT_INFO = TK_MATCHINFO_ENUM_COMMITTEE_DEFINEBEGIN + 4,   // 是否主动推送unit info
    TK_MATCHINFO_ENUM_COMMITTEE_UNIT_LIST_MAX_COUNT = TK_MATCHINFO_ENUM_COMMITTEE_DEFINEBEGIN + 5,     // T生成单元列表时最大个数( int )
    TK_MATCHINFO_ENUM_COMMITTEE_EANBLE_RANDOM_TEAM = TK_MATCHINFO_ENUM_COMMITTEE_DEFINEBEGIN + 6,      // 是否允许随机组队(BYTE)
    TK_MATCHINFO_ENUM_COMMITTEE_PUSH_ALL_SIGNUP_PLAYER = TK_MATCHINFO_ENUM_COMMITTEE_DEFINEBEGIN + 7,  // 强制推送报名玩家列表(BYTE)

    TK_MATCHINFO_ENUM_COMMITTEE_DEFINE_END
};

enum committee_state
{
    committee_state_prepare,
    committee_state_signing,
    committee_state_matching,
    committee_state_cancel,
    committee_state_over,

    committee_state_end
};

enum
{
    TK_MATCHINFO_ENUM_MATCH_NAME = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 0,                 // 比赛名称	( string )
    TK_MATCHINFO_ENUM_MATCH_PHASE_COUNT = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 1,          // 阶段数		( BYTE )
    TK_MATCHINFO_ENUM_MATCH_BEGIN_TIME = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 2,           // 开始时间	( time_t )
    TK_MATCHINFO_ENUM_MATCH_UNIT_COUNT = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 3,           // 总参赛单元数	( DWORD )
    TK_MATCHINFO_ENUM_MATCH_UNIT_TYPE = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 4,            // 个人赛 / 搭档赛 / 团体赛 / 复式赛 / 德州团体赛..( BYTE ).
    TK_MATCHINFO_ENUM_MATCH_TOURNEY_TYPE = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 5,         // 锦标赛 / S&G / 岛屿 / room / table...( BYTE )
    TK_MATCHINFO_ENUM_MATCH_TABLE_NAME = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 6,           // （table string）
    TK_MATCHINFO_ENUM_MATCH_DELAY_BROADCAST = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 7,      // 延时转播（int 秒）
    TK_MATCHINFO_ENUM_MATCH_JACKPOT = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 8,              // 奖金池( DWORD )
    TK_MATCHINFO_ENUM_MATCH_STATE = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 9,                // 比赛状态( BYTE )
    TK_MATCHINFO_ENUM_MATCH_POKER_TEAM_MODE = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 10,     // 德州团体赛模式( BYTE )
    TK_MATCHINFO_ENUM_MATCH_TOURNEY_ID = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 11,          // tourney id( DWORD )
    TK_MATCHINFO_ENUM_MATCH_MS_IP = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 12,               // match ip( DWORD )
    TK_MATCHINFO_ENUM_MATCH_MS_PORT = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 13,             // match port( int )
    TK_MATCHINFO_ENUM_MATCH_RANDOAWARDSCHEMEID = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 14,  // 比赛随机颁奖方案ID(DWORD)
    TK_MATCHINFO_ENUM_MATCH_COMMITTEE_ID = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 15,        // committee id(DWORD)
    // add by liy at 2016.11.23
    TK_MATCHINFO_ENUM_MATCH_ESTIMATE_ORDER = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 16,  // 是否预估全局排名( BYTE )
    TK_MATCHINFO_ENUM_MATCH_PLAYING_COUNT = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 17,   // 当前激战人数( DWORD )
    //  [3/15/2018 dongly]
    TK_MATCHINFO_ENUM_MATCH_PLAY_TYPE = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 18,  // 玩法类型( BYTE )

    TK_MATCHINFO_ENUM_MATCH_QUALIFYING_FLAG = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 19,           // 是否为排位赛的标识( BYTE )
    TK_MATCHINFO_ENUM_MATCH_QUALIFYING_OPENTIME_FLAG = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 20,  // 是否在排位赛开启时间的标识( BYTE )
    TK_MATCHINFO_ENUM_MATCH_GROUP_RANK_RULE = TK_MATCHINFO_ENUM_MATCH_DEFINEBEGIN + 21,           // 群体排名规则(string，json格式)

    TK_MATCHINFO_ENUM_MATCH_DEFINE_END
};

enum eMatchPlayType
{
    MATCH_PLAY_TYPE_RESERVE = 0,         // 保留
    MATCH_PLAY_TYPE_INTEGRALCASTLE = 1,  // 积分城堡赛
    MATCH_PLAY_TYPE_CHALLENGE = 2,       // 挑战赛（军旗三胜挑战）
    MATCH_PLAY_TYPE_CHAPTER = 3,         // 班车闯关赛
    MATCH_PLAY_TYPE_BIGAWARD = 4,        // 岛屿大奖赛
    MATCH_PLAY_TYPE_CHESSCHALLENGE = 5,  // 象棋每日挑战赛

    MATCH_PLAY_TYPE_END
};

enum match_state
{
    match_state_prepare,
    match_state_matching,
    match_state_over,
    match_state_close,
    match_state_end
};

enum
{
    TK_MATCHINFO_ENUM_PHASE_INDEX = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 0,                  // 第几阶段( BYTE )
    TK_MATCHINFO_ENUM_PHASE_TYPE = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 1,                   // pahse / group phase / parallel phase / join phase( BYTE )
    TK_MATCHINFO_ENUM_PHASE_RULE = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 2,                   // 赛制( BYTE )
    TK_MATCHINFO_ENUM_PHASE_NAME = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 3,                   // 本阶段名称，如初赛、复赛等( string )
    TK_MATCHINFO_ENUM_PHASE_BEGIN_TIME = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 4,             // 本阶段开始时间( time_t )
    TK_MATCHINFO_ENUM_PHASE_OVER_TIME = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 5,              // 本阶段结束时间( time_t )
    TK_MATCHINFO_ENUM_PHASE_WINNER_COUNT = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 6,           // 本阶段晋级参赛单元数( DWORD )
    TK_MATCHINFO_ENUM_PHASE_STAGE_COUNT = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 7,            // 分组数( BYTE )
    TK_MATCHINFO_ENUM_PHASE_UNIT_COUNT = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 8,             // 本阶段总参赛单元数( DWORD )
    TK_MATCHINFO_ENUM_NEXT_PHASE_SCORE_BASE_TABLE = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 9,  // 下阶段基数表( int list )
    TK_MATCHINFO_ENUM_PHASE_LIMIT_TIME = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 10,            // 阶段限时( time_t )
    TK_MATCHINFO_ENUM_PHASE_STATE = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 11,                 // 比赛状态( BYTE )
    TK_MATCHINFO_ENUM_PHASE_FLAG = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 12,                  // 比赛状态( WORD )见msg_generate_view::enum
    TK_MATCHINFO_ENUM_PHASE_NAME_ENU = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 13,              // 英文：本阶段名称，如初赛、复赛等( string )
    TK_MATCHINFO_ENUM_PHASE_SHOW_GROUP_NAME = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 14,       // 是否显示分组名，应用于分组赛（BYTE）
    TK_MATCHINFO_ENUM_PHASE_RELIVE_TIMEOUT = TK_MATCHINFO_ENUM_PHASE_DEFINEBEGIN + 15,        // 复活倒计时，单位秒（WORD）
    TK_MATCHINFO_ENUM_PHASE_DEFINE_END
};
enum phase_type
{
    SINGLE_PHASE = 1,    // 普通分组
    GROUP_PHASE,         // 普通分组
    PARALLEL_PHASE,      // 德州团体赛分组
    JOIN_PHASE,          // 德州团体赛并组
    VIRTUAL_GROUP_PHASE  // 虚拟分组
};
enum phase_state
{
    phase_state_prepare,
    phase_state_matching,
    phase_state_over,

    phase_state_end
};

enum
{
    TK_MATCHINFO_ENUM_STAGE_INDEX = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 0,                       // 第几分组( BYTE )
    TK_MATCHINFO_ENUM_STAGE_RULE = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 1,                        // 赛制( BYTE )
    TK_MATCHINFO_ENUM_STAGE_BOUT_COUNT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 2,                  // 轮数( BYTE )
    TK_MATCHINFO_ENUM_STAGE_WINNER_COUNT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 3,                // 本分组晋级参赛单元数( DWORD )
    TK_MATCHINFO_ENUM_STAGE_OVER_WHEN_LEFT_UNIT_COUNT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 4,   // 当剩余此未出局人数时，准备结束，不再重组，默认等于nWinnerCount( DWORD )
    TK_MATCHINFO_ENUM_STAGE_UNIT_COUNT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 5,                  // 本分组总参赛单元数( DWORD )
    TK_MATCHINFO_ENUM_STAGE_GAMECOUNT_AWARD_INFO = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 6,        // 盘数奖励信息( string 岛屿 )
    TK_MATCHINFO_ENUM_STAGE_TASK_INFO = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 7,                   // 任务信息( string 岛屿 )
    TK_MATCHINFO_ENUM_STAGE_EXCHANGE_RATE = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 8,               // 兑换率( int 岛屿 )
    TK_MATCHINFO_ENUM_STAGE_AWARD_TIME = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 9,                  // 下次颁奖倒计时( time_t 岛屿 )
    TK_MATCHINFO_ENUM_STAGE_PLAYERDYNFIELD = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 10,             //  room动态字段定议( string )
    TK_MATCHINFO_ENUM_STAGE_RELIVE_ENABLE = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 11,              //  是否允许复活( BYTE )
    TK_MATCHINFO_ENUM_STAGE_RELIVE_TIME_LIMIT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 12,          //  复活时间限制( DWORD 秒 )
    TK_MATCHINFO_ENUM_STAGE_RELIVE_PLAYER_COUNT_LIMIT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 13,  //  复活人数限制( DWORD )
    TK_MATCHINFO_ENUM_STAGE_RELIVE_COUNT_LIMIT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 14,         //  复活次数限制( DWORD )
    TK_MATCHINFO_ENUM_STAGE_BASE_RAISE_SECOND = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 15,          //  基数增长时间间隔( WORD 秒 )
    TK_MATCHINFO_ENUM_STAGE_AVERAGE_CHIP = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 16,               //  场内平均筹码( DWORD )
    TK_MATCHINFO_ENUM_STAGE_BASE_RAISE_TIME = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 17,            //  基数增长时间( time_t )
    TK_MATCHINFO_ENUM_STAGE_STATE = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 18,                      //  比赛状态( BYTE )
    TK_MATCHINFO_ENUM_STAGE_GAMESRV_IP = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 19,                 //  game server ip( DWORD )
    TK_MATCHINFO_ENUM_STAGE_GAMESRV_PORT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 20,               //  game server port( DWORD )
    TK_MATCHINFO_ENUM_STAGE_FLAG = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 21,                       // 比赛状态( WORD )见msg_generate_view::enum
    TK_MATCHINFO_ENUM_STAGE_PLAYOFF_FLAG = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 22,               // 加赛标识（BYTE bit0-4 是否有加赛 bit5 是否加赛中 )
    TK_MATCHINFO_ENUM_STAGE_MIN_REDEMPTION_CHIP = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 23,        // 最少回兑筹码数( DWORD )
    TK_MATCHINFO_ENUM_STAGE_SET_INHERIT_PERCENT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 24,        // 局间带分百分比( BYTE )
    TK_MATCHINFO_ENUM_STAGE_MIN_CHIP = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 25,                   // 最少筹码数( DWORD )
    TK_MATCHINFO_ENUM_STAGE_SORT_PLAYER = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 26,                // 岛屿赛是否排名( BYTE )
    TK_MATCHINFO_ENUM_STAGE_AVG_TIME = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 27,                   // 平均时长( int )
    TK_MATCHINFO_ENUM_STAGE_COMPLETE_PECENT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 28,            // 完成百分比( int )
    TK_MATCHINFO_ENUM_STAGE_PROMOTE_SCORE = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 29,              // 预计晋级分数( int )
    TK_MATCHINFO_ENUM_STAGE_RUNNING_ROUND = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 30,              // 正在进行的round数( int )
    TK_MATCHINFO_ENUM_STAGE_COUNTDOWN_PECENT_MAX = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 31,       // 倒计时百分比最大值
    TK_MATCHINFO_ENUM_STAGE_NEXT_BASE = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 32,                  // 下一个基数大小( DWORD)
    TK_MATCHINFO_ENUM_STAGE_PEAK_AWARD = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 33,                 // 巅峰对局奖励XML(string)
    TK_MATCHINFO_ENUM_STAGE_LADDERMATCH = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 34,                // 结果班车标志(byte)
    TK_MATCHINFO_ENUM_STAGE_SUPERBANKER_INIT_CHIP = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 35,      // 超级庄家的初始筹码数( DWORD )
    TK_MATCHINFO_ENUM_STAGE_INDIV_PROMOTE_AWARD_PLAN = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 36,   // 班车锦标赛轮次晋级奖励方案( json string )
    TK_MATCHINFO_ENUM_STAGE_MAX_UNIT_LIST_COUNT = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 37,        // 本分组展示的最大全场排名数( int )
    TK_MATCHINFO_ENUM_STAGE_MIN_CHIP_64_STR = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 38,            // 最少筹码数( 64位string )
    TK_MATCHINFO_ENUM_STAGE_EXCHANGE_RATE64 = TK_MATCHINFO_ENUM_STAGE_DEFINEBEGIN + 39,            // 64位回兑率XML( string )

    TK_MATCHINFO_ENUM_STAGE_DEFINE_END
};

enum stage_state
{
    stage_state_prepare,
    stage_state_matching,
    stage_state_over,

    stage_state_end
};

enum
{
    TK_MATCHINFO_ENUM_BOUT_INDEX = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 0,                       // 第几轮			( BYTE )
    TK_MATCHINFO_ENUM_BOUT_TYPE = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 1,                        // BOUT类型		( BYTE )
    TK_MATCHINFO_ENUM_BOUT_BEGIN_TIME = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 2,                  // 开始时间		( time_t )
    TK_MATCHINFO_ENUM_BOUT_OVER_TIME = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 3,                   // 结束时间		( time_t )
    TK_MATCHINFO_ENUM_BOUT_WINNER_COUNT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 4,                // 晋级参赛单元数	( DWORD )
    TK_MATCHINFO_ENUM_BOUT_OVER_WHEN_LEFT_UNIT_COUNT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 5,   // 当剩余此未出局人数时，准备结束，不再重组，默认等于nWinnerCount( DWORD )
    TK_MATCHINFO_ENUM_BOUT_UNIT_COUNT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 6,                  // 本轮总参赛单元数( DWORD )
    TK_MATCHINFO_ENUM_BOUT_PROMOTE_RULE = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 7,                // 晋级规则( string )
    TK_MATCHINFO_ENUM_BOUT_RELIVE_ENABLE = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 8,               //  是否允许复活( BYTE )
    TK_MATCHINFO_ENUM_BOUT_RELIVE_TIME_LIMIT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 9,           //  复活时间限制( DWORD 秒 )
    TK_MATCHINFO_ENUM_BOUT_RELIVE_PLAYER_COUNT_LIMIT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 10,  //  复活人数限制( DWORD )
    TK_MATCHINFO_ENUM_BOUT_RELIVE_COUNT_LIMIT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 11,         //  复活次数限制( DWORD )
    TK_MATCHINFO_ENUM_BOUT_BASE_RAISE_SECOND = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 12,          //  基数增长时间间隔( WORD 秒 )
    TK_MATCHINFO_ENUM_BOUT_AVERAGE_CHIP = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 13,               //  场内平均筹码( DWORD )
    TK_MATCHINFO_ENUM_BOUT_BASE_RAISE_TIME = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 14,            //  基数增长时间( time_t )
    TK_MATCHINFO_ENUM_BOUT_STATE = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 15,                      //  比赛状态( BYTE )
    TK_MATCHINFO_ENUM_BOUT_AVG_TIME = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 16,                   // 平均时长( int )
    TK_MATCHINFO_ENUM_BOUT_COMPLETE_PECENT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 17,            // 完成百分比( int )
    TK_MATCHINFO_ENUM_BOUT_PROMOTE_SCORE = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 18,              // 预计晋级分数( int )
    TK_MATCHINFO_ENUM_BOUT_RUNNING_ROUND = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 19,              // 正在进行的round数( int )
    TK_MATCHINFO_ENUM_BOUT_COUNTDOWN_PECENT_MAX = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 20,       // 倒计时百分比最大值
    TK_MATCHINFO_ENUM_BOUT_ALIVE_UNIT_COUNT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 21,           // 指定客户端显示本轮总人数( DWORD )
    TK_MATCHINFO_ENUM_BOUT_RESULT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 22,                     // BoutResult XML(string)
    TK_MATCHINFO_ENUM_BOUT_PROMOTEAWARD = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 23,               // 淘汰赛轮次晋级赏金奖励XML(string)
    TK_MATCHINFO_ENUM_BOUT_FINALAWARD = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 24,                 // 决赛轮赏金奖励XML(string)
    TK_MATCHINFO_ENUM_BOUT_RUNNING_UNIT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 25,               // 正在进行的unit数( int )
    TK_MATCHINFO_ENUM_BOUT_TEAM_GAME_TYPE = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 26,             // 团赛的赛制类型：总分制0，节分制1
    TK_MATCHINFO_ENUM_BOUT_RUNNING_TABLE = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 27,              // 正在进行的table数( int )
    TK_MATCHINFO_ENUM_BOUT_PROMOTE_RULE_ENU = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 28,           // 英文：晋级规则( string )
    TK_MATCHINFO_ENUM_BOUT_INDIV_PROMOTE_AWARD_PLAN = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 29,   // 班车锦标赛轮次晋级奖励方案( json string )
    TK_MATCHINFO_ENUM_BOUT_MAX_UNIT_LIST_COUNT = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 30,        // 本轮展示的最大全场排名数( int )
    TK_MATCHINFO_ENUM_BOUT_IS_ADDITIONAL = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 31,              // 是否是因为人数变更产生的附加轮,默认false( Byte )
    TK_MATCHINFO_ENUM_BOUT_IS_FINAL_OF_PHASE = TK_MATCHINFO_ENUM_BOUT_DEFINEBEGIN + 32,          // 是否是当前阶段最后一轮,默认false( Byte )
    TK_MATCHINFO_ENUM_BOUT_DEFINE_END
};
enum bout_state
{
    bout_state_prepare,
    bout_state_matching,
    bout_state_over,
    bout_state_switch,  //切换比赛服务
    bout_state_end
};

enum
{
    TK_MATCHINFO_ENUM_ROUND_SCORE_BASE = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 0,             // 当前基数( int )
    TK_MATCHINFO_ENUM_ROUND_GAME_COUNT = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 1,             // 总副数( BYTE )
    TK_MATCHINFO_ENUM_ROUND_HAND_OVER = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 2,              // 已完成副数( BYTE )
    TK_MATCHINFO_ENUM_ROUND_RULER = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 3,                  // 局制（“三局两胜”， “积分最高者获胜”，“打立出局”....）
    TK_MATCHINFO_ENUM_ROUND_TABLE_COUNT = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 4,            // 桌数（团体赛）( BYTE )
    TK_MATCHINFO_ENUM_ROUND_UNIT_TYPE = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 5,              // player / pair / team / pair_team( BYTE )
    TK_MATCHINFO_ENUM_ROUND_OUT_SCORE = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 6,              // 低于这个值被淘汰( int )
    TK_MATCHINFO_ENUM_ROUND_STANDARD_SCORE = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 7,         // 达标分数( int )
    TK_MATCHINFO_ENUM_ROUND_SECTION_COUNT = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 8,          // 节数( BYTE )
    TK_MATCHINFO_ENUM_ROUND_SECTION_INDEX = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 9,          // 当前第几节( BYTE )
    TK_MATCHINFO_ENUM_ROUND_NEXT_SCORE_BASE = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 10,       // 下一次的基数( DWORD )
    TK_MATCHINFO_ENUM_ROUND_MATCHING_TABLE_COUNT = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 11,  // 正在比赛的桌数（团体赛）( BYTE )
    TK_MATCHINFO_ENUM_ROUND_SCORE = TK_MATCHINFO_ENUM_ROUND_DEFINEBEGIN + 12,                 // 队伍比分（7 : 5 : 1）( string )

    TK_MATCHINFO_ENUM_ROUND_DEFINE_END
};

enum
{
    TK_MATCHINFO_ENUM_TABLE_INDEX = TK_MATCHINFO_ENUM_TABLE_DEFINEBEGIN + 0,           // 桌号( BYTE )
    TK_MATCHINFO_ENUM_TABLE_SCORE_BASE = TK_MATCHINFO_ENUM_TABLE_DEFINEBEGIN + 1,      // 当前基数( int )
    TK_MATCHINFO_ENUM_TABLE_GAME_COUNT = TK_MATCHINFO_ENUM_TABLE_DEFINEBEGIN + 2,      // 总副数( BYTE )
    TK_MATCHINFO_ENUM_TABLE_HAND_OVER = TK_MATCHINFO_ENUM_TABLE_DEFINEBEGIN + 3,       // 已完成副数( BYTE )
    TK_MATCHINFO_ENUM_TABLE_RULER = TK_MATCHINFO_ENUM_TABLE_DEFINEBEGIN + 4,           // 局制（“固定盘数”， “n局n/2+1胜局制”，“打立出局”"达标"....）
    TK_MATCHINFO_ENUM_TABLE_UNIT_TYPE = TK_MATCHINFO_ENUM_TABLE_DEFINEBEGIN + 5,       // player / pair( BYTE )
    TK_MATCHINFO_ENUM_TABLE_OUT_SCORE = TK_MATCHINFO_ENUM_TABLE_DEFINEBEGIN + 6,       // 低于这个值被淘汰( int )
    TK_MATCHINFO_ENUM_TABLE_STANDARD_SCORE = TK_MATCHINFO_ENUM_TABLE_DEFINEBEGIN + 7,  // 达标分数( int )

    TK_MATCHINFO_ENUM_TABLE_DEFINE_END
};

enum eDicRoundType
{
    TK_ROUNDTYPE_TOTALGAME = 1,   // 固定盘数
    TK_ROUNDTYPE_MINWINGAME = 2,  // n局n/2+1胜局制
    TK_ROUNDTYPE_TOZEROCHIP = 3,  // 打立出局制
    //#define TK_ROUNDTYPE_???		=4, //
    TK_ROUNDTYPE_GAMBLE = 5,   // 生存岛
    TK_ROUNDTYPE_SWISS = 6,    // 瑞士移位定局积分
    TK_ROUNDTYPE_STANDARD = 7  // 达标分数和最大盘数
};

enum
{
    TK_MATCHINFO_ENUM_UNIT_SCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 0,                   // 比赛总积分( int )
    TK_MATCHINFO_ENUM_UNIT_ORDER = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 1,                   // 排名( int )
    TK_MATCHINFO_ENUM_UNIT_OUT_STATE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 2,               // 出局状态( WORD )
    TK_MATCHINFO_ENUM_UNIT_CV = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 3,                      // 连胜盘数( int )
    TK_MATCHINFO_ENUM_UNIT_GAME_COUNT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 4,              // 当前阶段已玩盘数( int )
    TK_MATCHINFO_ENUM_UNIT_LIFE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 5,                    // 生命值( int )
    TK_MATCHINFO_ENUM_UNIT_TOTAL_GAME_COUNT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 6,        // 总盘数( int )
    TK_MATCHINFO_ENUM_UNIT_DYNFIELD = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 7,                // 动态字段( string )
    TK_MATCHINFO_ENUM_UNIT_ROUND_SCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 8,             // 场分( int )
    TK_MATCHINFO_ENUM_UNIT_GS_IP = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 9,                   // gs ip( DWORD )
    TK_MATCHINFO_ENUM_UNIT_GS_PORT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 10,                // gs port( DWORD )
    TK_MATCHINFO_ENUM_UNIT_SECOND_SCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 11,           // 小分( int )
    TK_MATCHINFO_ENUM_UNIT_THIRD_SCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 12,            // 第二小分（团体赛游戏分）( int )
    TK_MATCHINFO_ENUM_UNIT_DISSCUSSID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 13,             // 讨论组( DWORD )
    TK_MATCHINFO_ENUM_UNIT_NUMBER = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 14,                 // 玩家编号，在队伍内的位置( byte )
    TK_MATCHINFO_ENUM_UNIT_CAPTAIN = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 15,                // 队长( string )
    TK_MATCHINFO_ENUM_UNIT_LEADER = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 16,                 // 主将( string )
    TK_MATCHINFO_ENUM_UNIT_TEAM_FLAG = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 17,              // 队伍标识( DWORD )
    TK_MATCHINFO_ENUM_UNIT_TEAM_RESTRICT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 18,          // 替补限制( team_restrict_attribute )
    TK_MATCHINFO_ENUM_UNIT_TEAM_LEADING_PLAYER = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 19,    // 主力队员数(BYTE)
    TK_MATCHINFO_ENUM_UNIT_OPPOSITE_CAPTAIN = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 20,       // 指定对手队长名
    TK_MATCHINFO_ENUM_UNIT_TEAM_SNSID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 21,             // sns( team_sns_attribute )
    TK_MATCHINFO_ENUM_UNIT_KILLCOUNT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 22,              // 猎人赛中猎人的杀人数( DWORD 3000表示杀了0.3个人 )
    TK_MATCHINFO_ENUM_UNIT_TABLE_INDEX = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 23,            // 所在桌号( WORD 为0表示不在游戏中 )
    TK_MATCHINFO_ENUM_UNIT_ROUND_SECOND_SCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 24,     // 场分小分( int )
    TK_MATCHINFO_ENUM_UNIT_PAIR_LIMITS = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 25,            // 搭档限制条件( player_pair_limits_attribute )
    TK_MATCHINFO_ENUM_PLAYER_DNY_FIELD = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 26,            // 动态字段(player_dny_field_attribute)
    TK_MATCHINFO_ENUM_UNIT_INFO = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 27,                   // 详细数据( string )
    TK_MATCHINFO_ENUM_PLAYER_SECTION_SCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 28,        // 节分( int )
    TK_MATCHINFO_ENUM_UNIT_TEAM_RESERVE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 29,           // 保留座位( team_reserve_attribute )
    TK_MATCHINFO_ENUM_PLAYER_FLAG = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 30,                 // 玩家标识( byte )
    TK_MATCHINFO_ENUM_UNIT_MATCH_STATE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 31,            // 玩家比赛状态( DWORD )
    TK_MATCHINFO_ENUM_UNIT_CARRYBOUNTY = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 32,            //德州猎人赛中 携带赏金数( DWORD )
    TK_MATCHINFO_ENUM_UNIT_MATCH_PROCESS_AWARD = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 33,    //比赛过程奖励（player_match_process_award_attribute）
    TK_MATCHINFO_ENUM_UNIT_ALIVE_PLAYER_COUNT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 34,     //结果班车存活人数（int）
    TK_MATCHINFO_ENUM_UNIT_DISABLE_WINSTREAK = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 35,      //是否禁用连胜任务（BYTE）
    TK_MATCHINFO_ENUM_UNIT_REMAINDER_HEART_COUNT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 36,  //碎心赛玩家剩余心的颗数（int）
    TK_MATCHINFO_ENUM_UNIT_PLAYER_MATCH_SCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 37,     //碎心赛玩家的分数（int）
    TK_MATCHINFO_ENUM_UNIT_BREAKHEART_TASK_STATE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 38,  //碎心赛任务状态（BYTE）
    TK_MATCHINFO_ENUM_UNIT_FIGURE_ID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 39,              // 用户头像ID（int）
    TK_MATCHINFO_ENUM_UNIT_TEAM_TEMP_GROUP_ID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 40,     // 团体/自建桌临时讨论组ID（DWORD）
    TK_MATCHINFO_ENUM_UNIT_GOLD_COST_TOTAL = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 41,        // 金币花费总计（DWORD）
    TK_MATCHINFO_ENUM_UNIT_KILL_BOUNTY_TOTAL = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 42,      // 猎人赏金总计（DWORD）
    TK_MATCHINFO_ENUM_UNIT_TEAM_TEMP_SNSCLASS_ID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 43,  // 讨论组“关系”基础类别（DWORD）
    TK_MATCHINFO_ENUM_UNIT_TEAM_TEMP_SNSTYPE_ID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 44,   // 讨论组“关系”类型（DWORD）
    TK_MATCHINFO_ENUM_UNIT_ORGANIZATION_ID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 45,        // 团体ID（DWORD）
    TK_MATCHINFO_ENUM_UNIT_MATCH_ARCHIVE_FLAG = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 46,     // 存档标志(BYTE 0表示不支持存档，1表示未预约存档，2表示已预约存档)
    TK_MATCHINFO_ENUM_UNIT_REALTIME_STANDBY_ID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 47,    // 实时旁观聊天房间ID(DWORD)
    TK_MATCHINFO_ENUM_UNIT_HUNT_COUNT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 48,             // 猎神赛猎杀人数(DWORD)
    TK_MATCHINFO_ENUM_UNIT_ROUND_ORDER = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 49,            // 本局结束时的排名(DWORD)
    TK_MATCHINFO_ENUM_UNIT_EXCHANGE_COIN = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 50,          // 猎神赛回兑金币数(DWORD)
    TK_MATCHINFO_ENUM_UNIT_CNT_TID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 51,                // 大厅客户端链接类型(WORD)
    TK_MATCHINFO_ENUM_UNIT_CLT_TID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 52,                // 大厅客户端程序类型(WORD)
    TK_MATCHINFO_ENUM_UNIT_SIGN_UP_TYPE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 53,           // 报名方案号(DWORD)
    TK_MATCHINFO_ENUM_UNIT_GAMEID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 54,                 // 游戏ID(WORD)
    TK_MATCHINFO_ENUM_UNIT_PRODUCTID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 55,              // 产品ID(DWORD)
    TK_MATCHINFO_ENUM_UNIT_GROWDOMAINID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 56,           // 积分域ID(WORD)
    TK_MATCHINFO_ENUM_UNIT_RANKSCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 57,              // 地方麻将段位分(DWORD)
    TK_MATCHINFO_ENUM_UNIT_MATCHREMAINUNITCOUNT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 58,   // 玩家所在比赛的剩余比赛单元数量(int)
    TK_MATCHINFO_ENUM_UNIT_LANGVERSION = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 59,            // 语言版本(int)
    TK_MATCHINFO_ENUM_UNIT_PHASE_INDEX = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 60,            // 玩家所在的阶段(BYTE)
    TK_MATCHINFO_ENUM_UNIT_STAGE_INDEX = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 61,            // 玩家所在的分组(BYTE)
    TK_MATCHINFO_ENUM_UNIT_BOUT_INDEX = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 62,             // 玩家所在的轮(BYTE)
    TK_MATCHINFO_ENUM_UNIT_RESUMEARCHIVE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 63,          // 玩家是否有存档（Byte）
    TK_MATCHINFO_ENUM_UNIT_ARCHIVEDATA = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 64,            // 玩家存档内容 (LadderRecord)
    TK_MATCHINFO_ENUM_UNIT_TAGDATA = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 65,                // 玩家标签数据（DWORD）
    TK_MATCHINFO_ENUM_UNIT_MONEYACCTYPE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 66,           // 玩家报名账户类型（DWORD）
    TK_MATCHINFO_ENUM_UNIT_OSTYPE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 67,                 // 玩家客户端操作系统（BYTE）
    TK_MATCHINFO_ENUM_UNIT_APPID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 68,                  // 玩家客户端安装包ID (DWORD)
    TK_MATCHINFO_ENUM_UNIT_SITEID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 69,                 // 渠道标识（DWORD）
    TK_MATCHINFO_ENUM_UNIT_FORM_ID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 70,                // 形象ID（int）
    TK_MATCHINFO_ENUM_UNIT_PROCESS_RESULT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 71,         // 玩家匹配进度结果（BYTE）
    TK_MATCHINFO_ENUM_UNIT_ENTER_SCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 72,            // 玩家带分（int）
    TK_MATCHINFO_ENUM_UNIT_SIGN_ORDER = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 73,             // 玩家报名顺序（DWORD）
    TK_MATCHINFO_ENUM_UNIT_PACERBOT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 74,               // 是否是AI
    TK_MATCHINFO_ENUM_UNIT_LOCALBOUT_GAMECOUNT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 75,    // 本轮次局数
    TK_MATCHINFO_ENUM_UNIT_PACERBOT_MSPORT = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 76,        // AI加入时的Ms Port
    TK_MATCHINFO_ENUM_UNIT_BOUT_BYE_SCORE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 77,         // 轮空带分
    TK_MATCHINFO_ENUM_UNIT_GROUPNAME = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 78,              // 对于分组赛，表示玩家所处的组名,如A\B\C\A1\B1\C1（string）
    TK_MATCHINFO_ENUM_UNIT_ADDITIONALLIST = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 79,         // 队伍附属信息（string）
    TK_MATCHINFO_ENUM_UNIT_MATCH_STATUS = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 80,           // 玩家比赛状态的扩展(BYTE，具体值参考ePlayerMatchStatus)
    TK_MATCHINFO_ENUM_UNIT_PAYERID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 81,                // 付费人ID (DWORD)
    TK_MATCHINFO_ENUM_UNIT_CROWDFUNDID = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 82,            // 众筹ID(DWORD)
    TK_MATCHINFO_ENUM_UNIT_DOUBLEPLAYER = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 83,           // 玩家组队标识（应用于双人班车赛制，BYTE）
    TK_MATCHINFO_ENUM_UNIT_MATCH_LEVEL = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 84,            // 比赛级别(BYTE)
    TK_MATCHINFO_ENUM_UNIT_DEDUCTIONFEETYPE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 85,       // 扣费类型(DWORD)
    TK_MATCHINFO_ENUM_UNIT_TOP_CV_CALC_RULE = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 86,       // 达到最高连胜后连胜奖励计算规则( byte )
    TK_MATCHINFO_ENUM_UNIT_DOMAIN = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 87,                 // 用户统计域
    TK_MATCHINFO_ENUM_UNIT_SCORE_64 = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 88,               // 比赛总积分( int64 )
    TK_MATCHINFO_ENUM_UNIT_LIFE_64 = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 89,                // 生命值( int64 )
    TK_MATCHINFO_ENUM_UNIT_SCORE_64_STR = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 90,           // 比赛总积分( String )
    TK_MATCHINFO_ENUM_UNIT_LIFE_64_STR = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 91,            // 生命值( String )
    TK_MATCHINFO_ENUM_UNIT_PLAYER_UNIQUE_FLAG = TK_MATCHINFO_ENUM_UNIT_DEFINEBEGIN + 92,     // 玩家在一场比赛中的唯一标识( DWORD )

    TK_MATCHINFO_ENUM_UNIT_DEFINE_END
};

enum
{
    TEAM_FLAG_NEED_CAPTION_CONFIRM = 1,     // 加入队伍需要队长确认
    TEAM_FLAG_CAPTION_PAY_ALL_FEES = 2,     // 是否队长付费
    TEAM_FLAG_MUST_FRIEND = 4,              // 只加好友
    TEAM_FLAG_NO_SUBSTITUTE = 8,            // 不要替补
    TEAM_FLAG_COMPLETED = 16,               // 是否完成组队(主力到齐)
    TEAM_FLAG_HIDE_ARRANGEMENT = 32,        // 阵容是否可见
    TEAM_FLAG_MATCH_BEGIN = 64,             //比赛已经开始
    TEAM_FLAG_CREATE_TEAM_BY_SYSTEM = 128,  // 系统创建的队伍
    TEAM_FLAG_TEAM_CONFIRMED = 256,         // 队伍是否已确认
    TEAM_FLAG_END
};

enum
{
    PLAYER_FLAG_PENDING = 1,  // 挂单玩家

    PLAYER_FLAG_END
};

enum
{
    TK_UNIT_MATCH_STATE_MATCHING = 0x01000000,    //还在比赛中
    TK_UNIT_MATCH_STATE_MATCHOUT = 0x02000000,    //已经出局
    TK_UNIT_MATCH_STATE_PROMOTION = 0x04000000,   //比赛确认晋级了
    TK_UNIT_MATCH_STATE_WAITRESULT = 0x08000000,  //比赛完了，但不确定出局还是晋级
    TK_UNIT_MATCH_STATE_NOTROUND = 0x10000000,    //轮空

    TK_UNIT_MATCH_STATE_END
};

//Tourney的产品属性标记
enum eTourneyFlags
{
    TK_TOURNEY_FLAG_SIGN_PC = 0x0001,  //pc端可以报名
    TK_TOURNEY_FLAG_SIGN_WC = 0x0002,  //flash端可以报名
    TK_TOURNEY_FLAG_SIGN_MB = 0x0004,  //移动端可以报名

    TK_TOURNEY_FLAG_END
};

//客户大启动类型
enum eLcStartMcType
{
    TK_LCSTARTMC_TYPE_BEGIN = 0,     // 开赛启动
    TK_LCSTARTMC_TYPE_BREAK = 1,     // 断线重启
    TK_LCSTARTMC_TYPE_INVOKE = 2,    // 疑似断线重启
    TK_LCSTARTMC_TYPE_GSCHANGE = 3,  // GS跳转重启
    TK_LCSTARTMC_TYPE_SPECTATOR = 4  // 旁观启动(Agent封装启动消息下发给移动端时)
};

//========================================================================================
// 与比赛无关的数据结构
//========================================================================================

//----------------------------------------------------------------------------------------
// 通用结构定义

// 用户信息
typedef struct tagLsUserInfo
{
    DWORD dwUserID;
    char szNickName[TK_BUFLEN_NICKNAME];
    WORD wFigureID;

    DWORD dwCoin;   // 元宝
    DWORD dwBonus;  // 奖券
    DWORD dwGold;   // 金币
    DWORD dwCert;   // 代金券（门票）

    DWORD dwScore;  // 累计积分
    //Gaoy, Add
    DWORD dwMasterScore;  // 大师分

} LSUSERINFO, *PLSUSERINFO;

// 比赛断线信息 wuqy add 2012.3.20
typedef struct tagTkMatchBreakInfo
{
    DWORD dwUserID;

    DWORD dwTourneyID;
    DWORD dwMatchID;
    DWORD dwCheck;

    time_t tBreakTime;

    WORD wGameID;
    WORD wReserve;
    DWORD dwSignUpPlanID;
    DWORD dwReserve2;
    DWORD dwReserve3;
    DWORD dwReserve4;
    int nGSPort;

    DWORD dwProductID;
    WORD wGrowDomainID;
    WORD wSignUpType;
    WORD wCntTID;  //大厅客户端链接类型 eLobbyConnetType
    WORD wCltTID;  //大厅客户端程序类型

    DWORD dwMatchPoint;  // 开赛点
    DWORD dwTeamID;
    DWORD dwGSNIPInt;

} TKMATCHBREAKINFO, *PTKMATCHBREAKINFO;

typedef struct tagTkGameAtomEvent
{
    DWORD dwEventID;
    DWORD dwEventValue;
} TKGAMEATOMEVENT, *PTKGAMEATOMEVENT;

//===========================================================================================
// 与比赛有关的数据结构
//===========================================================================================
/////////////////////////////////////////////////////////////////////////////////////

// Tourney状态
enum eTourneyState
{
    TOURNEYPROPAGANDIZING = 0,  // 宣传中
    TOURNEYSIGNUPING = 1,       // 报名中
    TOURNEYSTARTUPING = 2,      // 启动中
    TOURNEYPROGRESS = 3,        // 进行中
    TOURNEYSTOP = 4,            // 结束
    TOURNEYCANCEL = 5           // 取消
};

// Stage状态
enum eStageState
{
    STAGESTARTUPING = 0,  // 启动中
    STAGEPROGRESS = 1,    // 进行中
    STAGESTOP = 2,        // 结束
    STAGECANCEL = 3       // 取消
};

// Ms到Gs的消息异步模式
enum eMsg2GsAsyncType
{
    TK_MSG2GS_ASTYPE_NULL = 0,  //
    TK_MSG2GS_ASTYPE_GS = 1,    // GS执行分组异步
    TK_MSG2GS_ASTYPE_MS = 2,    // MS执行分组异步
};

//Tourney开赛点类型
enum eTouryenMatchPointType
{
    TOURNEYMATCHPOINT_TYPE_RESERVER = 0,

    TOURNEYMATCHPOINT_TYPE_NULL = 1,    // 一直处于进行中的比赛，没有开赛点(比如：岛屿，自由桌，房间，约战)
    TOURNEYMATCHPOINT_TYPE_SINGLE = 2,  // 单开赛点的比赛(比如：班车，SNG，动态班车)
    TOURNEYMATCHPOINT_TYPE_MULT = 3     // 多开赛点的比赛(比如：分钟锦标赛，系列赛)
};

// Tourney比赛开赛类型
enum eTourneyStartMatchType
{
    TOURNEYSTARTMATCH_RESERVER = 0,  // 保留

    TOURNEYSTARTMATCH_MULTTIME = 1,     // 有多个定点开赛点的Tourney
    TOURNEYSTARTMATCH_MULTTABLE = 2,    // 有多个赛桌同时进行的Tourney
    TOURNEYSTARTMATCH_BATCHTIME = 3,    // 班车开始时间动态变化的Tourney
    TOURNEYSTARTMATCH_SITROOM = 4,      // 自由房间的Tourney
    TOURNEYSTARTMATCH_ISLAND = 5,       // 岛屿比赛Tourney
    TOURNEYSTARTMATCH_SERIES = 6,       // 系列比赛Tourney
    TOURNEYSTARTMATCH_DYNTIME = 7,      // 动态开赛时间的Tourney
    TOURNEYSTARTMATCH_SNG = 8,          // Sit&Go比赛Tourney
    TOURNEYSTARTMATCH_FIXTITLE = 9,     // 独立锦标赛
    TOURNEYSTARTMATCH_LBS = 10,         // 面对面玩牌Tourney
    TOURNEYSTARTMATCH_LADDER = 11,      // 结果班车比赛Tourney
    TOURNEYSTARTMATCH_FDTABLE = 12,     // 朋友桌/自建桌比赛Tourney
    TOURNEYSTARTMATCH_CUSTOMIZED = 13,  // 自建比赛Tourney
    TOURNEYSTARTMATCH_FAMILY = 14,      // 家族比赛Tourney

    TOURNEYSTARTMATCH_RESERVE_END
};

// 参赛单元类型(团体赛/个人赛)
enum eTourneyTeamType
{
    TK_TOURNEY_TEAM_TYPE_RESERVER = 0,  // 保留

    TK_TOURNEY_TEAM_TYPE_INDIVIDUAL = 1,       // 个人赛
    TK_TOURNEY_TEAM_TYPE_PAIR = 2,             // 搭档赛
    TK_TOURNEY_TEAM_TYPE_TEAM = 3,             // 以个人为单位的团体赛
    TK_TOURNEY_TEAM_TYPE_PAIR_TEAM = 4,        // 以搭档为单位的团体赛
    TK_TOURNEY_TEAM_TYPE_DUPLEX = 5,           // 复式赛
    TK_TOURNEY_TEAM_TYPE_TEAM_CHAOS = 6,       // 筹码类团体赛
    TK_TOURNEY_TEAM_TYPE_PLAY_ONE_CARD = 7,    // 多人一副牌团体赛
    TK_TOURNEY_TEAM_TYPE_SINGLE_AND_TEAM = 9,  // 个人和队伍混合赛（应用于双人班车）
};

enum eTeamType
{
    TEAM_TYPE_SINGLE = TK_TOURNEY_TEAM_TYPE_INDIVIDUAL,                // 单人赛
    TEAM_TYPE_PAIR = TK_TOURNEY_TEAM_TYPE_PAIR,                        // pair赛
    TEAM_TYPE_TEAM = TK_TOURNEY_TEAM_TYPE_TEAM,                        // 单人队式赛
    TEAM_TYPE_PAIR_TEAM = TK_TOURNEY_TEAM_TYPE_PAIR_TEAM,              // 以pair为单位的队式赛
    TEAM_TYPE_DUPLEX = TK_TOURNEY_TEAM_TYPE_DUPLEX,                    // 复式赛
    TEAM_TYPE_TEAM_CHAOS = TK_TOURNEY_TEAM_TYPE_TEAM_CHAOS,            // 筹码类团体赛
    TEAM_TYPE_PLAY_ONE_CARD = TK_TOURNEY_TEAM_TYPE_PLAY_ONE_CARD,      // 多人一副牌团体赛
    TEAM_TYPE_SINGLE_AND_TEAM = TK_TOURNEY_TEAM_TYPE_SINGLE_AND_TEAM,  //个人和队伍混合赛（应用于双人班车）
};
//比赛奖励类别
enum eMatchAwardMessageType
{
    MATCH_AWARD_MESSAGE_TYPE_RESERVER = 0,       // 保留
    MATCH_AWARD_MESSAGE_TYPE_LUCKCARD = 1,       // 幸运卡奖励
    MACTH_AWARD_MESSAGE_TYPE_JOYGOLD = 2,        // 天降喜金
    MATCH_AWARD_MESSAGE_TYPE_WARE = 3,           // 天降物品
    MATCH_AWARD_MESSAGE_TYPE_WINNINGSTREAK = 4,  // 连胜奖励
    MATCH_AWARD_MESSAGE_TYPE_TOTALWINNING = 5,   // 累胜奖励
    MATCH_AWARD_MESSAGE_TYPE_TOTALROUND = 6,     // 满盘奖励
    MATCH_AWARD_MESSAGE_TYPE_PK = 7,             // PK奖励
    MATCH_AWRAD_MESSAGE_TYPE_MOSAICGOLD = 8,     // 彩金奖励
    MATCH_AWARD_MESSAGE_TYPE_PEAKTABLE = 9,      // 巅峰对局奖励
    MATCH_AWARD_MESSAGE_TYPE_WHEELTABLE = 10,    // 轮盘局奖励
    MATCH_AWARD_MESSAGE_TYPE_BOUTPROMOTE = 11,   // 淘汰赛轮次晋级赏金奖励
    MATCH_AWARD_MESSAGE_TYPE_FINALBOUT = 12,     // 决赛轮赏金奖励
    MATCH_AWARD_MESSAGE_TYPE_BREAKHEART = 13,    // 碎心任务奖励
    MATCH_AWARD_MESSAGE_TYPE_BOMB = 14
};

// 比赛通过组委会推送到客户端的奖状后缀奖励类型
enum eMatchAwardMessageBizType
{
    MATCH_AWARD_MESSAGE_BIZTYPE_RESERVE = 0,             // 保留
    MATCH_AWARD_MESSAGE_BIZTYPE_AI = 1,                  // AI复试赛
    MATCH_AWARD_MESSAGE_BIZTYPE_QUALIFYING = 2,          // 排位赛
    MATCH_AWARD_MESSAGE_BIZTYPE_PROMOTION = 3,           // 晋级奖
    MATCH_AWARD_MESSAGE_BIZTYPE_DOUBLEPLAYER = 4,        // 双人
    MATCH_AWARD_MESSAGE_BIZTYPE_DOUBLECOMPENSATION = 5,  // 双人补偿奖励
    MATCH_AWARD_MESSAGE_BIZTYPE_CHICKENMATCH = 6,        // 吃鸡模式
    MATCH_AWARD_MESSAGE_BIZTYPE_BOSS = 7,                // Boss赛分数
    MATCH_AWARD_MESSAGE_BIZTYPE_RELIVE = 8,              // 复活均分
};
// 后缀数据格式定义(此定义为BID定义，DATA格式需与客户端自行定义)
//{
//	"BUSINESS_LIST": [{ "BID": "3","DATA": {...} }, { "BID": "4","DATA": {...} }, ...]
//}
// 此部分Json会添加在颁奖XML数据中，对应xml的key为<Scores>

// 大厅客户端链接类型
enum eLobbyConnetType
{
    LOBBYCONNETTYPE_RESERVE = 0,  // 保留
    LOBBYCONNETTYPE_NORMAL = 1,   // 普通PC客户端
    LOBBYCONNETTYPE_WEB = 2,      // 网页客户端
    LOBBYCONNETTYPE_MOBILE = 3    // 手机客户端
};

// 大厅客户端程序类型
enum eLobbyClientType
{
    TK_LOBBYCLT_NULL = 0,              // 保留
    TK_LOBBYCLT_VSLOBBYCLT = 10000,    // 电竞(VS)大厅客户端
    TK_LOBBYCLT_FISHLBYCLT = 10001,    // 捕鱼达人PC大厅客户端
    TK_LOBBYCLT_FISHMOBCLT = 10002,    // 捕鱼达人游戏移动客户端
    TK_LOBBYCLT_FGAMEMOBCLT = 10003,   // 海外游戏移动客户端
    TK_LOBBYCLT_BOMBERLBYCLT = 10004,  // 炸弹人大厅客户端
};

enum eDicGamePlayerOperator
{
    TK_GAMEPLAYEROPERATORTYPE_NULL = 0,     //
    TK_GAMEPLAYEROPERATORTYPE_PLAYER = 1,   //用户自己操作
    TK_GAMEPLAYEROPERATORTYPE_BOT = 2,      //机器人自己操作
    TK_GAMEPLAYEROPERATORTYPE_BOTTRUST = 3  //用户断线后托管给机器人操作
};

enum eDynLeaveGameReason  //动态离开游戏的原因
{
    TK_DYNLEAVEGAME_REASON_NULL = 0,          //
    TK_DYNLEAVEGAME_REASON_CHANGETABLE = 1,   // 换桌
    TK_DYNLEAVEGAME_REASON_STANDUP = 2,       // 从座位上站起
    TK_DYNLEAVEGAME_REASON_GAME_KICKOUT = 3,  // 游戏中提前淘汰
};

enum eDicStageInheritScoreMode
{
    TK_INHERITSCORE_NULL = 0,              //	(默认)不继承上阶段的nLeaveScore，而是本Stage初始分
    TK_INHERITSCORE_ENTERSCORESQRT = 1,    //	按照上一个Stage积分带分:sqrt(积分)/Dev,MaxLimit
    TK_INHERITSCORE_ENTERORDER = 2,        //	按照上一个Stage排名和带分表来带分(具体赛制实现带分表)
    TK_INHERITSCORE_ENTERSCOREAFFINE = 3,  //	按照上一个stage积分除以一个系数带分:积分/Dev,MaxLimit
    TK_INHERITSCORE_ATTENUATE = 4,         //	上一个stage积分除以上一个stage最终scorebase再乘本stage的scorebase
    TK_INHERITSCORE_ZERO = 5,              //	完成从0分开始
    TK_INHERITSCORE_ENTERSCORE = 6,        //	按照上阶段的nLeaveScore+Stage初始分
    TK_INHERITSCORE_ATTENUATEEX = 7,  //	混战到混战带份：本Stage初始分+（上一个stage积分/上一个stage最终scorebase + 系数dInherirSocerAdd）*本stage的scorebase*dInheritScoreMul

    //其他:继承上阶段的nLeaveScore，加上本Stage初始分
};

enum eDicMs2LsNotifyID  //MS给LS推送通知
{
    TK_MS2LSNOTIFY_TEAM_CREATE = 0,                     // 创建队伍，选择挂牌玩家入队
    TK_MS2LSNOTIFY_TEAM_ALTER_DELETED = 1,              // 修改队伍，未确认玩家被删除
    TK_MS2LSNOTIFY_TEAM_ALTER = 2,                      // 修改队伍，通知所有队员
    TK_MS2LSNOTIFY_TEAM_JOIN = 3,                       // 加入队伍，通知所有队员
    TK_MS2LSNOTIFY_TEAM_LEAVE = 4,                      // 离开队伍, 通知所有队员
    TK_MS2LSNOTIFY_TEAM_DISBAND = 5,                    // 解散队伍, 通知所有队员
    TK_MS2LSNOTIFY_TEAM_CONFIRM = 6,                    //确认队伍完成，通知所有队员
    TK_MS2LSNOTIFY_PROCESS_RESULT = 7,                  //方块大战进度通知
    TK_MS2LSNOTIFY_CROWFUND_UPDATE = 8,                 //更新众筹信息
    TK_MS2LSNOTIFY_CUSTOMIZEDMATCH_SIGNUPRESULT = 100,  // 自建比赛报名结果通知
};

// 游戏角色
enum eDicGameActor
{
    // 斗地主
    TK_GAMEACTOR_LORD_LANDLORD = 0,  // 地主
    TK_GAMEACTOR_LORD_FARMER = 1,    // 农民
    TK_GAMEACTOR_LORD_INVALID = 2,   // 未知

    // 麻将、拖拉机
    TK_GAMEACTOR_UPDGRADE_INVALID = 0,        // 未知
    TK_GAMEACTOR_UPDGRADE_BANKER = 1,         // 庄
    TK_GAMEACTOR_UPDGRADE_BANKERPARTNER = 2,  // 庄搭档
    TK_GAMEACTOR_UPDGRADE_FREER = 3,          // 闲家

    // 德州扑克、金三顺
    TK_GAMEACTOR_POKER_INVALID = 0,     // 未知
    TK_GAMEACTOR_POKER_BANKER = 1,      // 庄
    TK_GAMEACTOR_POKER_BIGBLIND = 2,    // 大盲
    TK_GAMEACTOR_POKER_SMALLBLIND = 3,  // 小盲

    // 斗牛（经典拼十）
    TK_GAMEACTOR_DOUNIU_INVALID = 0,    // 未知
    TK_GAMEACTOR_DOUNIU_BANKER = 1,     // 庄
    TK_GAMEACTOR_DOUNIU_SUPBANKER = 2,  // 超级庄
    TK_GAMEACTOR_DOUNIU_FREER = 3,      // 闲家
};

// 比赛角色
enum eDicMatchActor
{
    TK_MATCHACTOR_INVALID = 0,        // 未知
    TK_MATCHACTOR_COMPETITOR = 1,     // 参赛选手
    TK_MATCHACTOR_ADMINISTRATOR = 2,  // 管理员
};

// 游戏角色级别，格式TK_GAMEROLE_角色_种类_LEVEL_级别
enum GameRoleLevel
{
    TK_GAMEROLE_AI_NORMALAI_LEVEL_0 = 0,    //普通AI级别0
    TK_GAMEROLE_AI_NORMALAI_LEVEL_1 = 1,    //普通AI级别1
    TK_GAMEROLE_AI_NORMALAI_LEVEL_2 = 2,    //普通AI级别2
    TK_GAMEROLE_AI_NORMALAI_LEVEL_3 = 3,    //普通AI级别3
    TK_GAMEROLE_AI_NORMALAI_LEVEL_4 = 4,    //普通AI级别4
    TK_GAMEROLE_AI_NORMALAI_LEVEL_5 = 5,    //普通AI级别5
    TK_GAMEROLE_AI_NORMALAI_LEVEL_6 = 6,    //普通AI级别6
    TK_GAMEROLE_AI_NORMALAI_LEVEL_7 = 7,    //普通AI级别7
    TK_GAMEROLE_AI_NORMALAI_LEVEL_8 = 8,    //普通AI级别8
    TK_GAMEROLE_AI_NORMALAI_LEVEL_9 = 9,    //普通AI级别9
    TK_GAMEROLE_AI_NORMALAI_LEVEL_10 = 10,  //普通AI级别10

    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_1 = 91,    //机器学习AI级别1
    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_2 = 92,    //机器学习AI级别2
    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_3 = 93,    //机器学习AI级别3
    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_4 = 94,    //机器学习AI级别4
    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_5 = 95,    //机器学习AI级别5
    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_6 = 96,    //机器学习AI级别6
    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_7 = 97,    //机器学习AI级别7
    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_8 = 98,    //机器学习AI级别8(AI复式赛在用)
    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_9 = 99,    //机器学习AI级别9
    TK_GAMEROLE_AI_MACHINELEARNAI_LEVEL_10 = 100,  //机器学习AI级别9(斗地主残局在用)

    TK_GAMEROLE_USER_NORMALUSER_LEVEL_BASE = 150,  //普通玩家级别基数
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_1 = 151,     //普通玩家级别1（新用户，麻将在用）
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_2 = 152,     //普通玩家级别2（异常用户，麻将在用）
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_3 = 153,     //普通玩家级别3（正常用户，麻将在用）
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_4 = 154,     //普通玩家级别4
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_5 = 155,     //普通玩家级别5
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_6 = 156,     //普通玩家级别6
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_7 = 157,     //普通玩家级别7
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_8 = 158,     //普通玩家级别8
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_9 = 159,     //普通玩家级别9
    TK_GAMEROLE_USER_NORMALUSER_LEVEL_10 = 160,    //普通玩家级别10

};

//玩家比赛状态，取代TKID_MS2GS_STAGEBOUTRESULT协议xml中的status [12/15/2020 hehuan]
enum ePlayerMatchStatus
{
    player_match_status_unknow = 0,      //未知状态
    player_match_status_matching = 1,    //"比赛中"
    player_match_status_promotion = 2,   //"晋级"
    player_match_status_waitresult = 3,  //"等待"
    player_match_status_out = 4,         //"出局"
    player_match_status_notround = 5,    //"轮空"
    player_match_status_end = 6,         //"结束"
    player_match_status_waitrelive = 7,  //"待复活"
    player_match_status_relived = 8,     //"已复活"
};

/////////////////////////////////////////////////////////////////////////////////////

typedef struct tagMatchIdentify
{
    DWORD dwMPID;
    DWORD dwTourneyID;
    DWORD dwMatchID;
    DWORD dwMatchPoint;
    WORD wGameID;
    WORD wPaddingReserved;
} MATCHIDENTIFY, *PMATCHIDENTIFY;

typedef struct tagMsTourneyPlayAmount
{
    DWORD dwTourneyID;        // Tourney ID
    DWORD dwSignUpAmount;     // 报名人数
    DWORD dwPlayingAmount;    // 当前激战人数
    DWORD dwRunAmount;        // 参赛人数
    DWORD dwSpectatorAmount;  // 旁观人数
    DWORD dwBetUserAmount;    // 竞猜参与人数

} MSTOURNEYPLAYAMOUNT, *PMSTOURNEYPLAYAMOUNT;

// Tourney 游戏人数(Tourney 状态中“人数信息”的扩展)
// 此“人数信息”不进入Tourney观察点，其刷新频率由MatchService控制；
// Add by ouyy 2008.03.06
typedef struct tagLsTourneyPlayAmountEx
{
    DWORD dwTourneyID;      // Tourney ID
    DWORD dwSignUpAmount;   // 报名人数
    DWORD dwPlayingAmount;  // 当前激战人数
    DWORD dwRunAmount;      // 参赛人数
    WORD wReserve1;         // 保留1  旁观人数
    WORD wReserve2;         // 保留2

} LSTOURNEYPLAYAMOUNTEX, *PLSTOURNEYPLAYAMOUNTEX;

// Tourney 报名用户信息
typedef struct tagLsTourneySignUpUser
{
    DWORD dwUserID;                       // 用户ID
    DWORD dwMatchPoint;                   // 开赛点
    char szNickName[TK_BUFLEN_NICKNAME];  // 昵称

} LSTOURNEYSIGNUPUSER, *PLSTOURNEYSIGNUPUSER;

// Tourney 报名用户信息
typedef struct tagMisTourneySignUpUser
{
    DWORD dwUserID;                       // 用户ID
    DWORD dwMatchPoint;                   // 开赛点
    char szNickName[TK_BUFLEN_NICKNAME];  // 昵称
    BOOL bHide;                           // 不在玩家列表里显示

} MISTOURNEYSIGNUPUSER, *PMISTOURNEYSIGNUPUSER;

// 与用户关联的Tourney信息
typedef struct tagLsUserInterfixTourney
{
    DWORD dwTourneyID;
    DWORD dwProductID;  // 产品ID       wuqy add 2014.12.29
    WORD wGameID;       // GameID       wuqy add 2014.12.29
    WORD wFlags;        // 产品属性标记，参见 TKMatchUniversalDicSrv.h 的 eTourneyFlags定义, wuqy add 2014.12.29
} LSUSERINTERFIXTOURNEY, *PLSUSERINTERFIXTOURNEY;

// 与用户关联的下注信息
typedef struct tagLsUserBetInfo
{
    DWORD dwBetID;
    DWORD dwUserID;

    DWORD dwTourneyID;
    DWORD dwMatchPoint;

    DWORD dwSeededPlayerID;  // 种子选手id
    DWORD dwBetMoney;        // 下注金额
    DWORD dwReserve;         // 保留,置0

    DWORD dwBetResult;  // 竞猜结果
} LSUSERBETINFO, *PLSUSERBETINFO;

// 与用户关联的TourneyPoint信息
typedef struct tagLsUserInterfixTourneyPoint
{
    DWORD dwTourneyID;
    DWORD dwMatchPoint;
    DWORD dwProductID;  // 产品ID        wuqy add 2014.12.29
    WORD wGameID;       // GameID        wuqy add 2014.12.29
    WORD wFlags;        // 产品属性标记，参见 TKMatchUniversalDicSrv.h 的 eTourneyFlags定义, wuqy add 2014.12.29
} LSUSERINTERFIXTOURNEYPT, *PLSUSERINTERFIXTOURNEYPT;

//用户报名的比赛
typedef struct tagLsUserSignupTourney
{
    DWORD dwTourneyID;       //
    time_t tMatchStartTime;  //比赛开始时间，为0时表示非定点锦标赛（SNG或岛屿等） wuqy add 2015.3.3
    DWORD dwProductID;       // 产品ID       wuqy add 2014.12.29
    WORD wGameID;            // GameID       wuqy add 2014.12.29
    WORD wFlags;             // 产品属性标记，参见 TKMatchUniversalDicSrv.h 的 eTourneyFlags定义, wuqy add 2014.12.29
} LSUSERSIGNUPTOURNEY, *PLSUSERSIGNUPTOURNEY;

//用户报名的开赛点
typedef struct tagLsUserSignupPoint
{
    DWORD dwTourneyID;   //
    DWORD dwMatchPoint;  //开赛点
    DWORD dwProductID;   // 产品ID       wuqy add 2014.12.29
    WORD wGameID;        // GameID       wuqy add 2014.12.29
    WORD wFlags;         // 产品属性标记，参见 TKMatchUniversalDicSrv.h 的 eTourneyFlags定义, wuqy add 2014.12.29
} LSUSERSIGNUPPOINT, *PLSUSERSIGNUPPOINT;

//用户报名的比赛
typedef struct tagLcUserSignupTourney
{
    DWORD dwTourneyID;       //
    time_t tMatchStartTime;  //比赛开始时间，为0时表示非定点锦标赛（SNG或岛屿等） wuqy add 2015.3.3
    DWORD dwProductID;       // 产品ID       wuqy add 2014.12.29
    WORD wGameID;            // GameID       wuqy add 2014.12.29
    WORD wFlags;             // 产品属性标记，参见 TKMatchUniversalDicSrv.h 的 eTourneyFlags定义, wuqy add 2014.12.29
} LCUSERSIGNUPTOURNEY, *PLCUSERSIGNUPTOURNEY;

//用户报名的开赛点
typedef struct tagLcUserSignupPoint
{
    DWORD dwTourneyID;   //
    DWORD dwMatchPoint;  //开赛点
    DWORD dwProductID;   // 产品ID       wuqy add 2014.12.29
    WORD wGameID;        // GameID       wuqy add 2014.12.29
    WORD wFlags;         // 产品属性标记，参见 TKMatchUniversalDicSrv.h 的 eTourneyFlags定义, wuqy add 2014.12.29
} LCUSERSIGNUPPOINT, *PLCUSERSIGNUPPOINT;

// Stage选手信息
typedef struct tagLsStagePlayer
{
    DWORD dwUserID;                       // UID
    char szNickName[TK_BUFLEN_NICKNAME];  // 昵称
    WORD wOrder;                          // 排名
    WORD wOutRoundState;                  // 出局状态， 参见 eOutRoundState
    DWORD dwMatchScore;                   // 比赛积分(当前比赛的积分)

} LSSTAGEPLAYER, *PLSSTAGEPLAYER;

//====================================================================================================
// Round基本信息
typedef struct tagLsRoundInfo
{
    DWORD dwTourneyID;  // 赛事ID
    DWORD dwMatchID;    // 比赛ID
    WORD wStageID;      // StageID
    WORD wRoundID;      // RoundID
    WORD wPlayerCount;  // 玩家人数

} LSROUNDINFO, *PLSROUNDINFO;

// Round选手信息
typedef struct tagLsRoundPlayer
{
    DWORD dwUserID;                       // 用户ID
    char szNickName[TK_BUFLEN_NICKNAME];  // 玩家昵称
    DWORD dwMatchScore;                   // 比赛积分(当前比赛的积分)

} LSROUNDPLAYER, *PLSROUNDPLAYER;

// Tourne赛桌Player信息
typedef struct tagLsTourneyMatchTablePlayer
{
    DWORD dwMatchTableNo;                 // 赛桌编号
    DWORD dwUserID;                       // 用户ID
    char szNickName[TK_BUFLEN_NICKNAME];  // 玩家昵称
    DWORD dwScore;                        // 积分
} LSTOURNEYMATCHTABLEPLAYER, *PLSTOURNEYMATCHTABLEPLAYER;

//新的Tourney数据结构 wuqy add 2009.6.23
typedef struct tagTkTnyData
{
    DWORD dwTourneyID;  //TourneyID
    DWORD dwProductID;  //ProductID

    time_t tMatchStartTime;  // 比赛开始时间,一定晚于报名开始时间
    WORD wTourneyState;      // Tourney 状态
    WORD wGameID;            // GameID,游戏类别
    BYTE byStartMatchType;   // 比赛开赛类型(参见eTourneyStartMatchType定义)
    BYTE byMatchPointType;   // 开赛点类型(参见eTouryenMatchPointType定义)
    BYTE byBoutNo;           // 场次编号（一般用于联赛第几场的编号）
    BYTE byTeamType;         // 参赛单元类型(参见eTourneyTeamType定义)

    DWORD dwMisIP;  // 赛况服务器IP(=inet_addr("LocalPublicIP"))
    int nMisPort;   // 赛况服务器Port(=20007)
    DWORD dwRisIP;  // 房间服务器IP(=inet_addr("LocalPublicIP"))
    int nRisPort;   // 房间服务器Port(=20012)

} TKTNYDATA, *PTKTNYDATA;

//新的Tourney数据结构
typedef struct tagTkTisTnyData
{
    DWORD dwTourneyID;  //TourneyID
    DWORD dwProductID;  //ProductID

    time_t tMatchStartTime;  // 比赛开始时间,一定晚于报名开始时间
    WORD wTourneyState;      // Tourney 状态
    WORD wGameID;            // GameID,游戏类别
    BYTE byStartMatchType;   // 比赛开赛类型(参见eTourneyStartMatchType定义)
    BYTE byMatchPointType;   // 开赛点类型(参见eTouryenMatchPointType定义)
    BYTE byBoutNo;           // 场次编号（一般用于联赛第几场的编号）
    BYTE byTeamType;         // 参赛单元类型(参见eTourneyTeamType定义)

    DWORD dwMisIP;  // 赛况服务器IP(=inet_addr("LocalPublicIP"))
    int nMisPort;   // 赛况服务器Port(=20007)
    DWORD dwRisIP;  // 房间服务器IP(=inet_addr("LocalPublicIP"))
    int nRisPort;   // 房间服务器Port(=20012)

    int nMsPort;  // 比赛服务器Port

} TKTISTNYDATA, *PTKTISTNYDATA;

//yangcheng add begin 2011-4-29 14:51:28 --------------------------------------------
//队式赛配置信息
#define TK_TEAM_FLAG_CLUB 1     // 是否战队比赛
#define TK_TEAM_FLAG_RANDOM 2   // 是否随机组队
#define TK_TEAM_FLAG_ALLCLUB 4  // 是否只允许战队参赛
typedef struct tagTnyTeamInfo
{
    WORD wTeamType;
    WORD wMemberPerTeam;      // 队员数
    WORD wSubstitutePerTeam;  // 替补数
    BOOL bPushTeamInfo;       // 是否实时推送队员成员变化信息
    DWORD dwTeamFlag;
    tagTnyTeamInfo()
    {
        memset(this, 0, sizeof(tagTnyTeamInfo));
    }
} TKTNYTEAMINFO, *PTKTNYTEAMINFO;
//yangcheng add end   2011-4-29 14:51:28 --------------------------------------------

struct TkTeamMember
{
    DWORD dwSeat;
    DWORD dwUserID;
    char szName[TK_BUFLEN_USERNAME];  // 呢称
};
struct TkTeamReserve
{
    DWORD dwSeat;                     // 位置
    char szName[TK_BUFLEN_USERNAME];  // 呢称
};
struct TkTeamOptionBase
{
    char szTeamName[TK_BUFLEN_USERNAME];     // 队名
    char szCaptainName[TK_BUFLEN_USERNAME];  // 队长
    BOOL bMustFriend;                        // 只允许好友入队
    BOOL bNoSubstitute;                      // 不要替补
    DWORD dwRestrictGrowID;                  // 替补限制
    int nRestrictMin;                        // 最小值
    int nRestrictMax;                        // 最大值
    DWORD dwReservesOffset;                  // 预留位置信息偏移(相对于本结构头部)
    DWORD cnReserves;                        // 预留位置个数
};
struct TkTeamOption : public TkTeamOptionBase
{
    char szOppositeCaptainName[TK_BUFLEN_USERNAME];  // 对方队长名
    BOOL bHideArrangement;                           // 本方阵容是否可见
    DWORD dwSnsDisscussID;                           // 讨论组ID  //yc add 2012-2-9
    DWORD dwOptionFlags;                             // 选项标记()
    SNSIDX stSnsID;                                  // 关系ID
    DWORD dwRestrictGrowID2;                         // 队员限制2	//zl add 2012-05-25
    int nRestrictMin2;                               // 限制最小值2
    DWORD dwTeamID;                                  // TeamID
    DWORD dwReserve1;                                // 预留字段1
    DWORD dwReserve2;                                // 预留字段2
                                                     // 后跟cnReserves个TkTeamReserve
};

//TkTeamOption::dwOptionFlags按位标记定义
#define TK_TEAMOPTION_FLAGS_NEEDCAPTIONCONFIRM 0x00000001    // 加入队伍需要队长确认
#define TK_TEAMOPTION_FLAGS_CAPTION_PAY_ALL_FEES 0x00000002  // 是否队长付费

typedef struct tagTkLsTnyData
{
    DWORD dwTourneyID;      // TourneyID
    BYTE byStartMatchType;  // 比赛开赛类型(参见eTourneyStartMatchType定义)
    BYTE byMatchPointType;  // 开赛点类型(参见eTouryenMatchPointType定义)
    WORD wMsPort;           // 比赛服务端口
    BYTE byTeamType;        // 参赛单元类型(参见eTourneyTeamType定义)
    BYTE byReserve;         //
    WORD wDefaultSignFeeType;
} TKLSTNYDATA, *PTKLSTNYDATA;

//LobbySign的Tourney数据结构 wuqy add 2013.7.8
typedef struct tagTkSignSTnyData
{
    DWORD dwTourneyID;  //TourneyID
    DWORD dwProductID;  //ProductID

    time_t tMatchStartTime;  // 比赛开始时间,一定晚于报名开始时间
    WORD wTourneyState;      // Tourney 状态
    WORD wGameID;            // GameID,游戏类别
    BYTE byStartMatchType;   // 比赛开赛类型(参见eTourneyStartMatchType定义)
    BYTE byMatchPointType;   // 开赛点类型(参见eTouryenMatchPointType定义)
    BYTE byBoutNo;           // 场次编号（一般用于联赛第几场的编号）
    BYTE byTeamType;         // 参赛单元类型(参见eTourneyTeamType定义)
    WORD wMsPort;            // 比赛服务端口
    WORD wDefaultSignFeeType;
    WORD wFlags;            // 产品属性标记，参见 TKMatchUniversalDicSrv.h 的 eTourneyFlags定义, wuqy add 2014.12.29
    DWORD dwMaxSignupTeam;  // 最大参赛单位数（超过则停止报名）

} TKSIGNSTNYDATA, *PTKSIGNSTNYDATA;

typedef struct tagTkSnsTnyData
{
    DWORD dwTourneyID;                              //TourneyID
    DWORD dwProductID;                              //ProductID
    char szTourneyName[TK_BUFLEN_TOURNEYFULLNAME];  // 赛事名称

    time_t tMatchStartTime;  // 比赛开始时间,一定晚于报名开始时间
    WORD wTourneyState;      // Tourney 状态
    WORD wGameID;            // GameID,游戏类别
    BYTE byStartMatchType;   // 比赛开赛类型(参见eTourneyStartMatchType定义)
    BYTE byMatchPointType;   // 开赛点类型(参见eTouryenMatchPointType定义)
    BYTE byBoutNo;           // 场次编号（一般用于联赛第几场的编号）
    BYTE byTeamType;         // 参赛单元类型(参见eTourneyTeamType定义)

    DWORD dwPlayAmount;
    DWORD dwMaxSignupTeam;  // 最大参赛单位数（超过则停止报名）
    DWORD dwMinSignupTeam;  // 最小参赛单位数（不足则取消比赛）

    char szProductURL[TK_BUFLEN_CALLWEBHTTPLINK];

} TKSNSTNYDATA, *PTKSNSTNYDATA;

//新的Tourney状态结构
typedef struct tagTkTnyState
{
    DWORD dwTourneyID;   // Tourney ID
    WORD wTourneyState;  // Tourney 状态
    WORD wFlags;         // 标识，1表示立刻将状态广播给客户端

} TKTNYSTATE, *PTKTNYSTATE;

typedef struct tagTkSnsTnyState
{
    DWORD dwTourneyID;  // Tourney ID
    DWORD dwPlayAmount;
    WORD wTourneyState;  // Tourney 状态
    WORD wReserver;      //保留

} TKSNSTNYSTATE, *PTKSNSTNYSTATE;

//新的Stage状态结构
typedef struct tagTkStageState
{
    DWORD dwTourneyID;  // TourneyID
    DWORD dwMatchID;    // MatchID
    WORD wStageID;      // StageID

    WORD wStageState;   // Stage状态（启动中，进行中，结束，取消）
                        // 参见： 枚举变量 eStageState，启动中/进行中/结束/取消。
    time_t tStartTime;  // 本轮开始时间（后续Stage一般在前一个Stage结束后才能确定，所以需要把这个数据发送下来） wuqy add 2007.11.10
} TKSTAGESTATE, *PTKSTAGESTATE;

//新的Stage数据结构
typedef struct tagTkStageData
{
    WORD wType;                     // 赛制，	淘汰、混战，混战默认为筹码打立出局
    DWORD dwWinnerCount;            // 本轮要选拔出的人数或队数
    TKADDRINFO stGameSrvAddr;       // 运行Stage的游戏服务器地址
    TKADDRINFO stBroadcaseSrvAddr;  // 游戏的转播服务器地址

} TKSTAGEDATA, *PTKSTAGEDATA;

// 新的Tourne开赛点信息
typedef struct tagTkTnyMatchPoint
{
    DWORD dwMatchPoint;     // 开赛点
    DWORD dwMatchID;        // MatchID
    DWORD dwSignUpAmount;   // 报名人数
    DWORD dwPlayingAmount;  // 当前激战人数
    DWORD dwRunAmount;      // 参赛人数
    WORD wState;            // 开赛点状态
    WORD wParam;            // 开赛点参数
} TKTNYMATCHPOINT, *PTKTNYMATCHPOINT;

//新的 Tourne赛桌信息
typedef struct tagTkTnyMatchTable
{
    DWORD dwMatchTableNo;  // 赛桌编号
    DWORD dwMatchID;       // MatchID
    WORD wSignUpAmount;    // 报名人数
    WORD wSitDownAmount;   // 坐下人数
    WORD wMaxAmount;       // 最大参赛人数
    WORD wReserveB;
    WORD wState;                                  // 赛桌状态
    WORD wFlags;                                  // 标记：比如明星桌TABLE_FLAG_STARTABLE
    char szTableName[TK_BUFLEN_MATCHTABLE_NAME];  //赛桌名称
    char szTableNote[TK_BUFLEN_MATCHTABLE_NOTE];  //赛桌说明
    DWORD dwJoinGold;                             // 入场金币数
} TKTNYMATCHTABLE, *PTKTNYMATCHTABLE;

typedef struct tagMSMatchSignupData
{
    DWORD dwTourneyID;  // TourneyID

    char szSignupNoteCondition[TK_BUFLEN_MATCH_SIGNUPNOTE];
    WORD dwGrowConditionCount;  //结构体后缀dwGrowConditionCount个MSMATCHGROWSIGNUPCONDITIONITEM数据
    WORD dwWareConditionCount;  //结构体后缀dwWareConditionCount个MSMATCHWARESIGNUPCONDITIONITEM数据

    int cnSignupItem;  // 后缀cnSignupItem个MSMATCHSIGNUPITEM数据
    int nSignupDataLength;
} MSMATCHSIGNUPDATA, *PMSMATCHSIGNUPDATA;
// 积分条件
typedef struct tagMSMatchGrowSignUpConditionItem
{
    DWORD dwGrowID;
    int nMax;
    int nMin;
} MSMATCHGROWSIGNUPCONDITIONITEM, *PMSMATCHGROWSIGNUPCONDITIONITEM;
// 物品条件
typedef struct tagMSMatchWareSignUpCondition
{
    DWORD dwWareTypeID;
    int nMax;
    int nMin;

} MSMATCHWARESIGNUPCONDITIONITEM, *PMSMATCHWARESIGNUPCONDITIONITEM;
typedef struct tagMSMatchSignupItem
{
    int nSignupType;  // 报名方案号
    char szSignupNote[TK_BUFLEN_MATCH_SIGNUPNOTE];
    DWORD dwCoin;
    DWORD dwBonus;
    DWORD dwGold;
    DWORD dwCert;

    WORD dwGrowGainCount;  //结构体后缀dwGrowGainCount个MSMATCHSIGNUPGROWITEM数据
    WORD dwWareGainCount;  //结构体后缀dwWareGainCount个MSMATCHSIGNUPWAREITEM数据
} MSMATCHSIGNUPITEM, *PMSMATCHSIGNUPITEM;
// 积分
typedef struct tagMSMatchSignUpGrowItem
{
    DWORD dwGrowID;
    int nGrowCount;  // 需要扣除的积分个数

} MSMATCHSIGNUPGROWITEM, *PMSMATCHSIGNUPGROWITEM;
// 物品
typedef struct tagMSMatchSignUpWareItem
{
    DWORD dwWareTypeID;
    int nWareCount;  // 需要扣除的物品个数

} MSMATCHSIGNUPWAREITEM, *PMSMATCHSIGNUPWAREITEM;

//ChatData数据结构：
typedef struct tagMSMatchChatData
{
    DWORD dwTourneyID;                          // TourneyID
    DWORD dwChannelType;                        // 聊天通道的类型
    DWORD dwChannelId;                          // 聊天通道的Id
    char szChannelName[TK_BUFLEN_CHANNELNAME];  // 聊天通道的名字
    char szChatIP[TK_BUFLEN_IP];                //聊天室的IP
    DWORD dwPort;                               //端口
} MSMATCHCHATDATA, *PMSMATCHCHATDATA;

typedef struct tagTKMsMPPos
{
    int nProductID;
    int nGameID;

    DWORD dwTourneyID;
    DWORD dwMatchPoint;
    DWORD dwMatchID;

    time_t timeStart;  //开始时间

    DWORD dwIPMS;  //Public IP
    int nPortMS;   //

    DWORD dwIPGS;  //Public IP
    int nPortGS;   //

    DWORD dwFlags;
} TKMSMATCHPOS, *PTKMSMATCHPOS;

//====================================================================================================
//比赛结果明细相关数据结构，数据由GameService封装，通过MS透传到DS（wuqy add 2007.11.10）
//团体赛结果明细结构头定义
typedef struct tagTKGAMETEAMRESULTDHEADER
{
    DWORD dwTourneyID;
    DWORD dwMatchID;
    WORD wStageID;
    WORD wRoundID;

    WORD wGameNo;  // 第几盘游戏
} TKGAMETEAMRESULTDHEADER, *PTKGAMETEAMRESULTDHEADER;
//团体赛每个Team得分
typedef struct tagTKGAMETEAMRESULTDETAIL
{
    DWORD dwTeamID;
    int nScore;
} TKGAMETEAMRESULTDETAIL, *PTKGAMETEAMRESULTDETAIL;

//个人赛结果明细结构头定义
typedef struct tagTKGAMEPLAYERRESULTDHEADER
{
    DWORD dwTourneyID;
    DWORD dwMatchID;
    WORD wStageID;
    WORD wRoundID;

    WORD wGameNo;
} TKGAMEPLAYERRESULTDHEADER, *PTKGAMEPLAYERRESULTDHEADER;
//个人赛每个Team得分
typedef struct tagTKGAMEPLAYERRESULTDETAIL
{
    WORD wSeatID;
    DWORD dwUserID;
    int nScore;
} TKGAMEPLAYERRESULTDETAIL, *PTKGAMEPLAYERRESULTDETAIL;

//当局结果详细计分
typedef struct tagTKGAMERESULTSPECIAL
{
    DWORD dwTourneyID;
    DWORD dwMatchID;
    WORD wStageID;
    WORD wRoundID;

    WORD wGameNo;
    WORD wGameID;  //游戏的GameID

    char szScoreDetail[TK_MAX_GAMERESULTSCOREDETAIL];  //细节计分串,各自游戏各自解析
} TKGAMERESULTSPECIAL, *PTKGAMERESULTSPECIAL;

//当局棋谱牌谱结构头定义
typedef struct tagTKGAMEDETAILHISTORYHEADER
{
    DWORD dwTourneyID;
    DWORD dwMatchID;
    WORD wStageID;
    WORD wRoundID;

    WORD wGameNo;
    WORD wGameID;
} TKGAMEDETAILHISTORYHEADER, *PTKGAMEDETAILHISTORYHEADER;

//用户名ID和NickName通用结构定义(请不要扩展和更改 wuqy 2009.11.12)
typedef struct tagTKMATCHUSERIDNICK
{
    DWORD dwUserID;                       // 用户ID
    char szNickName[TK_BUFLEN_NICKNAME];  // 玩家昵称
} TKMATCHUSERIDNICK, *PTKMATCHUSERIDNICK;

typedef struct tagTKMATCHACTION
{
    int nID;     // ActionID
    int nDelay;  // 延迟时间(秒)
} TKMATCHACTION, *PTKMATCHACTION;

typedef struct tagTKTNYGAMEVERCONFIG
{
    DWORD dwMinMatchClientVersion;  // 最低比赛客户端版本号
    DWORD dwMinMatchClientVersionIni;

    DWORD dwMinLobbyVersion;  // 最低大厅版本号
    DWORD dwMinLobbyVersionIni;

    DWORD dwMinGameDllVersion;  // 最低游戏动态库版本号
    DWORD dwMinGameDllVersionIni;
} TKTNYGAMEVERCONFIG, *PTKTNYGAMEVERCONFIG;

//用户信息动态字段定义
typedef struct tagTKPLAYERDYNFIELDDEFINE
{
    DWORD dwFieldID;                                 // 动态字段编号
    char szFieldName[TK_BUFLEN_PLAYERDYNFIELDNAME];  // 动态字段显示名称
    DWORD dwGrowID;                                  // 动态字段数值定义ID
    BYTE byDataType;                                 // 动态字段数据类型
    BYTE byDateLen;                                  // 动态字段数据长度
    WORD wFlags;                                     // 动态字段数据标志信息

} TKPLAYERDYNFIELDDEFINE, *PTKPLAYERDYNFIELDDEFINE;

/*=======================UserMatchInfoeServer 数据 Star=============================*/

// 比赛信息定义
typedef struct tagTKMatchInfo
{
    char szMatchName[TK_BUFLEN_TOURNEYSIMPLENAME];  // 比赛名称
    DWORD dwMPID;                                   // 产品ID
    DWORD dwTourneyID;                              // Tourney ID
    DWORD dwMatchID;                                // 比赛ID
    DWORD dwGameID;                                 // 游戏ID
    DWORD dwMatchTime;                              // 比赛时间

    DWORD dwMisIP;    // 赛况服务的IP地址
    DWORD dwMisPort;  // 赛况服务的端口号

    DWORD dwReserve1;  // 预留
    DWORD dwReserve2;  // 预留
} TKMATCHINFO, *PTKMATCHINFO;

/*=======================UserMatchInfoeServer 数据 End==============================*/

/*=======================BroadInfoServer数据  Star==================================*/

// 转播状态
enum eBroadCastState
{
    BROADCASTSIGNUPING = 1,   // 预告报名中
    BROADCASTSTARTUPING = 2,  // 启动中
    BROADCASTPROGRESS = 3,    // 正在转播中
    BROADCASTSTOP = 4,        // 比赛回顾
    BROADCASTCANCEL = 5       // 取消
};

// 转播列表中游戏人数
// 其刷新频率由MatchService控制；
typedef struct tagLsBroadCastAmount
{
    DWORD dwTourneyID;        // Tourney ID
    DWORD dwSignUpAmount;     // 报名人数
    DWORD dwPlayingAmount;    // 当前激战人数
    DWORD dwRunAmount;        // 参赛人数
    DWORD dwSpectatorAmount;  // 旁观人数
    DWORD dwBetUserAmount;    // 竞猜参与人数

} LSBROADCASTAMOUNT, *PLSBROADCASTAMOUNT;

//转播列表中比赛数据
typedef struct tagTkBroadCastData
{
    DWORD dwTourneyID;  //TourneyID
    DWORD dwProductID;  //ProductID

    time_t tMatchStartTime;  // 比赛开始时间,一定晚于报名开始时间
    WORD wBroadState;        // 转播状态
    WORD wBetState;          //竞猜状态（参见eBRDISBetStateControlType定义）
    WORD wGameID;            // GameID,游戏类别
    BYTE byStartMatchType;   // 比赛开赛类型(参见eTourneyStartMatchType定义)
    BYTE byMatchPointType;   // 开赛点类型(参见eTouryenMatchPointType定义)
    BYTE byBoutNo;           // 场次编号（一般用于联赛第几场的编号）
    BYTE byTeamType;         // 参赛单元类型(参见eTourneyTeamType定义)

    DWORD dwMisIP;  // 赛况服务器IP
    int nMisPort;   // 赛况服务器

} TKBROADCASTDATA, *PTKBROADCASTDATA;

//转播列表中单个比赛的转播状态
typedef struct tagTkBroadCastState
{
    DWORD dwTourneyID;     // Tourney ID
    WORD wBroadCastState;  // 转播状态
    WORD wBetState;        // 竞猜状态
    WORD wFlags;           // 标识，1表示立刻将状态广播给客户端

} TKBROADCASTSTATE, *PTKBROADCASTSTATE;

// 新的转播比赛开赛点信息
typedef struct tagTkBroadCastMatchPoint
{
    DWORD dwMatchPoint;       // 开赛点
    DWORD dwMatchID;          // MatchID
    DWORD dwSignUpAmount;     // 报名人数
    DWORD dwPlayingAmount;    // 当前激战人数
    DWORD dwRunAmount;        // 参赛人数
    DWORD dwSpectatorAmount;  // 旁观人数
    DWORD dwBetUserAmount;    // 竞猜参与人数
    WORD wState;              // 开赛点状态
    WORD wBetState;           // 竞猜状态
    WORD wParam;              // 开赛点参数
} TKBROADCASTMATCHPOINT, *PTKBROADCASTMATCHPOINT;

// 业务扣费单元
typedef struct tagTKCostUnit
{
    DWORD dwDCID;     // 数据类型，如1-Money,2-Ware,3-Grow，具体参见:eDicTKSTGDCDef，TKSTBillUniversalDic.h
    DWORD dwAccType;  // 目前只有Money在用，如0-默认账户，10-保险箱，100-幸运卡，1000-公社基金，具体参见：eDicMynsAccNumType，TKMoneyUniversalDicSrv.h
    DWORD dwDTID;     // 数据子类型
    DWORD dwDValue;   // 数值

    DWORD dwReserve1;  // 保留字段1
    DWORD dwReserve2;  // 保留字段2
} TK_COSTUNIT, *PTK_COSTUNIT;

// 业务扣费方案
typedef struct tagTKCostPlan
{
    // 扣费业务相关数据类型，在此扩展
#if _MSC_VER >= 1600
    enum DataType : DWORD
#else
    enum DataType
#endif
    {
        ENUM_RELIFE_MAX_RANK = 1,
    };

    DWORD dwCostPlanID;  // 扣费方案ID
    DWORD dwScore;       // 购买后的积分
    DWORD dwRank;        // 购买后的排名, 0表示名次无效

    DWORD dwReliveBout;  // 0：晋级下一轮；1：本轮次复活
    DWORD dwDataType;    // 扣费业务相关数据类型
    DWORD dwDataValue;   // 扣费业务相关数据值
    DWORD dwReserve4;    // 保留字段

    DWORD dwUnitCount;  // 扣费单元个数
    TKSUFFIXIDX sufData;
} TK_COSTPLAN, *PTK_COSTPLAN;
// 后缀数据 dwUnitCount个TK_COSTUNIT

// 业务扣费结果
enum eDicTypeTKPaymentResult
{
    TK_PAYMENT_RESULT_SUCCESS = 0,  // 成功
    TK_PAYMENT_RESULT_FAILED = 1,   // 失败

    TK_PAYMENT_RESULT_MONEY_SRCLACK = 100,  // 货币不足（除了金币，奖券，代金券以外的问题）
    TK_PAYMENT_RESULT_GOLD_SRCLACK = 101,   // 金币不足
    TK_PAYMENT_RESULT_BONUS_SRCLACK = 102,  // 奖券不足
    TK_PAYMENT_RESULT_CERT_SRCLACK = 103,   // 代金券（门票）不足
    TK_PAYMENT_RESULT_WARE_SRCLACK = 104,   // 物品不足
    TK_PAYMENT_RESULT_GROW_SRCLACK = 105,   // 积分不足
    TK_PAYMENT_RESULT_NOT_SUPPORT = 200,    // 不支持此类扣费业务
    TK_PAYMENT_RESULT_RESTRICT = 1000,      // 用户被限制操作,高危用户级别限制产生时给MatchSrv的返回值
};

/*=======================BroadInfoServer数据  end==================================*/

//动态字段数据类型
#define TK_PLAYERDYNFIELD_DATATYPE_CHAR 1          //字符
#define TK_PLAYERDYNFIELD_DATATYPE_BYTE 2          //
#define TK_PLAYERDYNFIELD_DATATYPE_SHORT 3         //
#define TK_PLAYERDYNFIELD_DATATYPE_WORD 4          //
#define TK_PLAYERDYNFIELD_DATATYPE_LONG 5          //
#define TK_PLAYERDYNFIELD_DATATYPE_DWORD 6         //
#define TK_PLAYERDYNFIELD_DATATYPE_FLOAT 7         //浮点数，4个字节
#define TK_PLAYERDYNFIELD_DATATYPE_STRING 8        //字符串，byDateLen包含结束符'\0'
#define TK_PLAYERDYNFIELD_DATATYPE_PERCENT 9       //百分数，用4字节int表示，显示时用数值 /1000加上符号"%"
#define TK_PLAYERDYNFIELD_DATATYPE_FLOAT10 10      //浮点数，4个字节(/10)
#define TK_PLAYERDYNFIELD_DATATYPE_FLOAT100 11     //浮点数，4个字节(/100)
#define TK_PLAYERDYNFIELD_DATATYPE_FLOAT1000 12    //浮点数，4个字节(/1000)
#define TK_PLAYERDYNFIELD_DATATYPE_FLOAT10000 13   //浮点数，4个字节(/10000)
#define TK_PLAYERDYNFIELD_DATATYPE_FLOAT100000 14  //浮点数，4个字节(/100000)

//动态字段数据标志信息定义
#define TK_PLAYERDYNFIELD_FLAG_HIDE 0x1000        // 该字段不显示
#define TK_PLAYERDYNFIELD_FLAG_VALUE 0x0001       // 直接按照数据类型显示数值
#define TK_PLAYERDYNFIELD_FLAG_CONVERTSTR 0x0002  // 将dwGrowID和数值传递给大厅转换成字符串显示
#define TK_PLAYERDYNFIELD_FLAG_MATCHDATA 0x0004   // dwGrowID标识的是比赛数据

//比赛数据定义
#define TK_MATCHDATA_TYPE_SCORE 1  // 比赛积分
#define TK_MATCHDATA_TYPE_BLOOD 2  // 生命值
#define TK_MATCHDATA_TYPE_CHIP 3   // 筹码

//比赛用户跟踪标志
#define TK_MATCHTRACE_FLAGS_OPPINFO 0x00000001  // 需要跟踪两人对局信息
#define TK_MATCHTRACE_FLAGS_HDUGROW 0x00000002  // 高危用户，需要保护
#define TK_MATCHTRACE_FLAGS_MOBBIND 0x00000004  // 安保手机用户
#define TK_MATCHTRACE_FLAGS_SBIE 0x80000000     //
#define TK_MATCHTRACE_FLAGS_VMWARE 0x40000000   //
#define TK_MATCHTRACE_FLAGS_VPC 0x20000000      //
#define TK_MATCHTRACE_FLAGS_VBOX 0x10000000     //
#define TK_MATCHTRACE_FLAGS_QMDLL 0x08000000    //
#define TK_MATCHTRACE_FLAGS_CHEATPC 0x04000000  //
#define TK_MATCHTRACE_FLAGS_OFFLINE 0x02000000  // 游戏时大厅离线
#define TK_MATCHTRACE_FLAGS_WT 0x01000000       //

//一手HandGame的结束类型定义
#define TK_GAMEOVERTYPE_NOTALLARRIVED 1  // 没有到齐
#define TK_GAMEOVERTYPE_EXITDIR 2        // 开赛时直接退出（移动端）
#define TK_GAMEOVERTYPE_ENTEROVERTIME 3  // 进入比赛超时
#define TK_GAMEOVERTYPE_NORNAL 11        // HandGame正常结束
#define TK_GAMEOVERTYPE_ALLBREAK 12      // 所有人断线
#define TK_GAMEOVERTYPE_ALLTRUSTPLAY 13  // 所以人托管
#define TK_GAMEOVERTYPE_FORCEREGROUP 21  // 游戏时间太长或捕鱼“霸桌”，MatchSrv要求强制结束进行重组
#define TK_GAMEOVERTYPE_FDTABLE_END 22   // 好友房 游戏特殊规则导致房间结束

//一手HandGame的结束标志信息
#define TK_GAMEOVERFLAG_NULL 0
#define TK_GAMEOVERFLAG_ONLYDECPLAYER 0x0001  //仅仅减少当前桌个别选手，剩余选手当前桌继续
#define TK_GAMEOVERFLAG_FAIL_GETCARDS 0x0002  //1V1取牌超时

// match action定义
#define TK_MATCH_ACTION_PEAKTABLE 2  // 执行巅峰对局动画
// 后缀数据 : <action id=2 delay=%d></action>
#define TK_MATCH_ACTION_RANDOMAWARD 3  // 执行随机颁奖方案动画
// 后缀数据 : <action id=3 delay=6 SchemeID=%d></action> delay=6为大奖， delay=4为小奖
#define TK_MATCH_ACTION_WHEELTABLE 4  // 执行轮盘局动画
// 后缀数据 : <action id=4 delay=6 SchemeID=%d></action>
#define TK_MATCH_ACTION_MATCH_START 5  // 执行比赛开始动画
// 后缀数据 : <action id=5 delay=2></action>
#define TK_MATCH_ACTION_BOUT_START 6  // 执行轮开始动画
// 后缀数据 : <action id=6 delay=2 promote_count=%d game_count=%d is_final_stage=1/0 stage_type=%d></action>
#define TK_MATCH_ACTION_BOUT_RESULT 7  // 执行轮结果动画
// 后缀数据 : <action id=7 delay=2 status=晋级/淘汰/等待/冠军/亚军/季军/第%d名 rank=%d player_count=%d></action>
#define TK_MATCH_ACTION_FINAL_TABLE 8  // 执行冠军决胜动画
// 后缀数据 : <action id=8 delay=2 game_count=%d></action>
#define TK_MATCH_ACTION_BREAKHEART_CHGHEART 9  // 执行碎心动画/加心动画
// 后缀数据 : <action id=9 delay=4 FromHeartCount=%d ToHeartCount=%d></action>
#define TK_MATCH_ACTION_BREAKHEART_CHGSCORE 10  // 执行加分动画/减分动画
// 后缀数据 : <action id=10 delay=4 FromMatchScore=%d ToMatchScore=%d></action>
#define TK_MATCH_ACTION_DELAY_READY 11  // 执行初始心动画
// 后缀数据 : <action id=11 delay=3></action>
#define TK_MATCH_ACTION_HANDWIN 12  // 执行赢牌奖励动画
// 后缀数据 : <action id=12 delay=\"1\" SubType=\"%d\" Param=\"%d\" DataClass=\"%d\" DataID=\"%d\" amount=\"%d\" measure= \"%s\" name=\"%s\" Winner=\"%u\" Note=\"赢牌获得%d%s%s\" />
#define TK_MATCH_ACTION_WAIT_TIMEOUT_PAYMENT 13  // 执行结果班车晋级等待超时奖励动画
// 后缀数据 : <action id=13 delay=\"2\" timeout=\"%d\" payement=\"%d\" note=\"晋级等待超时获得%d个金币\"/>
#define TK_MATCH_ACTION_MATCH_ARCHIVE 14  // 执行结果班车存档成功动画
// 后缀数据 : <action id=14 delay=\"2\" rank=%d player_count=%d win_award=%d timeout_payment=%d keep_days=%d />
#define TK_MATCH_ACTION_WAIT_TIME 15  // 执行结果班车晋级等待计时开始动画
// 后缀数据 : <action id=15 delay=\"2\" rank=%d player_count=%d win_award=%d timeout_payment=%d keep_days=%d />
#define TK_MATCH_ACTION_1V1_MATCH 16  // 执行1v1复式赛播放动画
// 后缀数据 : <action id=16 delay=\"2\" rank=%d player_count=%d win_award=%d timeout_payment=%d keep_days=%d />
#define TK_MATCH_ACTION_PLAYER_HUNTCOUT 17  // 猎神赛玩家猎杀人数
// 后缀数据 : <action id=17 delay=\"2\" use_id0=%d hunt_count0=%d user_id1=%d hunt_count1=%d user_id2=%d hunt_count2=%d user_id3=%d hunt_count3=%d />
#define TK_MATCH_ACTION_IN_SUPERBANKER 18  // 超级庄家 上庄
// 后缀数据 : <action id=18 delay=4 reason=%d note=%s></action>
#define TK_MATCH_ACTION_OUT_SUPERBANKER 19  // 超级庄家 下庄
// 后缀数据 : <action id=19 delay=4 reason=%d note=%s></action>
#define TK_MATCH_ACTION_PLAYER_SCORE 20  // 飘分动画
// 后缀数据 : <action id=\"20\" delay=\"2\">
// <Item ID=\"%d\" score=\"%d\" SectionScore=\"%d\" userID=\"%d\" UserName=\"%s\"/>
// <Item ID=\"%d\" score=\"%d\" SectionScore=\"%d\" userID=\"%d\" UserName=\"%s\"/>
// <Item ID=\"%d\" score=\"%d\" SectionScore=\"%d\" userID=\"%d\" UserName=\"%s\"/>
// </action>

#define TK_MATCH_ACTION_TEAM_WAIT_TIME 21  // 团体赛：执行晋级等待动画
// 后缀数据 : <action id=\"21\" delay=\"2\" TID=\"%d\" TName=\"%d\" TScore=\"%s\" TThirdScore=\"%d\" TRScore=\"%d\" TRSecondScore=\"%d\" matchstate=\"%d\" matchstatevalid=\"%d\" rank=\"%d\" winner=\"%d\" >
// <Item ID=\"%d\" name=\"%s\" roundscore=\"%d\" roundsecscore=\"%d\" score=\"%d\" secscore=\"%d\" sectionscore=\"%d\" inround=\"%d\">
// <Item ID=\"%d\" name=\"%s\" roundscore=\"%d\" roundsecscore=\"%d\" score=\"%d\" secscore=\"%d\" sectionscore=\"%d\" inround=\"%d\">
//  ...
// </action>

#define TK_MATCH_ACTION_PROCESSAWARD 22  // 过程奖励数据
// 后缀数据 :
//<action id=\"22\" delay=\"2\" use_id=\"%d\">
//	<ProcessAwardResult UserID=\"%d\" GameID=\"%d\" MPID=\"%d\" TourneyID=\"%d\" MatchID=\"%d\">
//		<Biz ID=\"%d\" Multiple=\"%d\" CurrentCount=\"%d\" LimitCount=\"%d\">
//			<W ID=\"%d\" V=\"%d\" />
//		</Biz>
//	</ProcessAwardResult>
//</action>

#define TK_MATCH_ACTION_PLAYER_RELIVEINFO 23  // 本轮次玩家复活后通知玩家排名、分数信息
// 后缀数据 : <action id=\"23\" delay=\"2\" userid=\"%d\" rank=\"%d\" score=\"%d\" />

#define TK_MATCH_ACTION_CHALLENGEINFO 24  // 挑战赛累胜累负通知
// 后缀数据 :
//<action id=\"%d\"  Result=\"%d\" OutResult=\"%d\" FromWinCount=\"%d\" FromFailCount=\"%d\" ToWinCount=\"%d\" ToFailCount=\"%d\"></action>
// 上下庄失败原因

#define TK_MATCH_ACTION_PLAYER_CV 25  // 当桌玩家连胜数据
// 后缀数据 : <action id=25 delay=\"2\" uid0=%u cv0=%d uid1=%u cv1=%d uid2=%u cv2=%d uid3=%u cv3=%d />

#define TK_MATCH_ACTION_DOUBLEPLAYER_MATCH_START 26  // 双人组队比赛开始
// 后缀数据 : <action id=26 delay=2 uid=%u, name=%s formid=%u figid=%u memuid=%u memname=%s memformid=%u memfigid=%u memorder=\"%d\" curboutcount=\"%d\"/>

#define TK_MATCH_ACTION_DOUBLEPLAYER_MATCHOUT 27  // 双人组队队友淘汰动画
// 后缀数据 : <action id=27 delay=2 memuid=%u, memname=%s memorder=%u />

#define TK_MATCH_ACTION_DOUBLEPLAYER_PROMOTION 28  // 双人组队队友晋级动画
// 后缀数据 : <action id=28 delay=2 memuid=%u, memname=%s memorder=%u curboutcount=%u />

#define TK_MATCH_ACTION_DOUBLEPLAYER_FINAL_TABLE 29  // 双人组队队友决赛桌提示
// 后缀数据 : <action id=29 delay=2 memuid=%u, memname=%s memorder=%u matchname=%s />

#define TK_MATCH_ACTION_DOUBLEPLAYER_TEAMINFO 30  // 双人组队队伍信息数据
// 后缀数据 : <action id=30 delay=2 uid=%u, name=%s formid=%u figid=%u memuid=%u memname=%s memformid=%u memfigid=%u memgsip=%u memgsport=%u membsip=%u membsport=%u enablewatch=%u/>

#define TK_MATCH_ACTION_PLAYER_DIFF_SCORE 31  //轮间玩家积分差
// 后缀数据 : <action id=\"31\" diffscore = %u >
// <Item uid = %u name = %s formid = %s figid = %u/>
// </action>

enum eDicBankerOverReason
{
    TK_BANKER_OVER_NULL = 0,  // 未知状态：对象构造时的状态

    TK_BANKER_BANKER_PLAYING = 1,  // 已经有超级庄在游戏中，只能排队等待
    TK_BANKER_GOLD_NOTENOUGH = 2,  // 金币不足
    TK_BANKER_CHIPLOWERLIMIT = 3,  // 筹码低于下限
    TK_BANKER_BREAKONLINE = 4,     // 玩家断线
    TK_BANKER_LEAVE = 5,           // 玩家离开
    TK_BANKER_STANDUP = 6,         // 玩家站起
    TK_BANKER_TIMEOUT = 7,         // 超级庄游戏时间结束
    TK_BANKER_CANCEL = 8,          // 玩家主动下庄
};

//猎杀数据信息 10x10BYTE poker minipoker ThreeCard
typedef struct tagTKHUNTER_B10X10
{
    tagTKHUNTER_B10X10()
    {
        memset(byaQuarry, 0, sizeof(byaQuarry));
    }

    BYTE byaQuarry[10][10];  //10nSeatHunter x 10nSeatHunted, >0有猎杀
} TKHUNTER_B10X10, *PTKHUNTER_B10X10;

//猎杀数据信息 10x3INT Lord Mahjong
typedef struct tagTKHUNTER_I10X3
{
    tagTKHUNTER_I10X3()
    {
        for (int i = 0; i < 10; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                liParam[i][j] = -1;
            }
        }
    }

    int liParam[10][3];  //10x(nSeatHunter, nSeatHunted, nHuntRate), -1无效
} TKHUNTER_I10X3, *PTKHUNTER_I10X3;

#define TK_GAME_RULER_AWARD_HUNTER 1000        // 猎人奖励(10x3INT Lord Mahjong)
#define TK_GAME_RULER_AWARD_POKER_HUNTER 1001  // 德州类猎人奖励(10x10BYTE poker minipoker ThreeCard)
#define TK_GAME_RULER_AWARD_WARE 1002          // 物品奖励(2INT WareID,Amount FryUpgrade炒底奖励)
#define TK_GAME_RULER_AWARD_BREAKHEART 1003    // 碎心奖励
#define TK_GAME_RULER_AWARD_HANDWIN 1004       // 赢牌奖励 wuqy add 2016.11.10
