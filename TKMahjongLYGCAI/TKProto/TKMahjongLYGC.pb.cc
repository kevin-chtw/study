// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TKMahjongLYGC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cn {
namespace jj {
namespace service {
namespace msg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TKMobileReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMobileReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMobileAckMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMobileAckMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahJongLYGCReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahJongLYGCReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MahJongLYGCAckMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MahJongLYGCAckMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahjongFanCiAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahjongFanCiAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TKMahjongLYGC_2eproto() {
  protobuf_AddDesc_TKMahjongLYGC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TKMahjongLYGC.proto");
  GOOGLE_CHECK(file != NULL);
  TKMobileReqMsg_descriptor_ = file->message_type(0);
  static const int TKMobileReqMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileReqMsg, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileReqMsg, mahjonglygc_req_msg_),
  };
  TKMobileReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMobileReqMsg_descriptor_,
      TKMobileReqMsg::default_instance_,
      TKMobileReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMobileReqMsg));
  TKMobileAckMsg_descriptor_ = file->message_type(1);
  static const int TKMobileAckMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileAckMsg, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileAckMsg, mahjonglygc_ack_msg_),
  };
  TKMobileAckMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMobileAckMsg_descriptor_,
      TKMobileAckMsg::default_instance_,
      TKMobileAckMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileAckMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileAckMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMobileAckMsg));
  MahJongLYGCReqMsg_descriptor_ = file->message_type(2);
  static const int MahJongLYGCReqMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCReqMsg, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCReqMsg, tkmahjongrequst_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCReqMsg, tkmahjongtrustplay_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCReqMsg, tkmahjongdissolution_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCReqMsg, tkmahjongendanimal_req_msg_),
  };
  MahJongLYGCReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MahJongLYGCReqMsg_descriptor_,
      MahJongLYGCReqMsg::default_instance_,
      MahJongLYGCReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MahJongLYGCReqMsg));
  MahJongLYGCAckMsg_descriptor_ = file->message_type(3);
  static const int MahJongLYGCAckMsg_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjonggamebegin_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongplace_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongopendoor_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongaction_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongpeng_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjonggang_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongwin_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongdiscardtile_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongdrawtile_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongtrustplay_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongscorechange_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongresult_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongmessage_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongdissolution_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongcalldata_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongbeginanimal_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjonghandtiles_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjonggenzhuang_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongfanci_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, tkmahjongdebuglog_ack_msg_),
  };
  MahJongLYGCAckMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MahJongLYGCAckMsg_descriptor_,
      MahJongLYGCAckMsg::default_instance_,
      MahJongLYGCAckMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahJongLYGCAckMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MahJongLYGCAckMsg));
  TKMahjongFanCiAck_descriptor_ = file->message_type(4);
  static const int TKMahjongFanCiAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongFanCiAck, tile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongFanCiAck, calldata_),
  };
  TKMahjongFanCiAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahjongFanCiAck_descriptor_,
      TKMahjongFanCiAck::default_instance_,
      TKMahjongFanCiAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongFanCiAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongFanCiAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahjongFanCiAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TKMahjongLYGC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMobileReqMsg_descriptor_, &TKMobileReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMobileAckMsg_descriptor_, &TKMobileAckMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahJongLYGCReqMsg_descriptor_, &MahJongLYGCReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahJongLYGCAckMsg_descriptor_, &MahJongLYGCAckMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahjongFanCiAck_descriptor_, &TKMahjongFanCiAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TKMahjongLYGC_2eproto() {
  delete TKMobileReqMsg::default_instance_;
  delete TKMobileReqMsg_reflection_;
  delete TKMobileAckMsg::default_instance_;
  delete TKMobileAckMsg_reflection_;
  delete MahJongLYGCReqMsg::default_instance_;
  delete MahJongLYGCReqMsg_reflection_;
  delete MahJongLYGCAckMsg::default_instance_;
  delete MahJongLYGCAckMsg_reflection_;
  delete TKMahjongFanCiAck::default_instance_;
  delete TKMahjongFanCiAck_reflection_;
}

void protobuf_AddDesc_TKMahjongLYGC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cn::jj::service::msg::protocol::protobuf_AddDesc_TKMJStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023TKMahjongLYGC.proto\022\032cn.jj.service.msg"
    ".protocol\032\020TKMJStruct.proto\"l\n\016TKMobileR"
    "eqMsg\022\r\n\005param\030\001 \001(\005\022K\n\023mahjonglygc_req_"
    "msg\030\243\001 \001(\0132-.cn.jj.service.msg.protocol."
    "MahJongLYGCReqMsg\"l\n\016TKMobileAckMsg\022\r\n\005p"
    "aram\030\001 \001(\005\022K\n\023mahjonglygc_ack_msg\030\243\001 \001(\013"
    "2-.cn.jj.service.msg.protocol.MahJongLYG"
    "CAckMsg\"\377\002\n\021MahJongLYGCReqMsg\022\017\n\007matchid"
    "\030\001 \002(\005\022P\n\027tkmahjongrequst_req_msg\030e \001(\0132"
    "/.cn.jj.service.msg.protocol.TKMahJongRe"
    "questReq\022U\n\032tkmahjongtrustplay_req_msg\030g"
    " \001(\01321.cn.jj.service.msg.protocol.TKMahJ"
    "ongTrustPlayReq\022Y\n\034tkmahjongdissolution_"
    "req_msg\030h \001(\01323.cn.jj.service.msg.protoc"
    "ol.TKMahJongDissolutionReq\022U\n\032tkmahjonge"
    "ndanimal_req_msg\030i \001(\01321.cn.jj.service.m"
    "sg.protocol.TKMahjongEndAnimalReq\"\271\r\n\021Ma"
    "hJongLYGCAckMsg\022\017\n\007matchid\030\001 \002(\005\022U\n\032tkma"
    "hjonggamebegin_ack_msg\030d \001(\01321.cn.jj.ser"
    "vice.msg.protocol.TKMahJongGameBeginAck\022"
    "M\n\026tkmahjongplace_ack_msg\030e \001(\0132-.cn.jj."
    "service.msg.protocol.TKMahJongPlaceAck\022S"
    "\n\031tkmahjongopendoor_ack_msg\030g \001(\01320.cn.j"
    "j.service.msg.protocol.TKMahJongOpenDoor"
    "Ack\022O\n\027tkmahjongaction_ack_msg\030h \001(\0132..c"
    "n.jj.service.msg.protocol.TKMahJongActio"
    "nAck\022K\n\025tkmahjongpeng_ack_msg\030i \001(\0132,.cn"
    ".jj.service.msg.protocol.TKMahJongPengAc"
    "k\022K\n\025tkmahjonggang_ack_msg\030j \001(\0132,.cn.jj"
    ".service.msg.protocol.TKMahJongGangAck\022I"
    "\n\024tkmahjongwin_ack_msg\030m \001(\0132+.cn.jj.ser"
    "vice.msg.protocol.TKMahJongWinAck\022Y\n\034tkm"
    "ahjongdiscardtile_ack_msg\030n \001(\01323.cn.jj."
    "service.msg.protocol.TKMahJongDiscardTil"
    "eAck\022S\n\031tkmahjongdrawtile_ack_msg\030o \001(\0132"
    "0.cn.jj.service.msg.protocol.TKMahJongDr"
    "awTileAck\022U\n\032tkmahjongtrustplay_ack_msg\030"
    "p \001(\01321.cn.jj.service.msg.protocol.TKMah"
    "JongTrustPlayAck\022Y\n\034tkmahjongscorechange"
    "_ack_msg\030q \001(\01323.cn.jj.service.msg.proto"
    "col.TKMahJongScoreChangeAck\022O\n\027tkmahjong"
    "result_ack_msg\030r \001(\0132..cn.jj.service.msg"
    ".protocol.TKMahJongResultAck\022Q\n\030tkmahjon"
    "gmessage_ack_msg\030u \001(\0132/.cn.jj.service.m"
    "sg.protocol.TKMahJongMessageAck\022Y\n\034tkmah"
    "jongdissolution_ack_msg\030v \001(\01323.cn.jj.se"
    "rvice.msg.protocol.TKMahJongDissolutionA"
    "ck\022S\n\031tkmahjongcalldata_ack_msg\030w \001(\01320."
    "cn.jj.service.msg.protocol.TKMahjongCall"
    "DataAck\022Y\n\034tkmahjongbeginanimal_ack_msg\030"
    "x \001(\01323.cn.jj.service.msg.protocol.TKMah"
    "jongBeginAnimalAck\022U\n\032tkmahjonghandtiles"
    "_ack_msg\030y \001(\01321.cn.jj.service.msg.proto"
    "col.TKMahjongHandTilesAck\022U\n\032tkmahjongge"
    "nzhuang_ack_msg\030z \001(\01321.cn.jj.service.ms"
    "g.protocol.TKMahjongGenZhuangAck\022M\n\026tkma"
    "hjongfanci_ack_msg\030{ \001(\0132-.cn.jj.service"
    ".msg.protocol.TKMahjongFanCiAck\022T\n\031tkmah"
    "jongdebuglog_ack_msg\030\200\004 \001(\01320.cn.jj.serv"
    "ice.msg.protocol.TKMahJongDebugLogAck\"b\n"
    "\021TKMahjongFanCiAck\022\014\n\004tile\030\001 \001(\005\022\?\n\010call"
    "data\030\002 \003(\0132-.cn.jj.service.msg.protocol."
    "TKMahJongCallData", 2497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TKMahjongLYGC.proto", &protobuf_RegisterTypes);
  TKMobileReqMsg::default_instance_ = new TKMobileReqMsg();
  TKMobileAckMsg::default_instance_ = new TKMobileAckMsg();
  MahJongLYGCReqMsg::default_instance_ = new MahJongLYGCReqMsg();
  MahJongLYGCAckMsg::default_instance_ = new MahJongLYGCAckMsg();
  TKMahjongFanCiAck::default_instance_ = new TKMahjongFanCiAck();
  TKMobileReqMsg::default_instance_->InitAsDefaultInstance();
  TKMobileAckMsg::default_instance_->InitAsDefaultInstance();
  MahJongLYGCReqMsg::default_instance_->InitAsDefaultInstance();
  MahJongLYGCAckMsg::default_instance_->InitAsDefaultInstance();
  TKMahjongFanCiAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TKMahjongLYGC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TKMahjongLYGC_2eproto {
  StaticDescriptorInitializer_TKMahjongLYGC_2eproto() {
    protobuf_AddDesc_TKMahjongLYGC_2eproto();
  }
} static_descriptor_initializer_TKMahjongLYGC_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TKMobileReqMsg::kParamFieldNumber;
const int TKMobileReqMsg::kMahjonglygcReqMsgFieldNumber;
#endif  // !_MSC_VER

TKMobileReqMsg::TKMobileReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMobileReqMsg::InitAsDefaultInstance() {
  mahjonglygc_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg*>(&::cn::jj::service::msg::protocol::MahJongLYGCReqMsg::default_instance());
}

TKMobileReqMsg::TKMobileReqMsg(const TKMobileReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMobileReqMsg::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  mahjonglygc_req_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMobileReqMsg::~TKMobileReqMsg() {
  SharedDtor();
}

void TKMobileReqMsg::SharedDtor() {
  if (this != default_instance_) {
    delete mahjonglygc_req_msg_;
  }
}

void TKMobileReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMobileReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMobileReqMsg_descriptor_;
}

const TKMobileReqMsg& TKMobileReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMahjongLYGC_2eproto();  return *default_instance_;
}

TKMobileReqMsg* TKMobileReqMsg::default_instance_ = NULL;

TKMobileReqMsg* TKMobileReqMsg::New() const {
  return new TKMobileReqMsg;
}

void TKMobileReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
    if (has_mahjonglygc_req_msg()) {
      if (mahjonglygc_req_msg_ != NULL) mahjonglygc_req_msg_->::cn::jj::service::msg::protocol::MahJongLYGCReqMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMobileReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1306)) goto parse_mahjonglygc_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.MahJongLYGCReqMsg mahjonglygc_req_msg = 163;
      case 163: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mahjonglygc_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mahjonglygc_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMobileReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.MahJongLYGCReqMsg mahjonglygc_req_msg = 163;
  if (has_mahjonglygc_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      163, this->mahjonglygc_req_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMobileReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.MahJongLYGCReqMsg mahjonglygc_req_msg = 163;
  if (has_mahjonglygc_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        163, this->mahjonglygc_req_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMobileReqMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }
    
    // optional .cn.jj.service.msg.protocol.MahJongLYGCReqMsg mahjonglygc_req_msg = 163;
    if (has_mahjonglygc_req_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mahjonglygc_req_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMobileReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMobileReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMobileReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMobileReqMsg::MergeFrom(const TKMobileReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mahjonglygc_req_msg()) {
      mutable_mahjonglygc_req_msg()->::cn::jj::service::msg::protocol::MahJongLYGCReqMsg::MergeFrom(from.mahjonglygc_req_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMobileReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMobileReqMsg::CopyFrom(const TKMobileReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMobileReqMsg::IsInitialized() const {
  
  if (has_mahjonglygc_req_msg()) {
    if (!this->mahjonglygc_req_msg().IsInitialized()) return false;
  }
  return true;
}

void TKMobileReqMsg::Swap(TKMobileReqMsg* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(mahjonglygc_req_msg_, other->mahjonglygc_req_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMobileReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMobileReqMsg_descriptor_;
  metadata.reflection = TKMobileReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMobileAckMsg::kParamFieldNumber;
const int TKMobileAckMsg::kMahjonglygcAckMsgFieldNumber;
#endif  // !_MSC_VER

TKMobileAckMsg::TKMobileAckMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMobileAckMsg::InitAsDefaultInstance() {
  mahjonglygc_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg*>(&::cn::jj::service::msg::protocol::MahJongLYGCAckMsg::default_instance());
}

TKMobileAckMsg::TKMobileAckMsg(const TKMobileAckMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMobileAckMsg::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  mahjonglygc_ack_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMobileAckMsg::~TKMobileAckMsg() {
  SharedDtor();
}

void TKMobileAckMsg::SharedDtor() {
  if (this != default_instance_) {
    delete mahjonglygc_ack_msg_;
  }
}

void TKMobileAckMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMobileAckMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMobileAckMsg_descriptor_;
}

const TKMobileAckMsg& TKMobileAckMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMahjongLYGC_2eproto();  return *default_instance_;
}

TKMobileAckMsg* TKMobileAckMsg::default_instance_ = NULL;

TKMobileAckMsg* TKMobileAckMsg::New() const {
  return new TKMobileAckMsg;
}

void TKMobileAckMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
    if (has_mahjonglygc_ack_msg()) {
      if (mahjonglygc_ack_msg_ != NULL) mahjonglygc_ack_msg_->::cn::jj::service::msg::protocol::MahJongLYGCAckMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMobileAckMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1306)) goto parse_mahjonglygc_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.MahJongLYGCAckMsg mahjonglygc_ack_msg = 163;
      case 163: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mahjonglygc_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mahjonglygc_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMobileAckMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.MahJongLYGCAckMsg mahjonglygc_ack_msg = 163;
  if (has_mahjonglygc_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      163, this->mahjonglygc_ack_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMobileAckMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.MahJongLYGCAckMsg mahjonglygc_ack_msg = 163;
  if (has_mahjonglygc_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        163, this->mahjonglygc_ack_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMobileAckMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }
    
    // optional .cn.jj.service.msg.protocol.MahJongLYGCAckMsg mahjonglygc_ack_msg = 163;
    if (has_mahjonglygc_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mahjonglygc_ack_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMobileAckMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMobileAckMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMobileAckMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMobileAckMsg::MergeFrom(const TKMobileAckMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mahjonglygc_ack_msg()) {
      mutable_mahjonglygc_ack_msg()->::cn::jj::service::msg::protocol::MahJongLYGCAckMsg::MergeFrom(from.mahjonglygc_ack_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMobileAckMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMobileAckMsg::CopyFrom(const TKMobileAckMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMobileAckMsg::IsInitialized() const {
  
  if (has_mahjonglygc_ack_msg()) {
    if (!this->mahjonglygc_ack_msg().IsInitialized()) return false;
  }
  return true;
}

void TKMobileAckMsg::Swap(TKMobileAckMsg* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(mahjonglygc_ack_msg_, other->mahjonglygc_ack_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMobileAckMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMobileAckMsg_descriptor_;
  metadata.reflection = TKMobileAckMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahJongLYGCReqMsg::kMatchidFieldNumber;
const int MahJongLYGCReqMsg::kTkmahjongrequstReqMsgFieldNumber;
const int MahJongLYGCReqMsg::kTkmahjongtrustplayReqMsgFieldNumber;
const int MahJongLYGCReqMsg::kTkmahjongdissolutionReqMsgFieldNumber;
const int MahJongLYGCReqMsg::kTkmahjongendanimalReqMsgFieldNumber;
#endif  // !_MSC_VER

MahJongLYGCReqMsg::MahJongLYGCReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MahJongLYGCReqMsg::InitAsDefaultInstance() {
  tkmahjongrequst_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongRequestReq*>(&::cn::jj::service::msg::protocol::TKMahJongRequestReq::default_instance());
  tkmahjongtrustplay_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq*>(&::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq::default_instance());
  tkmahjongdissolution_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq*>(&::cn::jj::service::msg::protocol::TKMahJongDissolutionReq::default_instance());
  tkmahjongendanimal_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq*>(&::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq::default_instance());
}

MahJongLYGCReqMsg::MahJongLYGCReqMsg(const MahJongLYGCReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MahJongLYGCReqMsg::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  tkmahjongrequst_req_msg_ = NULL;
  tkmahjongtrustplay_req_msg_ = NULL;
  tkmahjongdissolution_req_msg_ = NULL;
  tkmahjongendanimal_req_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahJongLYGCReqMsg::~MahJongLYGCReqMsg() {
  SharedDtor();
}

void MahJongLYGCReqMsg::SharedDtor() {
  if (this != default_instance_) {
    delete tkmahjongrequst_req_msg_;
    delete tkmahjongtrustplay_req_msg_;
    delete tkmahjongdissolution_req_msg_;
    delete tkmahjongendanimal_req_msg_;
  }
}

void MahJongLYGCReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahJongLYGCReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahJongLYGCReqMsg_descriptor_;
}

const MahJongLYGCReqMsg& MahJongLYGCReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMahjongLYGC_2eproto();  return *default_instance_;
}

MahJongLYGCReqMsg* MahJongLYGCReqMsg::default_instance_ = NULL;

MahJongLYGCReqMsg* MahJongLYGCReqMsg::New() const {
  return new MahJongLYGCReqMsg;
}

void MahJongLYGCReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
    if (has_tkmahjongrequst_req_msg()) {
      if (tkmahjongrequst_req_msg_ != NULL) tkmahjongrequst_req_msg_->::cn::jj::service::msg::protocol::TKMahJongRequestReq::Clear();
    }
    if (has_tkmahjongtrustplay_req_msg()) {
      if (tkmahjongtrustplay_req_msg_ != NULL) tkmahjongtrustplay_req_msg_->::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq::Clear();
    }
    if (has_tkmahjongdissolution_req_msg()) {
      if (tkmahjongdissolution_req_msg_ != NULL) tkmahjongdissolution_req_msg_->::cn::jj::service::msg::protocol::TKMahJongDissolutionReq::Clear();
    }
    if (has_tkmahjongendanimal_req_msg()) {
      if (tkmahjongendanimal_req_msg_ != NULL) tkmahjongendanimal_req_msg_->::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahJongLYGCReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_tkmahjongrequst_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongRequestReq tkmahjongrequst_req_msg = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongrequst_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongrequst_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_tkmahjongtrustplay_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayReq tkmahjongtrustplay_req_msg = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongtrustplay_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongtrustplay_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_tkmahjongdissolution_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionReq tkmahjongdissolution_req_msg = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongdissolution_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongdissolution_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_tkmahjongendanimal_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahjongEndAnimalReq tkmahjongendanimal_req_msg = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongendanimal_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongendanimal_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MahJongLYGCReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongRequestReq tkmahjongrequst_req_msg = 101;
  if (has_tkmahjongrequst_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->tkmahjongrequst_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayReq tkmahjongtrustplay_req_msg = 103;
  if (has_tkmahjongtrustplay_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->tkmahjongtrustplay_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionReq tkmahjongdissolution_req_msg = 104;
  if (has_tkmahjongdissolution_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->tkmahjongdissolution_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongEndAnimalReq tkmahjongendanimal_req_msg = 105;
  if (has_tkmahjongendanimal_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->tkmahjongendanimal_req_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MahJongLYGCReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchid(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongRequestReq tkmahjongrequst_req_msg = 101;
  if (has_tkmahjongrequst_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->tkmahjongrequst_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayReq tkmahjongtrustplay_req_msg = 103;
  if (has_tkmahjongtrustplay_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->tkmahjongtrustplay_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionReq tkmahjongdissolution_req_msg = 104;
  if (has_tkmahjongdissolution_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->tkmahjongdissolution_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongEndAnimalReq tkmahjongendanimal_req_msg = 105;
  if (has_tkmahjongendanimal_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->tkmahjongendanimal_req_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MahJongLYGCReqMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongRequestReq tkmahjongrequst_req_msg = 101;
    if (has_tkmahjongrequst_req_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongrequst_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayReq tkmahjongtrustplay_req_msg = 103;
    if (has_tkmahjongtrustplay_req_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongtrustplay_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionReq tkmahjongdissolution_req_msg = 104;
    if (has_tkmahjongdissolution_req_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongdissolution_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahjongEndAnimalReq tkmahjongendanimal_req_msg = 105;
    if (has_tkmahjongendanimal_req_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongendanimal_req_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahJongLYGCReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahJongLYGCReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MahJongLYGCReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahJongLYGCReqMsg::MergeFrom(const MahJongLYGCReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_tkmahjongrequst_req_msg()) {
      mutable_tkmahjongrequst_req_msg()->::cn::jj::service::msg::protocol::TKMahJongRequestReq::MergeFrom(from.tkmahjongrequst_req_msg());
    }
    if (from.has_tkmahjongtrustplay_req_msg()) {
      mutable_tkmahjongtrustplay_req_msg()->::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq::MergeFrom(from.tkmahjongtrustplay_req_msg());
    }
    if (from.has_tkmahjongdissolution_req_msg()) {
      mutable_tkmahjongdissolution_req_msg()->::cn::jj::service::msg::protocol::TKMahJongDissolutionReq::MergeFrom(from.tkmahjongdissolution_req_msg());
    }
    if (from.has_tkmahjongendanimal_req_msg()) {
      mutable_tkmahjongendanimal_req_msg()->::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq::MergeFrom(from.tkmahjongendanimal_req_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahJongLYGCReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahJongLYGCReqMsg::CopyFrom(const MahJongLYGCReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahJongLYGCReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_tkmahjongrequst_req_msg()) {
    if (!this->tkmahjongrequst_req_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongtrustplay_req_msg()) {
    if (!this->tkmahjongtrustplay_req_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongdissolution_req_msg()) {
    if (!this->tkmahjongdissolution_req_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongendanimal_req_msg()) {
    if (!this->tkmahjongendanimal_req_msg().IsInitialized()) return false;
  }
  return true;
}

void MahJongLYGCReqMsg::Swap(MahJongLYGCReqMsg* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(tkmahjongrequst_req_msg_, other->tkmahjongrequst_req_msg_);
    std::swap(tkmahjongtrustplay_req_msg_, other->tkmahjongtrustplay_req_msg_);
    std::swap(tkmahjongdissolution_req_msg_, other->tkmahjongdissolution_req_msg_);
    std::swap(tkmahjongendanimal_req_msg_, other->tkmahjongendanimal_req_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MahJongLYGCReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahJongLYGCReqMsg_descriptor_;
  metadata.reflection = MahJongLYGCReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahJongLYGCAckMsg::kMatchidFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjonggamebeginAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongplaceAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongopendoorAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongactionAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongpengAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjonggangAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongwinAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongdiscardtileAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongdrawtileAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongtrustplayAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongscorechangeAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongresultAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongmessageAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongdissolutionAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongcalldataAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongbeginanimalAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjonghandtilesAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjonggenzhuangAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongfanciAckMsgFieldNumber;
const int MahJongLYGCAckMsg::kTkmahjongdebuglogAckMsgFieldNumber;
#endif  // !_MSC_VER

MahJongLYGCAckMsg::MahJongLYGCAckMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MahJongLYGCAckMsg::InitAsDefaultInstance() {
  tkmahjonggamebegin_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck*>(&::cn::jj::service::msg::protocol::TKMahJongGameBeginAck::default_instance());
  tkmahjongplace_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongPlaceAck*>(&::cn::jj::service::msg::protocol::TKMahJongPlaceAck::default_instance());
  tkmahjongopendoor_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck*>(&::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck::default_instance());
  tkmahjongaction_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongActionAck*>(&::cn::jj::service::msg::protocol::TKMahJongActionAck::default_instance());
  tkmahjongpeng_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongPengAck*>(&::cn::jj::service::msg::protocol::TKMahJongPengAck::default_instance());
  tkmahjonggang_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongGangAck*>(&::cn::jj::service::msg::protocol::TKMahJongGangAck::default_instance());
  tkmahjongwin_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongWinAck*>(&::cn::jj::service::msg::protocol::TKMahJongWinAck::default_instance());
  tkmahjongdiscardtile_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck*>(&::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck::default_instance());
  tkmahjongdrawtile_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck*>(&::cn::jj::service::msg::protocol::TKMahJongDrawTileAck::default_instance());
  tkmahjongtrustplay_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck*>(&::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck::default_instance());
  tkmahjongscorechange_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck*>(&::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck::default_instance());
  tkmahjongresult_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongResultAck*>(&::cn::jj::service::msg::protocol::TKMahJongResultAck::default_instance());
  tkmahjongmessage_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongMessageAck*>(&::cn::jj::service::msg::protocol::TKMahJongMessageAck::default_instance());
  tkmahjongdissolution_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck*>(&::cn::jj::service::msg::protocol::TKMahJongDissolutionAck::default_instance());
  tkmahjongcalldata_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahjongCallDataAck*>(&::cn::jj::service::msg::protocol::TKMahjongCallDataAck::default_instance());
  tkmahjongbeginanimal_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck*>(&::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck::default_instance());
  tkmahjonghandtiles_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck*>(&::cn::jj::service::msg::protocol::TKMahjongHandTilesAck::default_instance());
  tkmahjonggenzhuang_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck*>(&::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck::default_instance());
  tkmahjongfanci_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahjongFanCiAck*>(&::cn::jj::service::msg::protocol::TKMahjongFanCiAck::default_instance());
  tkmahjongdebuglog_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck*>(&::cn::jj::service::msg::protocol::TKMahJongDebugLogAck::default_instance());
}

MahJongLYGCAckMsg::MahJongLYGCAckMsg(const MahJongLYGCAckMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MahJongLYGCAckMsg::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  tkmahjonggamebegin_ack_msg_ = NULL;
  tkmahjongplace_ack_msg_ = NULL;
  tkmahjongopendoor_ack_msg_ = NULL;
  tkmahjongaction_ack_msg_ = NULL;
  tkmahjongpeng_ack_msg_ = NULL;
  tkmahjonggang_ack_msg_ = NULL;
  tkmahjongwin_ack_msg_ = NULL;
  tkmahjongdiscardtile_ack_msg_ = NULL;
  tkmahjongdrawtile_ack_msg_ = NULL;
  tkmahjongtrustplay_ack_msg_ = NULL;
  tkmahjongscorechange_ack_msg_ = NULL;
  tkmahjongresult_ack_msg_ = NULL;
  tkmahjongmessage_ack_msg_ = NULL;
  tkmahjongdissolution_ack_msg_ = NULL;
  tkmahjongcalldata_ack_msg_ = NULL;
  tkmahjongbeginanimal_ack_msg_ = NULL;
  tkmahjonghandtiles_ack_msg_ = NULL;
  tkmahjonggenzhuang_ack_msg_ = NULL;
  tkmahjongfanci_ack_msg_ = NULL;
  tkmahjongdebuglog_ack_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahJongLYGCAckMsg::~MahJongLYGCAckMsg() {
  SharedDtor();
}

void MahJongLYGCAckMsg::SharedDtor() {
  if (this != default_instance_) {
    delete tkmahjonggamebegin_ack_msg_;
    delete tkmahjongplace_ack_msg_;
    delete tkmahjongopendoor_ack_msg_;
    delete tkmahjongaction_ack_msg_;
    delete tkmahjongpeng_ack_msg_;
    delete tkmahjonggang_ack_msg_;
    delete tkmahjongwin_ack_msg_;
    delete tkmahjongdiscardtile_ack_msg_;
    delete tkmahjongdrawtile_ack_msg_;
    delete tkmahjongtrustplay_ack_msg_;
    delete tkmahjongscorechange_ack_msg_;
    delete tkmahjongresult_ack_msg_;
    delete tkmahjongmessage_ack_msg_;
    delete tkmahjongdissolution_ack_msg_;
    delete tkmahjongcalldata_ack_msg_;
    delete tkmahjongbeginanimal_ack_msg_;
    delete tkmahjonghandtiles_ack_msg_;
    delete tkmahjonggenzhuang_ack_msg_;
    delete tkmahjongfanci_ack_msg_;
    delete tkmahjongdebuglog_ack_msg_;
  }
}

void MahJongLYGCAckMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MahJongLYGCAckMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahJongLYGCAckMsg_descriptor_;
}

const MahJongLYGCAckMsg& MahJongLYGCAckMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMahjongLYGC_2eproto();  return *default_instance_;
}

MahJongLYGCAckMsg* MahJongLYGCAckMsg::default_instance_ = NULL;

MahJongLYGCAckMsg* MahJongLYGCAckMsg::New() const {
  return new MahJongLYGCAckMsg;
}

void MahJongLYGCAckMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
    if (has_tkmahjonggamebegin_ack_msg()) {
      if (tkmahjonggamebegin_ack_msg_ != NULL) tkmahjonggamebegin_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongGameBeginAck::Clear();
    }
    if (has_tkmahjongplace_ack_msg()) {
      if (tkmahjongplace_ack_msg_ != NULL) tkmahjongplace_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongPlaceAck::Clear();
    }
    if (has_tkmahjongopendoor_ack_msg()) {
      if (tkmahjongopendoor_ack_msg_ != NULL) tkmahjongopendoor_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck::Clear();
    }
    if (has_tkmahjongaction_ack_msg()) {
      if (tkmahjongaction_ack_msg_ != NULL) tkmahjongaction_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongActionAck::Clear();
    }
    if (has_tkmahjongpeng_ack_msg()) {
      if (tkmahjongpeng_ack_msg_ != NULL) tkmahjongpeng_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongPengAck::Clear();
    }
    if (has_tkmahjonggang_ack_msg()) {
      if (tkmahjonggang_ack_msg_ != NULL) tkmahjonggang_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongGangAck::Clear();
    }
    if (has_tkmahjongwin_ack_msg()) {
      if (tkmahjongwin_ack_msg_ != NULL) tkmahjongwin_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongWinAck::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tkmahjongdiscardtile_ack_msg()) {
      if (tkmahjongdiscardtile_ack_msg_ != NULL) tkmahjongdiscardtile_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck::Clear();
    }
    if (has_tkmahjongdrawtile_ack_msg()) {
      if (tkmahjongdrawtile_ack_msg_ != NULL) tkmahjongdrawtile_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongDrawTileAck::Clear();
    }
    if (has_tkmahjongtrustplay_ack_msg()) {
      if (tkmahjongtrustplay_ack_msg_ != NULL) tkmahjongtrustplay_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck::Clear();
    }
    if (has_tkmahjongscorechange_ack_msg()) {
      if (tkmahjongscorechange_ack_msg_ != NULL) tkmahjongscorechange_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck::Clear();
    }
    if (has_tkmahjongresult_ack_msg()) {
      if (tkmahjongresult_ack_msg_ != NULL) tkmahjongresult_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongResultAck::Clear();
    }
    if (has_tkmahjongmessage_ack_msg()) {
      if (tkmahjongmessage_ack_msg_ != NULL) tkmahjongmessage_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongMessageAck::Clear();
    }
    if (has_tkmahjongdissolution_ack_msg()) {
      if (tkmahjongdissolution_ack_msg_ != NULL) tkmahjongdissolution_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongDissolutionAck::Clear();
    }
    if (has_tkmahjongcalldata_ack_msg()) {
      if (tkmahjongcalldata_ack_msg_ != NULL) tkmahjongcalldata_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongCallDataAck::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tkmahjongbeginanimal_ack_msg()) {
      if (tkmahjongbeginanimal_ack_msg_ != NULL) tkmahjongbeginanimal_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck::Clear();
    }
    if (has_tkmahjonghandtiles_ack_msg()) {
      if (tkmahjonghandtiles_ack_msg_ != NULL) tkmahjonghandtiles_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongHandTilesAck::Clear();
    }
    if (has_tkmahjonggenzhuang_ack_msg()) {
      if (tkmahjonggenzhuang_ack_msg_ != NULL) tkmahjonggenzhuang_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck::Clear();
    }
    if (has_tkmahjongfanci_ack_msg()) {
      if (tkmahjongfanci_ack_msg_ != NULL) tkmahjongfanci_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongFanCiAck::Clear();
    }
    if (has_tkmahjongdebuglog_ack_msg()) {
      if (tkmahjongdebuglog_ack_msg_ != NULL) tkmahjongdebuglog_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongDebugLogAck::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahJongLYGCAckMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_tkmahjonggamebegin_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongGameBeginAck tkmahjonggamebegin_ack_msg = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjonggamebegin_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjonggamebegin_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_tkmahjongplace_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongPlaceAck tkmahjongplace_ack_msg = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongplace_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongplace_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_tkmahjongopendoor_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongOpenDoorAck tkmahjongopendoor_ack_msg = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongopendoor_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongopendoor_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_tkmahjongaction_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongActionAck tkmahjongaction_ack_msg = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongaction_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongaction_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_tkmahjongpeng_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongPengAck tkmahjongpeng_ack_msg = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongpeng_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongpeng_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_tkmahjonggang_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongGangAck tkmahjonggang_ack_msg = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjonggang_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjonggang_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(874)) goto parse_tkmahjongwin_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongWinAck tkmahjongwin_ack_msg = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongwin_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongwin_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_tkmahjongdiscardtile_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongDiscardTileAck tkmahjongdiscardtile_ack_msg = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongdiscardtile_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongdiscardtile_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(890)) goto parse_tkmahjongdrawtile_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongDrawTileAck tkmahjongdrawtile_ack_msg = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongdrawtile_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongdrawtile_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(898)) goto parse_tkmahjongtrustplay_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayAck tkmahjongtrustplay_ack_msg = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongtrustplay_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongtrustplay_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(906)) goto parse_tkmahjongscorechange_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongScoreChangeAck tkmahjongscorechange_ack_msg = 113;
      case 113: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongscorechange_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongscorechange_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(914)) goto parse_tkmahjongresult_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongResultAck tkmahjongresult_ack_msg = 114;
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongresult_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongresult_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(938)) goto parse_tkmahjongmessage_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongMessageAck tkmahjongmessage_ack_msg = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongmessage_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongmessage_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(946)) goto parse_tkmahjongdissolution_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionAck tkmahjongdissolution_ack_msg = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongdissolution_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongdissolution_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(954)) goto parse_tkmahjongcalldata_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahjongCallDataAck tkmahjongcalldata_ack_msg = 119;
      case 119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongcalldata_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongcalldata_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(962)) goto parse_tkmahjongbeginanimal_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahjongBeginAnimalAck tkmahjongbeginanimal_ack_msg = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongbeginanimal_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongbeginanimal_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(970)) goto parse_tkmahjonghandtiles_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahjongHandTilesAck tkmahjonghandtiles_ack_msg = 121;
      case 121: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjonghandtiles_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjonghandtiles_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(978)) goto parse_tkmahjonggenzhuang_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahjongGenZhuangAck tkmahjonggenzhuang_ack_msg = 122;
      case 122: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjonggenzhuang_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjonggenzhuang_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(986)) goto parse_tkmahjongfanci_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahjongFanCiAck tkmahjongfanci_ack_msg = 123;
      case 123: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongfanci_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongfanci_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4098)) goto parse_tkmahjongdebuglog_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TKMahJongDebugLogAck tkmahjongdebuglog_ack_msg = 512;
      case 512: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tkmahjongdebuglog_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tkmahjongdebuglog_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MahJongLYGCAckMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongGameBeginAck tkmahjonggamebegin_ack_msg = 100;
  if (has_tkmahjonggamebegin_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->tkmahjonggamebegin_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongPlaceAck tkmahjongplace_ack_msg = 101;
  if (has_tkmahjongplace_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->tkmahjongplace_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongOpenDoorAck tkmahjongopendoor_ack_msg = 103;
  if (has_tkmahjongopendoor_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->tkmahjongopendoor_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongActionAck tkmahjongaction_ack_msg = 104;
  if (has_tkmahjongaction_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->tkmahjongaction_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongPengAck tkmahjongpeng_ack_msg = 105;
  if (has_tkmahjongpeng_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->tkmahjongpeng_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongGangAck tkmahjonggang_ack_msg = 106;
  if (has_tkmahjonggang_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->tkmahjonggang_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongWinAck tkmahjongwin_ack_msg = 109;
  if (has_tkmahjongwin_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->tkmahjongwin_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDiscardTileAck tkmahjongdiscardtile_ack_msg = 110;
  if (has_tkmahjongdiscardtile_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->tkmahjongdiscardtile_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDrawTileAck tkmahjongdrawtile_ack_msg = 111;
  if (has_tkmahjongdrawtile_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->tkmahjongdrawtile_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayAck tkmahjongtrustplay_ack_msg = 112;
  if (has_tkmahjongtrustplay_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, this->tkmahjongtrustplay_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongScoreChangeAck tkmahjongscorechange_ack_msg = 113;
  if (has_tkmahjongscorechange_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, this->tkmahjongscorechange_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongResultAck tkmahjongresult_ack_msg = 114;
  if (has_tkmahjongresult_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, this->tkmahjongresult_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongMessageAck tkmahjongmessage_ack_msg = 117;
  if (has_tkmahjongmessage_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, this->tkmahjongmessage_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionAck tkmahjongdissolution_ack_msg = 118;
  if (has_tkmahjongdissolution_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, this->tkmahjongdissolution_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongCallDataAck tkmahjongcalldata_ack_msg = 119;
  if (has_tkmahjongcalldata_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, this->tkmahjongcalldata_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongBeginAnimalAck tkmahjongbeginanimal_ack_msg = 120;
  if (has_tkmahjongbeginanimal_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, this->tkmahjongbeginanimal_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongHandTilesAck tkmahjonghandtiles_ack_msg = 121;
  if (has_tkmahjonghandtiles_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, this->tkmahjonghandtiles_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongGenZhuangAck tkmahjonggenzhuang_ack_msg = 122;
  if (has_tkmahjonggenzhuang_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, this->tkmahjonggenzhuang_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongFanCiAck tkmahjongfanci_ack_msg = 123;
  if (has_tkmahjongfanci_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, this->tkmahjongfanci_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDebugLogAck tkmahjongdebuglog_ack_msg = 512;
  if (has_tkmahjongdebuglog_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      512, this->tkmahjongdebuglog_ack_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MahJongLYGCAckMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchid(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongGameBeginAck tkmahjonggamebegin_ack_msg = 100;
  if (has_tkmahjonggamebegin_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->tkmahjonggamebegin_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongPlaceAck tkmahjongplace_ack_msg = 101;
  if (has_tkmahjongplace_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->tkmahjongplace_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongOpenDoorAck tkmahjongopendoor_ack_msg = 103;
  if (has_tkmahjongopendoor_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->tkmahjongopendoor_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongActionAck tkmahjongaction_ack_msg = 104;
  if (has_tkmahjongaction_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->tkmahjongaction_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongPengAck tkmahjongpeng_ack_msg = 105;
  if (has_tkmahjongpeng_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->tkmahjongpeng_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongGangAck tkmahjonggang_ack_msg = 106;
  if (has_tkmahjonggang_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->tkmahjonggang_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongWinAck tkmahjongwin_ack_msg = 109;
  if (has_tkmahjongwin_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->tkmahjongwin_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDiscardTileAck tkmahjongdiscardtile_ack_msg = 110;
  if (has_tkmahjongdiscardtile_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->tkmahjongdiscardtile_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDrawTileAck tkmahjongdrawtile_ack_msg = 111;
  if (has_tkmahjongdrawtile_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->tkmahjongdrawtile_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayAck tkmahjongtrustplay_ack_msg = 112;
  if (has_tkmahjongtrustplay_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        112, this->tkmahjongtrustplay_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongScoreChangeAck tkmahjongscorechange_ack_msg = 113;
  if (has_tkmahjongscorechange_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        113, this->tkmahjongscorechange_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongResultAck tkmahjongresult_ack_msg = 114;
  if (has_tkmahjongresult_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        114, this->tkmahjongresult_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongMessageAck tkmahjongmessage_ack_msg = 117;
  if (has_tkmahjongmessage_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->tkmahjongmessage_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionAck tkmahjongdissolution_ack_msg = 118;
  if (has_tkmahjongdissolution_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        118, this->tkmahjongdissolution_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongCallDataAck tkmahjongcalldata_ack_msg = 119;
  if (has_tkmahjongcalldata_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        119, this->tkmahjongcalldata_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongBeginAnimalAck tkmahjongbeginanimal_ack_msg = 120;
  if (has_tkmahjongbeginanimal_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        120, this->tkmahjongbeginanimal_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongHandTilesAck tkmahjonghandtiles_ack_msg = 121;
  if (has_tkmahjonghandtiles_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        121, this->tkmahjonghandtiles_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongGenZhuangAck tkmahjonggenzhuang_ack_msg = 122;
  if (has_tkmahjonggenzhuang_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        122, this->tkmahjonggenzhuang_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahjongFanCiAck tkmahjongfanci_ack_msg = 123;
  if (has_tkmahjongfanci_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        123, this->tkmahjongfanci_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDebugLogAck tkmahjongdebuglog_ack_msg = 512;
  if (has_tkmahjongdebuglog_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        512, this->tkmahjongdebuglog_ack_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MahJongLYGCAckMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongGameBeginAck tkmahjonggamebegin_ack_msg = 100;
    if (has_tkmahjonggamebegin_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjonggamebegin_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongPlaceAck tkmahjongplace_ack_msg = 101;
    if (has_tkmahjongplace_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongplace_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongOpenDoorAck tkmahjongopendoor_ack_msg = 103;
    if (has_tkmahjongopendoor_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongopendoor_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongActionAck tkmahjongaction_ack_msg = 104;
    if (has_tkmahjongaction_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongaction_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongPengAck tkmahjongpeng_ack_msg = 105;
    if (has_tkmahjongpeng_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongpeng_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongGangAck tkmahjonggang_ack_msg = 106;
    if (has_tkmahjonggang_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjonggang_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongWinAck tkmahjongwin_ack_msg = 109;
    if (has_tkmahjongwin_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongwin_ack_msg());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cn.jj.service.msg.protocol.TKMahJongDiscardTileAck tkmahjongdiscardtile_ack_msg = 110;
    if (has_tkmahjongdiscardtile_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongdiscardtile_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongDrawTileAck tkmahjongdrawtile_ack_msg = 111;
    if (has_tkmahjongdrawtile_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongdrawtile_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayAck tkmahjongtrustplay_ack_msg = 112;
    if (has_tkmahjongtrustplay_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongtrustplay_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongScoreChangeAck tkmahjongscorechange_ack_msg = 113;
    if (has_tkmahjongscorechange_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongscorechange_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongResultAck tkmahjongresult_ack_msg = 114;
    if (has_tkmahjongresult_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongresult_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongMessageAck tkmahjongmessage_ack_msg = 117;
    if (has_tkmahjongmessage_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongmessage_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionAck tkmahjongdissolution_ack_msg = 118;
    if (has_tkmahjongdissolution_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongdissolution_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahjongCallDataAck tkmahjongcalldata_ack_msg = 119;
    if (has_tkmahjongcalldata_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongcalldata_ack_msg());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .cn.jj.service.msg.protocol.TKMahjongBeginAnimalAck tkmahjongbeginanimal_ack_msg = 120;
    if (has_tkmahjongbeginanimal_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongbeginanimal_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahjongHandTilesAck tkmahjonghandtiles_ack_msg = 121;
    if (has_tkmahjonghandtiles_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjonghandtiles_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahjongGenZhuangAck tkmahjonggenzhuang_ack_msg = 122;
    if (has_tkmahjonggenzhuang_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjonggenzhuang_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahjongFanCiAck tkmahjongfanci_ack_msg = 123;
    if (has_tkmahjongfanci_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongfanci_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TKMahJongDebugLogAck tkmahjongdebuglog_ack_msg = 512;
    if (has_tkmahjongdebuglog_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tkmahjongdebuglog_ack_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahJongLYGCAckMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahJongLYGCAckMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MahJongLYGCAckMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahJongLYGCAckMsg::MergeFrom(const MahJongLYGCAckMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_tkmahjonggamebegin_ack_msg()) {
      mutable_tkmahjonggamebegin_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongGameBeginAck::MergeFrom(from.tkmahjonggamebegin_ack_msg());
    }
    if (from.has_tkmahjongplace_ack_msg()) {
      mutable_tkmahjongplace_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongPlaceAck::MergeFrom(from.tkmahjongplace_ack_msg());
    }
    if (from.has_tkmahjongopendoor_ack_msg()) {
      mutable_tkmahjongopendoor_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck::MergeFrom(from.tkmahjongopendoor_ack_msg());
    }
    if (from.has_tkmahjongaction_ack_msg()) {
      mutable_tkmahjongaction_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongActionAck::MergeFrom(from.tkmahjongaction_ack_msg());
    }
    if (from.has_tkmahjongpeng_ack_msg()) {
      mutable_tkmahjongpeng_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongPengAck::MergeFrom(from.tkmahjongpeng_ack_msg());
    }
    if (from.has_tkmahjonggang_ack_msg()) {
      mutable_tkmahjonggang_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongGangAck::MergeFrom(from.tkmahjonggang_ack_msg());
    }
    if (from.has_tkmahjongwin_ack_msg()) {
      mutable_tkmahjongwin_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongWinAck::MergeFrom(from.tkmahjongwin_ack_msg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tkmahjongdiscardtile_ack_msg()) {
      mutable_tkmahjongdiscardtile_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck::MergeFrom(from.tkmahjongdiscardtile_ack_msg());
    }
    if (from.has_tkmahjongdrawtile_ack_msg()) {
      mutable_tkmahjongdrawtile_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongDrawTileAck::MergeFrom(from.tkmahjongdrawtile_ack_msg());
    }
    if (from.has_tkmahjongtrustplay_ack_msg()) {
      mutable_tkmahjongtrustplay_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck::MergeFrom(from.tkmahjongtrustplay_ack_msg());
    }
    if (from.has_tkmahjongscorechange_ack_msg()) {
      mutable_tkmahjongscorechange_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck::MergeFrom(from.tkmahjongscorechange_ack_msg());
    }
    if (from.has_tkmahjongresult_ack_msg()) {
      mutable_tkmahjongresult_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongResultAck::MergeFrom(from.tkmahjongresult_ack_msg());
    }
    if (from.has_tkmahjongmessage_ack_msg()) {
      mutable_tkmahjongmessage_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongMessageAck::MergeFrom(from.tkmahjongmessage_ack_msg());
    }
    if (from.has_tkmahjongdissolution_ack_msg()) {
      mutable_tkmahjongdissolution_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongDissolutionAck::MergeFrom(from.tkmahjongdissolution_ack_msg());
    }
    if (from.has_tkmahjongcalldata_ack_msg()) {
      mutable_tkmahjongcalldata_ack_msg()->::cn::jj::service::msg::protocol::TKMahjongCallDataAck::MergeFrom(from.tkmahjongcalldata_ack_msg());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tkmahjongbeginanimal_ack_msg()) {
      mutable_tkmahjongbeginanimal_ack_msg()->::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck::MergeFrom(from.tkmahjongbeginanimal_ack_msg());
    }
    if (from.has_tkmahjonghandtiles_ack_msg()) {
      mutable_tkmahjonghandtiles_ack_msg()->::cn::jj::service::msg::protocol::TKMahjongHandTilesAck::MergeFrom(from.tkmahjonghandtiles_ack_msg());
    }
    if (from.has_tkmahjonggenzhuang_ack_msg()) {
      mutable_tkmahjonggenzhuang_ack_msg()->::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck::MergeFrom(from.tkmahjonggenzhuang_ack_msg());
    }
    if (from.has_tkmahjongfanci_ack_msg()) {
      mutable_tkmahjongfanci_ack_msg()->::cn::jj::service::msg::protocol::TKMahjongFanCiAck::MergeFrom(from.tkmahjongfanci_ack_msg());
    }
    if (from.has_tkmahjongdebuglog_ack_msg()) {
      mutable_tkmahjongdebuglog_ack_msg()->::cn::jj::service::msg::protocol::TKMahJongDebugLogAck::MergeFrom(from.tkmahjongdebuglog_ack_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahJongLYGCAckMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahJongLYGCAckMsg::CopyFrom(const MahJongLYGCAckMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahJongLYGCAckMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_tkmahjonggamebegin_ack_msg()) {
    if (!this->tkmahjonggamebegin_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongplace_ack_msg()) {
    if (!this->tkmahjongplace_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongopendoor_ack_msg()) {
    if (!this->tkmahjongopendoor_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongaction_ack_msg()) {
    if (!this->tkmahjongaction_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongpeng_ack_msg()) {
    if (!this->tkmahjongpeng_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjonggang_ack_msg()) {
    if (!this->tkmahjonggang_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongwin_ack_msg()) {
    if (!this->tkmahjongwin_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongdiscardtile_ack_msg()) {
    if (!this->tkmahjongdiscardtile_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongdrawtile_ack_msg()) {
    if (!this->tkmahjongdrawtile_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongtrustplay_ack_msg()) {
    if (!this->tkmahjongtrustplay_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongresult_ack_msg()) {
    if (!this->tkmahjongresult_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongmessage_ack_msg()) {
    if (!this->tkmahjongmessage_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongdissolution_ack_msg()) {
    if (!this->tkmahjongdissolution_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongcalldata_ack_msg()) {
    if (!this->tkmahjongcalldata_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjonghandtiles_ack_msg()) {
    if (!this->tkmahjonghandtiles_ack_msg().IsInitialized()) return false;
  }
  if (has_tkmahjongfanci_ack_msg()) {
    if (!this->tkmahjongfanci_ack_msg().IsInitialized()) return false;
  }
  return true;
}

void MahJongLYGCAckMsg::Swap(MahJongLYGCAckMsg* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(tkmahjonggamebegin_ack_msg_, other->tkmahjonggamebegin_ack_msg_);
    std::swap(tkmahjongplace_ack_msg_, other->tkmahjongplace_ack_msg_);
    std::swap(tkmahjongopendoor_ack_msg_, other->tkmahjongopendoor_ack_msg_);
    std::swap(tkmahjongaction_ack_msg_, other->tkmahjongaction_ack_msg_);
    std::swap(tkmahjongpeng_ack_msg_, other->tkmahjongpeng_ack_msg_);
    std::swap(tkmahjonggang_ack_msg_, other->tkmahjonggang_ack_msg_);
    std::swap(tkmahjongwin_ack_msg_, other->tkmahjongwin_ack_msg_);
    std::swap(tkmahjongdiscardtile_ack_msg_, other->tkmahjongdiscardtile_ack_msg_);
    std::swap(tkmahjongdrawtile_ack_msg_, other->tkmahjongdrawtile_ack_msg_);
    std::swap(tkmahjongtrustplay_ack_msg_, other->tkmahjongtrustplay_ack_msg_);
    std::swap(tkmahjongscorechange_ack_msg_, other->tkmahjongscorechange_ack_msg_);
    std::swap(tkmahjongresult_ack_msg_, other->tkmahjongresult_ack_msg_);
    std::swap(tkmahjongmessage_ack_msg_, other->tkmahjongmessage_ack_msg_);
    std::swap(tkmahjongdissolution_ack_msg_, other->tkmahjongdissolution_ack_msg_);
    std::swap(tkmahjongcalldata_ack_msg_, other->tkmahjongcalldata_ack_msg_);
    std::swap(tkmahjongbeginanimal_ack_msg_, other->tkmahjongbeginanimal_ack_msg_);
    std::swap(tkmahjonghandtiles_ack_msg_, other->tkmahjonghandtiles_ack_msg_);
    std::swap(tkmahjonggenzhuang_ack_msg_, other->tkmahjonggenzhuang_ack_msg_);
    std::swap(tkmahjongfanci_ack_msg_, other->tkmahjongfanci_ack_msg_);
    std::swap(tkmahjongdebuglog_ack_msg_, other->tkmahjongdebuglog_ack_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MahJongLYGCAckMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MahJongLYGCAckMsg_descriptor_;
  metadata.reflection = MahJongLYGCAckMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahjongFanCiAck::kTileFieldNumber;
const int TKMahjongFanCiAck::kCalldataFieldNumber;
#endif  // !_MSC_VER

TKMahjongFanCiAck::TKMahjongFanCiAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahjongFanCiAck::InitAsDefaultInstance() {
}

TKMahjongFanCiAck::TKMahjongFanCiAck(const TKMahjongFanCiAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahjongFanCiAck::SharedCtor() {
  _cached_size_ = 0;
  tile_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahjongFanCiAck::~TKMahjongFanCiAck() {
  SharedDtor();
}

void TKMahjongFanCiAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahjongFanCiAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahjongFanCiAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahjongFanCiAck_descriptor_;
}

const TKMahjongFanCiAck& TKMahjongFanCiAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMahjongLYGC_2eproto();  return *default_instance_;
}

TKMahjongFanCiAck* TKMahjongFanCiAck::default_instance_ = NULL;

TKMahjongFanCiAck* TKMahjongFanCiAck::New() const {
  return new TKMahjongFanCiAck;
}

void TKMahjongFanCiAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tile_ = 0;
  }
  calldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahjongFanCiAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_)));
          set_has_tile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_calldata;
        break;
      }
      
      // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_calldata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahjongFanCiAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tile = 1;
  if (has_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tile(), output);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
  for (int i = 0; i < this->calldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->calldata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahjongFanCiAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tile = 1;
  if (has_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tile(), target);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
  for (int i = 0; i < this->calldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->calldata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahjongFanCiAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tile = 1;
    if (has_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tile());
    }
    
  }
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
  total_size += 1 * this->calldata_size();
  for (int i = 0; i < this->calldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calldata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahjongFanCiAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahjongFanCiAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahjongFanCiAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahjongFanCiAck::MergeFrom(const TKMahjongFanCiAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  calldata_.MergeFrom(from.calldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tile()) {
      set_tile(from.tile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahjongFanCiAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahjongFanCiAck::CopyFrom(const TKMahjongFanCiAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahjongFanCiAck::IsInitialized() const {
  
  for (int i = 0; i < calldata_size(); i++) {
    if (!this->calldata(i).IsInitialized()) return false;
  }
  return true;
}

void TKMahjongFanCiAck::Swap(TKMahjongFanCiAck* other) {
  if (other != this) {
    std::swap(tile_, other->tile_);
    calldata_.Swap(&other->calldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahjongFanCiAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahjongFanCiAck_descriptor_;
  metadata.reflection = TKMahjongFanCiAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace msg
}  // namespace service
}  // namespace jj
}  // namespace cn

// @@protoc_insertion_point(global_scope)
