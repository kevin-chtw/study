// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TKMahjongLYGC.proto

#ifndef PROTOBUF_TKMahjongLYGC_2eproto__INCLUDED
#define PROTOBUF_TKMahjongLYGC_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "TKMJStruct.pb.h"
// @@protoc_insertion_point(includes)

namespace cn {
namespace jj {
namespace service {
namespace msg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TKMahjongLYGC_2eproto();
void protobuf_AssignDesc_TKMahjongLYGC_2eproto();
void protobuf_ShutdownFile_TKMahjongLYGC_2eproto();

class TKMobileReqMsg;
class TKMobileAckMsg;
class MahJongLYGCReqMsg;
class MahJongLYGCAckMsg;
class TKMahjongFanCiAck;

// ===================================================================

class TKMobileReqMsg : public ::google::protobuf::Message {
 public:
  TKMobileReqMsg();
  virtual ~TKMobileReqMsg();
  
  TKMobileReqMsg(const TKMobileReqMsg& from);
  
  inline TKMobileReqMsg& operator=(const TKMobileReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TKMobileReqMsg& default_instance();
  
  void Swap(TKMobileReqMsg* other);
  
  // implements Message ----------------------------------------------
  
  TKMobileReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKMobileReqMsg& from);
  void MergeFrom(const TKMobileReqMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 param = 1;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);
  
  // optional .cn.jj.service.msg.protocol.MahJongLYGCReqMsg mahjonglygc_req_msg = 163;
  inline bool has_mahjonglygc_req_msg() const;
  inline void clear_mahjonglygc_req_msg();
  static const int kMahjonglygcReqMsgFieldNumber = 163;
  inline const ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg& mahjonglygc_req_msg() const;
  inline ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg* mutable_mahjonglygc_req_msg();
  inline ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg* release_mahjonglygc_req_msg();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.TKMobileReqMsg)
 private:
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_mahjonglygc_req_msg();
  inline void clear_has_mahjonglygc_req_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg* mahjonglygc_req_msg_;
  ::google::protobuf::int32 param_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_AssignDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_ShutdownFile_TKMahjongLYGC_2eproto();
  
  void InitAsDefaultInstance();
  static TKMobileReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class TKMobileAckMsg : public ::google::protobuf::Message {
 public:
  TKMobileAckMsg();
  virtual ~TKMobileAckMsg();
  
  TKMobileAckMsg(const TKMobileAckMsg& from);
  
  inline TKMobileAckMsg& operator=(const TKMobileAckMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TKMobileAckMsg& default_instance();
  
  void Swap(TKMobileAckMsg* other);
  
  // implements Message ----------------------------------------------
  
  TKMobileAckMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKMobileAckMsg& from);
  void MergeFrom(const TKMobileAckMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 param = 1;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);
  
  // optional .cn.jj.service.msg.protocol.MahJongLYGCAckMsg mahjonglygc_ack_msg = 163;
  inline bool has_mahjonglygc_ack_msg() const;
  inline void clear_mahjonglygc_ack_msg();
  static const int kMahjonglygcAckMsgFieldNumber = 163;
  inline const ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg& mahjonglygc_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg* mutable_mahjonglygc_ack_msg();
  inline ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg* release_mahjonglygc_ack_msg();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.TKMobileAckMsg)
 private:
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_mahjonglygc_ack_msg();
  inline void clear_has_mahjonglygc_ack_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg* mahjonglygc_ack_msg_;
  ::google::protobuf::int32 param_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_AssignDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_ShutdownFile_TKMahjongLYGC_2eproto();
  
  void InitAsDefaultInstance();
  static TKMobileAckMsg* default_instance_;
};
// -------------------------------------------------------------------

class MahJongLYGCReqMsg : public ::google::protobuf::Message {
 public:
  MahJongLYGCReqMsg();
  virtual ~MahJongLYGCReqMsg();
  
  MahJongLYGCReqMsg(const MahJongLYGCReqMsg& from);
  
  inline MahJongLYGCReqMsg& operator=(const MahJongLYGCReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MahJongLYGCReqMsg& default_instance();
  
  void Swap(MahJongLYGCReqMsg* other);
  
  // implements Message ----------------------------------------------
  
  MahJongLYGCReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahJongLYGCReqMsg& from);
  void MergeFrom(const MahJongLYGCReqMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::int32 matchid() const;
  inline void set_matchid(::google::protobuf::int32 value);
  
  // optional .cn.jj.service.msg.protocol.TKMahJongRequestReq tkmahjongrequst_req_msg = 101;
  inline bool has_tkmahjongrequst_req_msg() const;
  inline void clear_tkmahjongrequst_req_msg();
  static const int kTkmahjongrequstReqMsgFieldNumber = 101;
  inline const ::cn::jj::service::msg::protocol::TKMahJongRequestReq& tkmahjongrequst_req_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongRequestReq* mutable_tkmahjongrequst_req_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongRequestReq* release_tkmahjongrequst_req_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayReq tkmahjongtrustplay_req_msg = 103;
  inline bool has_tkmahjongtrustplay_req_msg() const;
  inline void clear_tkmahjongtrustplay_req_msg();
  static const int kTkmahjongtrustplayReqMsgFieldNumber = 103;
  inline const ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq& tkmahjongtrustplay_req_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq* mutable_tkmahjongtrustplay_req_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq* release_tkmahjongtrustplay_req_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionReq tkmahjongdissolution_req_msg = 104;
  inline bool has_tkmahjongdissolution_req_msg() const;
  inline void clear_tkmahjongdissolution_req_msg();
  static const int kTkmahjongdissolutionReqMsgFieldNumber = 104;
  inline const ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq& tkmahjongdissolution_req_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq* mutable_tkmahjongdissolution_req_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq* release_tkmahjongdissolution_req_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahjongEndAnimalReq tkmahjongendanimal_req_msg = 105;
  inline bool has_tkmahjongendanimal_req_msg() const;
  inline void clear_tkmahjongendanimal_req_msg();
  static const int kTkmahjongendanimalReqMsgFieldNumber = 105;
  inline const ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq& tkmahjongendanimal_req_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq* mutable_tkmahjongendanimal_req_msg();
  inline ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq* release_tkmahjongendanimal_req_msg();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.MahJongLYGCReqMsg)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_tkmahjongrequst_req_msg();
  inline void clear_has_tkmahjongrequst_req_msg();
  inline void set_has_tkmahjongtrustplay_req_msg();
  inline void clear_has_tkmahjongtrustplay_req_msg();
  inline void set_has_tkmahjongdissolution_req_msg();
  inline void clear_has_tkmahjongdissolution_req_msg();
  inline void set_has_tkmahjongendanimal_req_msg();
  inline void clear_has_tkmahjongendanimal_req_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cn::jj::service::msg::protocol::TKMahJongRequestReq* tkmahjongrequst_req_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq* tkmahjongtrustplay_req_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq* tkmahjongdissolution_req_msg_;
  ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq* tkmahjongendanimal_req_msg_;
  ::google::protobuf::int32 matchid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_AssignDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_ShutdownFile_TKMahjongLYGC_2eproto();
  
  void InitAsDefaultInstance();
  static MahJongLYGCReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class MahJongLYGCAckMsg : public ::google::protobuf::Message {
 public:
  MahJongLYGCAckMsg();
  virtual ~MahJongLYGCAckMsg();
  
  MahJongLYGCAckMsg(const MahJongLYGCAckMsg& from);
  
  inline MahJongLYGCAckMsg& operator=(const MahJongLYGCAckMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MahJongLYGCAckMsg& default_instance();
  
  void Swap(MahJongLYGCAckMsg* other);
  
  // implements Message ----------------------------------------------
  
  MahJongLYGCAckMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MahJongLYGCAckMsg& from);
  void MergeFrom(const MahJongLYGCAckMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::int32 matchid() const;
  inline void set_matchid(::google::protobuf::int32 value);
  
  // optional .cn.jj.service.msg.protocol.TKMahJongGameBeginAck tkmahjonggamebegin_ack_msg = 100;
  inline bool has_tkmahjonggamebegin_ack_msg() const;
  inline void clear_tkmahjonggamebegin_ack_msg();
  static const int kTkmahjonggamebeginAckMsgFieldNumber = 100;
  inline const ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck& tkmahjonggamebegin_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck* mutable_tkmahjonggamebegin_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck* release_tkmahjonggamebegin_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongPlaceAck tkmahjongplace_ack_msg = 101;
  inline bool has_tkmahjongplace_ack_msg() const;
  inline void clear_tkmahjongplace_ack_msg();
  static const int kTkmahjongplaceAckMsgFieldNumber = 101;
  inline const ::cn::jj::service::msg::protocol::TKMahJongPlaceAck& tkmahjongplace_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongPlaceAck* mutable_tkmahjongplace_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongPlaceAck* release_tkmahjongplace_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongOpenDoorAck tkmahjongopendoor_ack_msg = 103;
  inline bool has_tkmahjongopendoor_ack_msg() const;
  inline void clear_tkmahjongopendoor_ack_msg();
  static const int kTkmahjongopendoorAckMsgFieldNumber = 103;
  inline const ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck& tkmahjongopendoor_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck* mutable_tkmahjongopendoor_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck* release_tkmahjongopendoor_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongActionAck tkmahjongaction_ack_msg = 104;
  inline bool has_tkmahjongaction_ack_msg() const;
  inline void clear_tkmahjongaction_ack_msg();
  static const int kTkmahjongactionAckMsgFieldNumber = 104;
  inline const ::cn::jj::service::msg::protocol::TKMahJongActionAck& tkmahjongaction_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongActionAck* mutable_tkmahjongaction_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongActionAck* release_tkmahjongaction_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongPengAck tkmahjongpeng_ack_msg = 105;
  inline bool has_tkmahjongpeng_ack_msg() const;
  inline void clear_tkmahjongpeng_ack_msg();
  static const int kTkmahjongpengAckMsgFieldNumber = 105;
  inline const ::cn::jj::service::msg::protocol::TKMahJongPengAck& tkmahjongpeng_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongPengAck* mutable_tkmahjongpeng_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongPengAck* release_tkmahjongpeng_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongGangAck tkmahjonggang_ack_msg = 106;
  inline bool has_tkmahjonggang_ack_msg() const;
  inline void clear_tkmahjonggang_ack_msg();
  static const int kTkmahjonggangAckMsgFieldNumber = 106;
  inline const ::cn::jj::service::msg::protocol::TKMahJongGangAck& tkmahjonggang_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongGangAck* mutable_tkmahjonggang_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongGangAck* release_tkmahjonggang_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongWinAck tkmahjongwin_ack_msg = 109;
  inline bool has_tkmahjongwin_ack_msg() const;
  inline void clear_tkmahjongwin_ack_msg();
  static const int kTkmahjongwinAckMsgFieldNumber = 109;
  inline const ::cn::jj::service::msg::protocol::TKMahJongWinAck& tkmahjongwin_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongWinAck* mutable_tkmahjongwin_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongWinAck* release_tkmahjongwin_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDiscardTileAck tkmahjongdiscardtile_ack_msg = 110;
  inline bool has_tkmahjongdiscardtile_ack_msg() const;
  inline void clear_tkmahjongdiscardtile_ack_msg();
  static const int kTkmahjongdiscardtileAckMsgFieldNumber = 110;
  inline const ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck& tkmahjongdiscardtile_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck* mutable_tkmahjongdiscardtile_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck* release_tkmahjongdiscardtile_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDrawTileAck tkmahjongdrawtile_ack_msg = 111;
  inline bool has_tkmahjongdrawtile_ack_msg() const;
  inline void clear_tkmahjongdrawtile_ack_msg();
  static const int kTkmahjongdrawtileAckMsgFieldNumber = 111;
  inline const ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck& tkmahjongdrawtile_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck* mutable_tkmahjongdrawtile_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck* release_tkmahjongdrawtile_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayAck tkmahjongtrustplay_ack_msg = 112;
  inline bool has_tkmahjongtrustplay_ack_msg() const;
  inline void clear_tkmahjongtrustplay_ack_msg();
  static const int kTkmahjongtrustplayAckMsgFieldNumber = 112;
  inline const ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck& tkmahjongtrustplay_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck* mutable_tkmahjongtrustplay_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck* release_tkmahjongtrustplay_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongScoreChangeAck tkmahjongscorechange_ack_msg = 113;
  inline bool has_tkmahjongscorechange_ack_msg() const;
  inline void clear_tkmahjongscorechange_ack_msg();
  static const int kTkmahjongscorechangeAckMsgFieldNumber = 113;
  inline const ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck& tkmahjongscorechange_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck* mutable_tkmahjongscorechange_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck* release_tkmahjongscorechange_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongResultAck tkmahjongresult_ack_msg = 114;
  inline bool has_tkmahjongresult_ack_msg() const;
  inline void clear_tkmahjongresult_ack_msg();
  static const int kTkmahjongresultAckMsgFieldNumber = 114;
  inline const ::cn::jj::service::msg::protocol::TKMahJongResultAck& tkmahjongresult_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongResultAck* mutable_tkmahjongresult_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongResultAck* release_tkmahjongresult_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongMessageAck tkmahjongmessage_ack_msg = 117;
  inline bool has_tkmahjongmessage_ack_msg() const;
  inline void clear_tkmahjongmessage_ack_msg();
  static const int kTkmahjongmessageAckMsgFieldNumber = 117;
  inline const ::cn::jj::service::msg::protocol::TKMahJongMessageAck& tkmahjongmessage_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongMessageAck* mutable_tkmahjongmessage_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongMessageAck* release_tkmahjongmessage_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDissolutionAck tkmahjongdissolution_ack_msg = 118;
  inline bool has_tkmahjongdissolution_ack_msg() const;
  inline void clear_tkmahjongdissolution_ack_msg();
  static const int kTkmahjongdissolutionAckMsgFieldNumber = 118;
  inline const ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck& tkmahjongdissolution_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck* mutable_tkmahjongdissolution_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck* release_tkmahjongdissolution_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahjongCallDataAck tkmahjongcalldata_ack_msg = 119;
  inline bool has_tkmahjongcalldata_ack_msg() const;
  inline void clear_tkmahjongcalldata_ack_msg();
  static const int kTkmahjongcalldataAckMsgFieldNumber = 119;
  inline const ::cn::jj::service::msg::protocol::TKMahjongCallDataAck& tkmahjongcalldata_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahjongCallDataAck* mutable_tkmahjongcalldata_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahjongCallDataAck* release_tkmahjongcalldata_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahjongBeginAnimalAck tkmahjongbeginanimal_ack_msg = 120;
  inline bool has_tkmahjongbeginanimal_ack_msg() const;
  inline void clear_tkmahjongbeginanimal_ack_msg();
  static const int kTkmahjongbeginanimalAckMsgFieldNumber = 120;
  inline const ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck& tkmahjongbeginanimal_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck* mutable_tkmahjongbeginanimal_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck* release_tkmahjongbeginanimal_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahjongHandTilesAck tkmahjonghandtiles_ack_msg = 121;
  inline bool has_tkmahjonghandtiles_ack_msg() const;
  inline void clear_tkmahjonghandtiles_ack_msg();
  static const int kTkmahjonghandtilesAckMsgFieldNumber = 121;
  inline const ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck& tkmahjonghandtiles_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck* mutable_tkmahjonghandtiles_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck* release_tkmahjonghandtiles_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahjongGenZhuangAck tkmahjonggenzhuang_ack_msg = 122;
  inline bool has_tkmahjonggenzhuang_ack_msg() const;
  inline void clear_tkmahjonggenzhuang_ack_msg();
  static const int kTkmahjonggenzhuangAckMsgFieldNumber = 122;
  inline const ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck& tkmahjonggenzhuang_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck* mutable_tkmahjonggenzhuang_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck* release_tkmahjonggenzhuang_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahjongFanCiAck tkmahjongfanci_ack_msg = 123;
  inline bool has_tkmahjongfanci_ack_msg() const;
  inline void clear_tkmahjongfanci_ack_msg();
  static const int kTkmahjongfanciAckMsgFieldNumber = 123;
  inline const ::cn::jj::service::msg::protocol::TKMahjongFanCiAck& tkmahjongfanci_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahjongFanCiAck* mutable_tkmahjongfanci_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahjongFanCiAck* release_tkmahjongfanci_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TKMahJongDebugLogAck tkmahjongdebuglog_ack_msg = 512;
  inline bool has_tkmahjongdebuglog_ack_msg() const;
  inline void clear_tkmahjongdebuglog_ack_msg();
  static const int kTkmahjongdebuglogAckMsgFieldNumber = 512;
  inline const ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck& tkmahjongdebuglog_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck* mutable_tkmahjongdebuglog_ack_msg();
  inline ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck* release_tkmahjongdebuglog_ack_msg();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.MahJongLYGCAckMsg)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_tkmahjonggamebegin_ack_msg();
  inline void clear_has_tkmahjonggamebegin_ack_msg();
  inline void set_has_tkmahjongplace_ack_msg();
  inline void clear_has_tkmahjongplace_ack_msg();
  inline void set_has_tkmahjongopendoor_ack_msg();
  inline void clear_has_tkmahjongopendoor_ack_msg();
  inline void set_has_tkmahjongaction_ack_msg();
  inline void clear_has_tkmahjongaction_ack_msg();
  inline void set_has_tkmahjongpeng_ack_msg();
  inline void clear_has_tkmahjongpeng_ack_msg();
  inline void set_has_tkmahjonggang_ack_msg();
  inline void clear_has_tkmahjonggang_ack_msg();
  inline void set_has_tkmahjongwin_ack_msg();
  inline void clear_has_tkmahjongwin_ack_msg();
  inline void set_has_tkmahjongdiscardtile_ack_msg();
  inline void clear_has_tkmahjongdiscardtile_ack_msg();
  inline void set_has_tkmahjongdrawtile_ack_msg();
  inline void clear_has_tkmahjongdrawtile_ack_msg();
  inline void set_has_tkmahjongtrustplay_ack_msg();
  inline void clear_has_tkmahjongtrustplay_ack_msg();
  inline void set_has_tkmahjongscorechange_ack_msg();
  inline void clear_has_tkmahjongscorechange_ack_msg();
  inline void set_has_tkmahjongresult_ack_msg();
  inline void clear_has_tkmahjongresult_ack_msg();
  inline void set_has_tkmahjongmessage_ack_msg();
  inline void clear_has_tkmahjongmessage_ack_msg();
  inline void set_has_tkmahjongdissolution_ack_msg();
  inline void clear_has_tkmahjongdissolution_ack_msg();
  inline void set_has_tkmahjongcalldata_ack_msg();
  inline void clear_has_tkmahjongcalldata_ack_msg();
  inline void set_has_tkmahjongbeginanimal_ack_msg();
  inline void clear_has_tkmahjongbeginanimal_ack_msg();
  inline void set_has_tkmahjonghandtiles_ack_msg();
  inline void clear_has_tkmahjonghandtiles_ack_msg();
  inline void set_has_tkmahjonggenzhuang_ack_msg();
  inline void clear_has_tkmahjonggenzhuang_ack_msg();
  inline void set_has_tkmahjongfanci_ack_msg();
  inline void clear_has_tkmahjongfanci_ack_msg();
  inline void set_has_tkmahjongdebuglog_ack_msg();
  inline void clear_has_tkmahjongdebuglog_ack_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck* tkmahjonggamebegin_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongPlaceAck* tkmahjongplace_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck* tkmahjongopendoor_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongActionAck* tkmahjongaction_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongPengAck* tkmahjongpeng_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongGangAck* tkmahjonggang_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongWinAck* tkmahjongwin_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck* tkmahjongdiscardtile_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck* tkmahjongdrawtile_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck* tkmahjongtrustplay_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck* tkmahjongscorechange_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongResultAck* tkmahjongresult_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongMessageAck* tkmahjongmessage_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck* tkmahjongdissolution_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahjongCallDataAck* tkmahjongcalldata_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck* tkmahjongbeginanimal_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck* tkmahjonghandtiles_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck* tkmahjonggenzhuang_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahjongFanCiAck* tkmahjongfanci_ack_msg_;
  ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck* tkmahjongdebuglog_ack_msg_;
  ::google::protobuf::int32 matchid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_AssignDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_ShutdownFile_TKMahjongLYGC_2eproto();
  
  void InitAsDefaultInstance();
  static MahJongLYGCAckMsg* default_instance_;
};
// -------------------------------------------------------------------

class TKMahjongFanCiAck : public ::google::protobuf::Message {
 public:
  TKMahjongFanCiAck();
  virtual ~TKMahjongFanCiAck();
  
  TKMahjongFanCiAck(const TKMahjongFanCiAck& from);
  
  inline TKMahjongFanCiAck& operator=(const TKMahjongFanCiAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TKMahjongFanCiAck& default_instance();
  
  void Swap(TKMahjongFanCiAck* other);
  
  // implements Message ----------------------------------------------
  
  TKMahjongFanCiAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKMahjongFanCiAck& from);
  void MergeFrom(const TKMahjongFanCiAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 tile = 1;
  inline bool has_tile() const;
  inline void clear_tile();
  static const int kTileFieldNumber = 1;
  inline ::google::protobuf::int32 tile() const;
  inline void set_tile(::google::protobuf::int32 value);
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
  inline int calldata_size() const;
  inline void clear_calldata();
  static const int kCalldataFieldNumber = 2;
  inline const ::cn::jj::service::msg::protocol::TKMahJongCallData& calldata(int index) const;
  inline ::cn::jj::service::msg::protocol::TKMahJongCallData* mutable_calldata(int index);
  inline ::cn::jj::service::msg::protocol::TKMahJongCallData* add_calldata();
  inline const ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::TKMahJongCallData >&
      calldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::TKMahJongCallData >*
      mutable_calldata();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.TKMahjongFanCiAck)
 private:
  inline void set_has_tile();
  inline void clear_has_tile();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::TKMahJongCallData > calldata_;
  ::google::protobuf::int32 tile_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_AssignDesc_TKMahjongLYGC_2eproto();
  friend void protobuf_ShutdownFile_TKMahjongLYGC_2eproto();
  
  void InitAsDefaultInstance();
  static TKMahjongFanCiAck* default_instance_;
};
// ===================================================================


// ===================================================================

// TKMobileReqMsg

// optional int32 param = 1;
inline bool TKMobileReqMsg::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKMobileReqMsg::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKMobileReqMsg::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKMobileReqMsg::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 TKMobileReqMsg::param() const {
  return param_;
}
inline void TKMobileReqMsg::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// optional .cn.jj.service.msg.protocol.MahJongLYGCReqMsg mahjonglygc_req_msg = 163;
inline bool TKMobileReqMsg::has_mahjonglygc_req_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TKMobileReqMsg::set_has_mahjonglygc_req_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TKMobileReqMsg::clear_has_mahjonglygc_req_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TKMobileReqMsg::clear_mahjonglygc_req_msg() {
  if (mahjonglygc_req_msg_ != NULL) mahjonglygc_req_msg_->::cn::jj::service::msg::protocol::MahJongLYGCReqMsg::Clear();
  clear_has_mahjonglygc_req_msg();
}
inline const ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg& TKMobileReqMsg::mahjonglygc_req_msg() const {
  return mahjonglygc_req_msg_ != NULL ? *mahjonglygc_req_msg_ : *default_instance_->mahjonglygc_req_msg_;
}
inline ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg* TKMobileReqMsg::mutable_mahjonglygc_req_msg() {
  set_has_mahjonglygc_req_msg();
  if (mahjonglygc_req_msg_ == NULL) mahjonglygc_req_msg_ = new ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg;
  return mahjonglygc_req_msg_;
}
inline ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg* TKMobileReqMsg::release_mahjonglygc_req_msg() {
  clear_has_mahjonglygc_req_msg();
  ::cn::jj::service::msg::protocol::MahJongLYGCReqMsg* temp = mahjonglygc_req_msg_;
  mahjonglygc_req_msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TKMobileAckMsg

// optional int32 param = 1;
inline bool TKMobileAckMsg::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKMobileAckMsg::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKMobileAckMsg::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKMobileAckMsg::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 TKMobileAckMsg::param() const {
  return param_;
}
inline void TKMobileAckMsg::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// optional .cn.jj.service.msg.protocol.MahJongLYGCAckMsg mahjonglygc_ack_msg = 163;
inline bool TKMobileAckMsg::has_mahjonglygc_ack_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TKMobileAckMsg::set_has_mahjonglygc_ack_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TKMobileAckMsg::clear_has_mahjonglygc_ack_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TKMobileAckMsg::clear_mahjonglygc_ack_msg() {
  if (mahjonglygc_ack_msg_ != NULL) mahjonglygc_ack_msg_->::cn::jj::service::msg::protocol::MahJongLYGCAckMsg::Clear();
  clear_has_mahjonglygc_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg& TKMobileAckMsg::mahjonglygc_ack_msg() const {
  return mahjonglygc_ack_msg_ != NULL ? *mahjonglygc_ack_msg_ : *default_instance_->mahjonglygc_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg* TKMobileAckMsg::mutable_mahjonglygc_ack_msg() {
  set_has_mahjonglygc_ack_msg();
  if (mahjonglygc_ack_msg_ == NULL) mahjonglygc_ack_msg_ = new ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg;
  return mahjonglygc_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg* TKMobileAckMsg::release_mahjonglygc_ack_msg() {
  clear_has_mahjonglygc_ack_msg();
  ::cn::jj::service::msg::protocol::MahJongLYGCAckMsg* temp = mahjonglygc_ack_msg_;
  mahjonglygc_ack_msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MahJongLYGCReqMsg

// required int32 matchid = 1;
inline bool MahJongLYGCReqMsg::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MahJongLYGCReqMsg::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MahJongLYGCReqMsg::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MahJongLYGCReqMsg::clear_matchid() {
  matchid_ = 0;
  clear_has_matchid();
}
inline ::google::protobuf::int32 MahJongLYGCReqMsg::matchid() const {
  return matchid_;
}
inline void MahJongLYGCReqMsg::set_matchid(::google::protobuf::int32 value) {
  set_has_matchid();
  matchid_ = value;
}

// optional .cn.jj.service.msg.protocol.TKMahJongRequestReq tkmahjongrequst_req_msg = 101;
inline bool MahJongLYGCReqMsg::has_tkmahjongrequst_req_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MahJongLYGCReqMsg::set_has_tkmahjongrequst_req_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MahJongLYGCReqMsg::clear_has_tkmahjongrequst_req_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MahJongLYGCReqMsg::clear_tkmahjongrequst_req_msg() {
  if (tkmahjongrequst_req_msg_ != NULL) tkmahjongrequst_req_msg_->::cn::jj::service::msg::protocol::TKMahJongRequestReq::Clear();
  clear_has_tkmahjongrequst_req_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongRequestReq& MahJongLYGCReqMsg::tkmahjongrequst_req_msg() const {
  return tkmahjongrequst_req_msg_ != NULL ? *tkmahjongrequst_req_msg_ : *default_instance_->tkmahjongrequst_req_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongRequestReq* MahJongLYGCReqMsg::mutable_tkmahjongrequst_req_msg() {
  set_has_tkmahjongrequst_req_msg();
  if (tkmahjongrequst_req_msg_ == NULL) tkmahjongrequst_req_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongRequestReq;
  return tkmahjongrequst_req_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongRequestReq* MahJongLYGCReqMsg::release_tkmahjongrequst_req_msg() {
  clear_has_tkmahjongrequst_req_msg();
  ::cn::jj::service::msg::protocol::TKMahJongRequestReq* temp = tkmahjongrequst_req_msg_;
  tkmahjongrequst_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayReq tkmahjongtrustplay_req_msg = 103;
inline bool MahJongLYGCReqMsg::has_tkmahjongtrustplay_req_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MahJongLYGCReqMsg::set_has_tkmahjongtrustplay_req_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MahJongLYGCReqMsg::clear_has_tkmahjongtrustplay_req_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MahJongLYGCReqMsg::clear_tkmahjongtrustplay_req_msg() {
  if (tkmahjongtrustplay_req_msg_ != NULL) tkmahjongtrustplay_req_msg_->::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq::Clear();
  clear_has_tkmahjongtrustplay_req_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq& MahJongLYGCReqMsg::tkmahjongtrustplay_req_msg() const {
  return tkmahjongtrustplay_req_msg_ != NULL ? *tkmahjongtrustplay_req_msg_ : *default_instance_->tkmahjongtrustplay_req_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq* MahJongLYGCReqMsg::mutable_tkmahjongtrustplay_req_msg() {
  set_has_tkmahjongtrustplay_req_msg();
  if (tkmahjongtrustplay_req_msg_ == NULL) tkmahjongtrustplay_req_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq;
  return tkmahjongtrustplay_req_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq* MahJongLYGCReqMsg::release_tkmahjongtrustplay_req_msg() {
  clear_has_tkmahjongtrustplay_req_msg();
  ::cn::jj::service::msg::protocol::TKMahJongTrustPlayReq* temp = tkmahjongtrustplay_req_msg_;
  tkmahjongtrustplay_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongDissolutionReq tkmahjongdissolution_req_msg = 104;
inline bool MahJongLYGCReqMsg::has_tkmahjongdissolution_req_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MahJongLYGCReqMsg::set_has_tkmahjongdissolution_req_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MahJongLYGCReqMsg::clear_has_tkmahjongdissolution_req_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MahJongLYGCReqMsg::clear_tkmahjongdissolution_req_msg() {
  if (tkmahjongdissolution_req_msg_ != NULL) tkmahjongdissolution_req_msg_->::cn::jj::service::msg::protocol::TKMahJongDissolutionReq::Clear();
  clear_has_tkmahjongdissolution_req_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq& MahJongLYGCReqMsg::tkmahjongdissolution_req_msg() const {
  return tkmahjongdissolution_req_msg_ != NULL ? *tkmahjongdissolution_req_msg_ : *default_instance_->tkmahjongdissolution_req_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq* MahJongLYGCReqMsg::mutable_tkmahjongdissolution_req_msg() {
  set_has_tkmahjongdissolution_req_msg();
  if (tkmahjongdissolution_req_msg_ == NULL) tkmahjongdissolution_req_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq;
  return tkmahjongdissolution_req_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq* MahJongLYGCReqMsg::release_tkmahjongdissolution_req_msg() {
  clear_has_tkmahjongdissolution_req_msg();
  ::cn::jj::service::msg::protocol::TKMahJongDissolutionReq* temp = tkmahjongdissolution_req_msg_;
  tkmahjongdissolution_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahjongEndAnimalReq tkmahjongendanimal_req_msg = 105;
inline bool MahJongLYGCReqMsg::has_tkmahjongendanimal_req_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MahJongLYGCReqMsg::set_has_tkmahjongendanimal_req_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MahJongLYGCReqMsg::clear_has_tkmahjongendanimal_req_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MahJongLYGCReqMsg::clear_tkmahjongendanimal_req_msg() {
  if (tkmahjongendanimal_req_msg_ != NULL) tkmahjongendanimal_req_msg_->::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq::Clear();
  clear_has_tkmahjongendanimal_req_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq& MahJongLYGCReqMsg::tkmahjongendanimal_req_msg() const {
  return tkmahjongendanimal_req_msg_ != NULL ? *tkmahjongendanimal_req_msg_ : *default_instance_->tkmahjongendanimal_req_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq* MahJongLYGCReqMsg::mutable_tkmahjongendanimal_req_msg() {
  set_has_tkmahjongendanimal_req_msg();
  if (tkmahjongendanimal_req_msg_ == NULL) tkmahjongendanimal_req_msg_ = new ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq;
  return tkmahjongendanimal_req_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq* MahJongLYGCReqMsg::release_tkmahjongendanimal_req_msg() {
  clear_has_tkmahjongendanimal_req_msg();
  ::cn::jj::service::msg::protocol::TKMahjongEndAnimalReq* temp = tkmahjongendanimal_req_msg_;
  tkmahjongendanimal_req_msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MahJongLYGCAckMsg

// required int32 matchid = 1;
inline bool MahJongLYGCAckMsg::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MahJongLYGCAckMsg::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MahJongLYGCAckMsg::clear_matchid() {
  matchid_ = 0;
  clear_has_matchid();
}
inline ::google::protobuf::int32 MahJongLYGCAckMsg::matchid() const {
  return matchid_;
}
inline void MahJongLYGCAckMsg::set_matchid(::google::protobuf::int32 value) {
  set_has_matchid();
  matchid_ = value;
}

// optional .cn.jj.service.msg.protocol.TKMahJongGameBeginAck tkmahjonggamebegin_ack_msg = 100;
inline bool MahJongLYGCAckMsg::has_tkmahjonggamebegin_ack_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjonggamebegin_ack_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjonggamebegin_ack_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjonggamebegin_ack_msg() {
  if (tkmahjonggamebegin_ack_msg_ != NULL) tkmahjonggamebegin_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongGameBeginAck::Clear();
  clear_has_tkmahjonggamebegin_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck& MahJongLYGCAckMsg::tkmahjonggamebegin_ack_msg() const {
  return tkmahjonggamebegin_ack_msg_ != NULL ? *tkmahjonggamebegin_ack_msg_ : *default_instance_->tkmahjonggamebegin_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck* MahJongLYGCAckMsg::mutable_tkmahjonggamebegin_ack_msg() {
  set_has_tkmahjonggamebegin_ack_msg();
  if (tkmahjonggamebegin_ack_msg_ == NULL) tkmahjonggamebegin_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck;
  return tkmahjonggamebegin_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck* MahJongLYGCAckMsg::release_tkmahjonggamebegin_ack_msg() {
  clear_has_tkmahjonggamebegin_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongGameBeginAck* temp = tkmahjonggamebegin_ack_msg_;
  tkmahjonggamebegin_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongPlaceAck tkmahjongplace_ack_msg = 101;
inline bool MahJongLYGCAckMsg::has_tkmahjongplace_ack_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongplace_ack_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongplace_ack_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongplace_ack_msg() {
  if (tkmahjongplace_ack_msg_ != NULL) tkmahjongplace_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongPlaceAck::Clear();
  clear_has_tkmahjongplace_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongPlaceAck& MahJongLYGCAckMsg::tkmahjongplace_ack_msg() const {
  return tkmahjongplace_ack_msg_ != NULL ? *tkmahjongplace_ack_msg_ : *default_instance_->tkmahjongplace_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongPlaceAck* MahJongLYGCAckMsg::mutable_tkmahjongplace_ack_msg() {
  set_has_tkmahjongplace_ack_msg();
  if (tkmahjongplace_ack_msg_ == NULL) tkmahjongplace_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongPlaceAck;
  return tkmahjongplace_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongPlaceAck* MahJongLYGCAckMsg::release_tkmahjongplace_ack_msg() {
  clear_has_tkmahjongplace_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongPlaceAck* temp = tkmahjongplace_ack_msg_;
  tkmahjongplace_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongOpenDoorAck tkmahjongopendoor_ack_msg = 103;
inline bool MahJongLYGCAckMsg::has_tkmahjongopendoor_ack_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongopendoor_ack_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongopendoor_ack_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongopendoor_ack_msg() {
  if (tkmahjongopendoor_ack_msg_ != NULL) tkmahjongopendoor_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck::Clear();
  clear_has_tkmahjongopendoor_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck& MahJongLYGCAckMsg::tkmahjongopendoor_ack_msg() const {
  return tkmahjongopendoor_ack_msg_ != NULL ? *tkmahjongopendoor_ack_msg_ : *default_instance_->tkmahjongopendoor_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck* MahJongLYGCAckMsg::mutable_tkmahjongopendoor_ack_msg() {
  set_has_tkmahjongopendoor_ack_msg();
  if (tkmahjongopendoor_ack_msg_ == NULL) tkmahjongopendoor_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck;
  return tkmahjongopendoor_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck* MahJongLYGCAckMsg::release_tkmahjongopendoor_ack_msg() {
  clear_has_tkmahjongopendoor_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongOpenDoorAck* temp = tkmahjongopendoor_ack_msg_;
  tkmahjongopendoor_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongActionAck tkmahjongaction_ack_msg = 104;
inline bool MahJongLYGCAckMsg::has_tkmahjongaction_ack_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongaction_ack_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongaction_ack_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongaction_ack_msg() {
  if (tkmahjongaction_ack_msg_ != NULL) tkmahjongaction_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongActionAck::Clear();
  clear_has_tkmahjongaction_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongActionAck& MahJongLYGCAckMsg::tkmahjongaction_ack_msg() const {
  return tkmahjongaction_ack_msg_ != NULL ? *tkmahjongaction_ack_msg_ : *default_instance_->tkmahjongaction_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongActionAck* MahJongLYGCAckMsg::mutable_tkmahjongaction_ack_msg() {
  set_has_tkmahjongaction_ack_msg();
  if (tkmahjongaction_ack_msg_ == NULL) tkmahjongaction_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongActionAck;
  return tkmahjongaction_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongActionAck* MahJongLYGCAckMsg::release_tkmahjongaction_ack_msg() {
  clear_has_tkmahjongaction_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongActionAck* temp = tkmahjongaction_ack_msg_;
  tkmahjongaction_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongPengAck tkmahjongpeng_ack_msg = 105;
inline bool MahJongLYGCAckMsg::has_tkmahjongpeng_ack_msg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongpeng_ack_msg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongpeng_ack_msg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongpeng_ack_msg() {
  if (tkmahjongpeng_ack_msg_ != NULL) tkmahjongpeng_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongPengAck::Clear();
  clear_has_tkmahjongpeng_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongPengAck& MahJongLYGCAckMsg::tkmahjongpeng_ack_msg() const {
  return tkmahjongpeng_ack_msg_ != NULL ? *tkmahjongpeng_ack_msg_ : *default_instance_->tkmahjongpeng_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongPengAck* MahJongLYGCAckMsg::mutable_tkmahjongpeng_ack_msg() {
  set_has_tkmahjongpeng_ack_msg();
  if (tkmahjongpeng_ack_msg_ == NULL) tkmahjongpeng_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongPengAck;
  return tkmahjongpeng_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongPengAck* MahJongLYGCAckMsg::release_tkmahjongpeng_ack_msg() {
  clear_has_tkmahjongpeng_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongPengAck* temp = tkmahjongpeng_ack_msg_;
  tkmahjongpeng_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongGangAck tkmahjonggang_ack_msg = 106;
inline bool MahJongLYGCAckMsg::has_tkmahjonggang_ack_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjonggang_ack_msg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjonggang_ack_msg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjonggang_ack_msg() {
  if (tkmahjonggang_ack_msg_ != NULL) tkmahjonggang_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongGangAck::Clear();
  clear_has_tkmahjonggang_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongGangAck& MahJongLYGCAckMsg::tkmahjonggang_ack_msg() const {
  return tkmahjonggang_ack_msg_ != NULL ? *tkmahjonggang_ack_msg_ : *default_instance_->tkmahjonggang_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongGangAck* MahJongLYGCAckMsg::mutable_tkmahjonggang_ack_msg() {
  set_has_tkmahjonggang_ack_msg();
  if (tkmahjonggang_ack_msg_ == NULL) tkmahjonggang_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongGangAck;
  return tkmahjonggang_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongGangAck* MahJongLYGCAckMsg::release_tkmahjonggang_ack_msg() {
  clear_has_tkmahjonggang_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongGangAck* temp = tkmahjonggang_ack_msg_;
  tkmahjonggang_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongWinAck tkmahjongwin_ack_msg = 109;
inline bool MahJongLYGCAckMsg::has_tkmahjongwin_ack_msg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongwin_ack_msg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongwin_ack_msg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongwin_ack_msg() {
  if (tkmahjongwin_ack_msg_ != NULL) tkmahjongwin_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongWinAck::Clear();
  clear_has_tkmahjongwin_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongWinAck& MahJongLYGCAckMsg::tkmahjongwin_ack_msg() const {
  return tkmahjongwin_ack_msg_ != NULL ? *tkmahjongwin_ack_msg_ : *default_instance_->tkmahjongwin_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongWinAck* MahJongLYGCAckMsg::mutable_tkmahjongwin_ack_msg() {
  set_has_tkmahjongwin_ack_msg();
  if (tkmahjongwin_ack_msg_ == NULL) tkmahjongwin_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongWinAck;
  return tkmahjongwin_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongWinAck* MahJongLYGCAckMsg::release_tkmahjongwin_ack_msg() {
  clear_has_tkmahjongwin_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongWinAck* temp = tkmahjongwin_ack_msg_;
  tkmahjongwin_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongDiscardTileAck tkmahjongdiscardtile_ack_msg = 110;
inline bool MahJongLYGCAckMsg::has_tkmahjongdiscardtile_ack_msg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongdiscardtile_ack_msg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongdiscardtile_ack_msg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongdiscardtile_ack_msg() {
  if (tkmahjongdiscardtile_ack_msg_ != NULL) tkmahjongdiscardtile_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck::Clear();
  clear_has_tkmahjongdiscardtile_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck& MahJongLYGCAckMsg::tkmahjongdiscardtile_ack_msg() const {
  return tkmahjongdiscardtile_ack_msg_ != NULL ? *tkmahjongdiscardtile_ack_msg_ : *default_instance_->tkmahjongdiscardtile_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck* MahJongLYGCAckMsg::mutable_tkmahjongdiscardtile_ack_msg() {
  set_has_tkmahjongdiscardtile_ack_msg();
  if (tkmahjongdiscardtile_ack_msg_ == NULL) tkmahjongdiscardtile_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck;
  return tkmahjongdiscardtile_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck* MahJongLYGCAckMsg::release_tkmahjongdiscardtile_ack_msg() {
  clear_has_tkmahjongdiscardtile_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongDiscardTileAck* temp = tkmahjongdiscardtile_ack_msg_;
  tkmahjongdiscardtile_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongDrawTileAck tkmahjongdrawtile_ack_msg = 111;
inline bool MahJongLYGCAckMsg::has_tkmahjongdrawtile_ack_msg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongdrawtile_ack_msg() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongdrawtile_ack_msg() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongdrawtile_ack_msg() {
  if (tkmahjongdrawtile_ack_msg_ != NULL) tkmahjongdrawtile_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongDrawTileAck::Clear();
  clear_has_tkmahjongdrawtile_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck& MahJongLYGCAckMsg::tkmahjongdrawtile_ack_msg() const {
  return tkmahjongdrawtile_ack_msg_ != NULL ? *tkmahjongdrawtile_ack_msg_ : *default_instance_->tkmahjongdrawtile_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck* MahJongLYGCAckMsg::mutable_tkmahjongdrawtile_ack_msg() {
  set_has_tkmahjongdrawtile_ack_msg();
  if (tkmahjongdrawtile_ack_msg_ == NULL) tkmahjongdrawtile_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck;
  return tkmahjongdrawtile_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck* MahJongLYGCAckMsg::release_tkmahjongdrawtile_ack_msg() {
  clear_has_tkmahjongdrawtile_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongDrawTileAck* temp = tkmahjongdrawtile_ack_msg_;
  tkmahjongdrawtile_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongTrustPlayAck tkmahjongtrustplay_ack_msg = 112;
inline bool MahJongLYGCAckMsg::has_tkmahjongtrustplay_ack_msg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongtrustplay_ack_msg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongtrustplay_ack_msg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongtrustplay_ack_msg() {
  if (tkmahjongtrustplay_ack_msg_ != NULL) tkmahjongtrustplay_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck::Clear();
  clear_has_tkmahjongtrustplay_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck& MahJongLYGCAckMsg::tkmahjongtrustplay_ack_msg() const {
  return tkmahjongtrustplay_ack_msg_ != NULL ? *tkmahjongtrustplay_ack_msg_ : *default_instance_->tkmahjongtrustplay_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck* MahJongLYGCAckMsg::mutable_tkmahjongtrustplay_ack_msg() {
  set_has_tkmahjongtrustplay_ack_msg();
  if (tkmahjongtrustplay_ack_msg_ == NULL) tkmahjongtrustplay_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck;
  return tkmahjongtrustplay_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck* MahJongLYGCAckMsg::release_tkmahjongtrustplay_ack_msg() {
  clear_has_tkmahjongtrustplay_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongTrustPlayAck* temp = tkmahjongtrustplay_ack_msg_;
  tkmahjongtrustplay_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongScoreChangeAck tkmahjongscorechange_ack_msg = 113;
inline bool MahJongLYGCAckMsg::has_tkmahjongscorechange_ack_msg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongscorechange_ack_msg() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongscorechange_ack_msg() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongscorechange_ack_msg() {
  if (tkmahjongscorechange_ack_msg_ != NULL) tkmahjongscorechange_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck::Clear();
  clear_has_tkmahjongscorechange_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck& MahJongLYGCAckMsg::tkmahjongscorechange_ack_msg() const {
  return tkmahjongscorechange_ack_msg_ != NULL ? *tkmahjongscorechange_ack_msg_ : *default_instance_->tkmahjongscorechange_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck* MahJongLYGCAckMsg::mutable_tkmahjongscorechange_ack_msg() {
  set_has_tkmahjongscorechange_ack_msg();
  if (tkmahjongscorechange_ack_msg_ == NULL) tkmahjongscorechange_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck;
  return tkmahjongscorechange_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck* MahJongLYGCAckMsg::release_tkmahjongscorechange_ack_msg() {
  clear_has_tkmahjongscorechange_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongScoreChangeAck* temp = tkmahjongscorechange_ack_msg_;
  tkmahjongscorechange_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongResultAck tkmahjongresult_ack_msg = 114;
inline bool MahJongLYGCAckMsg::has_tkmahjongresult_ack_msg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongresult_ack_msg() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongresult_ack_msg() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongresult_ack_msg() {
  if (tkmahjongresult_ack_msg_ != NULL) tkmahjongresult_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongResultAck::Clear();
  clear_has_tkmahjongresult_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongResultAck& MahJongLYGCAckMsg::tkmahjongresult_ack_msg() const {
  return tkmahjongresult_ack_msg_ != NULL ? *tkmahjongresult_ack_msg_ : *default_instance_->tkmahjongresult_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongResultAck* MahJongLYGCAckMsg::mutable_tkmahjongresult_ack_msg() {
  set_has_tkmahjongresult_ack_msg();
  if (tkmahjongresult_ack_msg_ == NULL) tkmahjongresult_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongResultAck;
  return tkmahjongresult_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongResultAck* MahJongLYGCAckMsg::release_tkmahjongresult_ack_msg() {
  clear_has_tkmahjongresult_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongResultAck* temp = tkmahjongresult_ack_msg_;
  tkmahjongresult_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongMessageAck tkmahjongmessage_ack_msg = 117;
inline bool MahJongLYGCAckMsg::has_tkmahjongmessage_ack_msg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongmessage_ack_msg() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongmessage_ack_msg() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongmessage_ack_msg() {
  if (tkmahjongmessage_ack_msg_ != NULL) tkmahjongmessage_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongMessageAck::Clear();
  clear_has_tkmahjongmessage_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongMessageAck& MahJongLYGCAckMsg::tkmahjongmessage_ack_msg() const {
  return tkmahjongmessage_ack_msg_ != NULL ? *tkmahjongmessage_ack_msg_ : *default_instance_->tkmahjongmessage_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongMessageAck* MahJongLYGCAckMsg::mutable_tkmahjongmessage_ack_msg() {
  set_has_tkmahjongmessage_ack_msg();
  if (tkmahjongmessage_ack_msg_ == NULL) tkmahjongmessage_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongMessageAck;
  return tkmahjongmessage_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongMessageAck* MahJongLYGCAckMsg::release_tkmahjongmessage_ack_msg() {
  clear_has_tkmahjongmessage_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongMessageAck* temp = tkmahjongmessage_ack_msg_;
  tkmahjongmessage_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongDissolutionAck tkmahjongdissolution_ack_msg = 118;
inline bool MahJongLYGCAckMsg::has_tkmahjongdissolution_ack_msg() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongdissolution_ack_msg() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongdissolution_ack_msg() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongdissolution_ack_msg() {
  if (tkmahjongdissolution_ack_msg_ != NULL) tkmahjongdissolution_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongDissolutionAck::Clear();
  clear_has_tkmahjongdissolution_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck& MahJongLYGCAckMsg::tkmahjongdissolution_ack_msg() const {
  return tkmahjongdissolution_ack_msg_ != NULL ? *tkmahjongdissolution_ack_msg_ : *default_instance_->tkmahjongdissolution_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck* MahJongLYGCAckMsg::mutable_tkmahjongdissolution_ack_msg() {
  set_has_tkmahjongdissolution_ack_msg();
  if (tkmahjongdissolution_ack_msg_ == NULL) tkmahjongdissolution_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck;
  return tkmahjongdissolution_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck* MahJongLYGCAckMsg::release_tkmahjongdissolution_ack_msg() {
  clear_has_tkmahjongdissolution_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongDissolutionAck* temp = tkmahjongdissolution_ack_msg_;
  tkmahjongdissolution_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahjongCallDataAck tkmahjongcalldata_ack_msg = 119;
inline bool MahJongLYGCAckMsg::has_tkmahjongcalldata_ack_msg() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongcalldata_ack_msg() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongcalldata_ack_msg() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongcalldata_ack_msg() {
  if (tkmahjongcalldata_ack_msg_ != NULL) tkmahjongcalldata_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongCallDataAck::Clear();
  clear_has_tkmahjongcalldata_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahjongCallDataAck& MahJongLYGCAckMsg::tkmahjongcalldata_ack_msg() const {
  return tkmahjongcalldata_ack_msg_ != NULL ? *tkmahjongcalldata_ack_msg_ : *default_instance_->tkmahjongcalldata_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongCallDataAck* MahJongLYGCAckMsg::mutable_tkmahjongcalldata_ack_msg() {
  set_has_tkmahjongcalldata_ack_msg();
  if (tkmahjongcalldata_ack_msg_ == NULL) tkmahjongcalldata_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahjongCallDataAck;
  return tkmahjongcalldata_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongCallDataAck* MahJongLYGCAckMsg::release_tkmahjongcalldata_ack_msg() {
  clear_has_tkmahjongcalldata_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahjongCallDataAck* temp = tkmahjongcalldata_ack_msg_;
  tkmahjongcalldata_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahjongBeginAnimalAck tkmahjongbeginanimal_ack_msg = 120;
inline bool MahJongLYGCAckMsg::has_tkmahjongbeginanimal_ack_msg() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongbeginanimal_ack_msg() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongbeginanimal_ack_msg() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongbeginanimal_ack_msg() {
  if (tkmahjongbeginanimal_ack_msg_ != NULL) tkmahjongbeginanimal_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck::Clear();
  clear_has_tkmahjongbeginanimal_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck& MahJongLYGCAckMsg::tkmahjongbeginanimal_ack_msg() const {
  return tkmahjongbeginanimal_ack_msg_ != NULL ? *tkmahjongbeginanimal_ack_msg_ : *default_instance_->tkmahjongbeginanimal_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck* MahJongLYGCAckMsg::mutable_tkmahjongbeginanimal_ack_msg() {
  set_has_tkmahjongbeginanimal_ack_msg();
  if (tkmahjongbeginanimal_ack_msg_ == NULL) tkmahjongbeginanimal_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck;
  return tkmahjongbeginanimal_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck* MahJongLYGCAckMsg::release_tkmahjongbeginanimal_ack_msg() {
  clear_has_tkmahjongbeginanimal_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahjongBeginAnimalAck* temp = tkmahjongbeginanimal_ack_msg_;
  tkmahjongbeginanimal_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahjongHandTilesAck tkmahjonghandtiles_ack_msg = 121;
inline bool MahJongLYGCAckMsg::has_tkmahjonghandtiles_ack_msg() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjonghandtiles_ack_msg() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjonghandtiles_ack_msg() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjonghandtiles_ack_msg() {
  if (tkmahjonghandtiles_ack_msg_ != NULL) tkmahjonghandtiles_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongHandTilesAck::Clear();
  clear_has_tkmahjonghandtiles_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck& MahJongLYGCAckMsg::tkmahjonghandtiles_ack_msg() const {
  return tkmahjonghandtiles_ack_msg_ != NULL ? *tkmahjonghandtiles_ack_msg_ : *default_instance_->tkmahjonghandtiles_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck* MahJongLYGCAckMsg::mutable_tkmahjonghandtiles_ack_msg() {
  set_has_tkmahjonghandtiles_ack_msg();
  if (tkmahjonghandtiles_ack_msg_ == NULL) tkmahjonghandtiles_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck;
  return tkmahjonghandtiles_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck* MahJongLYGCAckMsg::release_tkmahjonghandtiles_ack_msg() {
  clear_has_tkmahjonghandtiles_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahjongHandTilesAck* temp = tkmahjonghandtiles_ack_msg_;
  tkmahjonghandtiles_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahjongGenZhuangAck tkmahjonggenzhuang_ack_msg = 122;
inline bool MahJongLYGCAckMsg::has_tkmahjonggenzhuang_ack_msg() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjonggenzhuang_ack_msg() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjonggenzhuang_ack_msg() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjonggenzhuang_ack_msg() {
  if (tkmahjonggenzhuang_ack_msg_ != NULL) tkmahjonggenzhuang_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck::Clear();
  clear_has_tkmahjonggenzhuang_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck& MahJongLYGCAckMsg::tkmahjonggenzhuang_ack_msg() const {
  return tkmahjonggenzhuang_ack_msg_ != NULL ? *tkmahjonggenzhuang_ack_msg_ : *default_instance_->tkmahjonggenzhuang_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck* MahJongLYGCAckMsg::mutable_tkmahjonggenzhuang_ack_msg() {
  set_has_tkmahjonggenzhuang_ack_msg();
  if (tkmahjonggenzhuang_ack_msg_ == NULL) tkmahjonggenzhuang_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck;
  return tkmahjonggenzhuang_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck* MahJongLYGCAckMsg::release_tkmahjonggenzhuang_ack_msg() {
  clear_has_tkmahjonggenzhuang_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahjongGenZhuangAck* temp = tkmahjonggenzhuang_ack_msg_;
  tkmahjonggenzhuang_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahjongFanCiAck tkmahjongfanci_ack_msg = 123;
inline bool MahJongLYGCAckMsg::has_tkmahjongfanci_ack_msg() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongfanci_ack_msg() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongfanci_ack_msg() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongfanci_ack_msg() {
  if (tkmahjongfanci_ack_msg_ != NULL) tkmahjongfanci_ack_msg_->::cn::jj::service::msg::protocol::TKMahjongFanCiAck::Clear();
  clear_has_tkmahjongfanci_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahjongFanCiAck& MahJongLYGCAckMsg::tkmahjongfanci_ack_msg() const {
  return tkmahjongfanci_ack_msg_ != NULL ? *tkmahjongfanci_ack_msg_ : *default_instance_->tkmahjongfanci_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongFanCiAck* MahJongLYGCAckMsg::mutable_tkmahjongfanci_ack_msg() {
  set_has_tkmahjongfanci_ack_msg();
  if (tkmahjongfanci_ack_msg_ == NULL) tkmahjongfanci_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahjongFanCiAck;
  return tkmahjongfanci_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahjongFanCiAck* MahJongLYGCAckMsg::release_tkmahjongfanci_ack_msg() {
  clear_has_tkmahjongfanci_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahjongFanCiAck* temp = tkmahjongfanci_ack_msg_;
  tkmahjongfanci_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TKMahJongDebugLogAck tkmahjongdebuglog_ack_msg = 512;
inline bool MahJongLYGCAckMsg::has_tkmahjongdebuglog_ack_msg() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MahJongLYGCAckMsg::set_has_tkmahjongdebuglog_ack_msg() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MahJongLYGCAckMsg::clear_has_tkmahjongdebuglog_ack_msg() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MahJongLYGCAckMsg::clear_tkmahjongdebuglog_ack_msg() {
  if (tkmahjongdebuglog_ack_msg_ != NULL) tkmahjongdebuglog_ack_msg_->::cn::jj::service::msg::protocol::TKMahJongDebugLogAck::Clear();
  clear_has_tkmahjongdebuglog_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck& MahJongLYGCAckMsg::tkmahjongdebuglog_ack_msg() const {
  return tkmahjongdebuglog_ack_msg_ != NULL ? *tkmahjongdebuglog_ack_msg_ : *default_instance_->tkmahjongdebuglog_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck* MahJongLYGCAckMsg::mutable_tkmahjongdebuglog_ack_msg() {
  set_has_tkmahjongdebuglog_ack_msg();
  if (tkmahjongdebuglog_ack_msg_ == NULL) tkmahjongdebuglog_ack_msg_ = new ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck;
  return tkmahjongdebuglog_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck* MahJongLYGCAckMsg::release_tkmahjongdebuglog_ack_msg() {
  clear_has_tkmahjongdebuglog_ack_msg();
  ::cn::jj::service::msg::protocol::TKMahJongDebugLogAck* temp = tkmahjongdebuglog_ack_msg_;
  tkmahjongdebuglog_ack_msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TKMahjongFanCiAck

// optional int32 tile = 1;
inline bool TKMahjongFanCiAck::has_tile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKMahjongFanCiAck::set_has_tile() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKMahjongFanCiAck::clear_has_tile() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKMahjongFanCiAck::clear_tile() {
  tile_ = 0;
  clear_has_tile();
}
inline ::google::protobuf::int32 TKMahjongFanCiAck::tile() const {
  return tile_;
}
inline void TKMahjongFanCiAck::set_tile(::google::protobuf::int32 value) {
  set_has_tile();
  tile_ = value;
}

// repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
inline int TKMahjongFanCiAck::calldata_size() const {
  return calldata_.size();
}
inline void TKMahjongFanCiAck::clear_calldata() {
  calldata_.Clear();
}
inline const ::cn::jj::service::msg::protocol::TKMahJongCallData& TKMahjongFanCiAck::calldata(int index) const {
  return calldata_.Get(index);
}
inline ::cn::jj::service::msg::protocol::TKMahJongCallData* TKMahjongFanCiAck::mutable_calldata(int index) {
  return calldata_.Mutable(index);
}
inline ::cn::jj::service::msg::protocol::TKMahJongCallData* TKMahjongFanCiAck::add_calldata() {
  return calldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::TKMahJongCallData >&
TKMahjongFanCiAck::calldata() const {
  return calldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::TKMahJongCallData >*
TKMahjongFanCiAck::mutable_calldata() {
  return &calldata_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace msg
}  // namespace service
}  // namespace jj
}  // namespace cn

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TKMahjongLYGC_2eproto__INCLUDED
