// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TKMJStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cn {
namespace jj {
namespace service {
namespace msg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TKMahJongRequestReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongRequestReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongTrustPlayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongTrustPlayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongDissolutionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongDissolutionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongDissolutionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongDissolutionAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongGameBeginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongGameBeginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongPlaceAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongPlaceAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongOpenDoorAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongOpenDoorAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongActionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongActionAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongPengAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongPengAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongGangAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongGangAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongWinAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongWinAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongDiscardTileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongDiscardTileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongDrawTileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongDrawTileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongTrustPlayAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongTrustPlayAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongResultAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongResultAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongMessageAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongMessageAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongTileGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongTileGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallUnitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallUnitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongCallData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongCallData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongHandTiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongHandTiles_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahjongHandTilesAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahjongHandTilesAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongScoreChangeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongScoreChangeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahJongDebugLogAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahJongDebugLogAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahjongBeginAnimalAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahjongBeginAnimalAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahjongEndAnimalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahjongEndAnimalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahjongCallDataAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahjongCallDataAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMahjongGenZhuangAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMahjongGenZhuangAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TKMJStruct_2eproto() {
  protobuf_AddDesc_TKMJStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TKMJStruct.proto");
  GOOGLE_CHECK(file != NULL);
  TKMahJongRequestReq_descriptor_ = file->message_type(0);
  static const int TKMahJongRequestReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongRequestReq, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongRequestReq, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongRequestReq, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongRequestReq, tileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongRequestReq, traceid_),
  };
  TKMahJongRequestReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongRequestReq_descriptor_,
      TKMahJongRequestReq::default_instance_,
      TKMahJongRequestReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongRequestReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongRequestReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongRequestReq));
  TKMahJongTrustPlayReq_descriptor_ = file->message_type(1);
  static const int TKMahJongTrustPlayReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTrustPlayReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTrustPlayReq, type_),
  };
  TKMahJongTrustPlayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongTrustPlayReq_descriptor_,
      TKMahJongTrustPlayReq::default_instance_,
      TKMahJongTrustPlayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTrustPlayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTrustPlayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongTrustPlayReq));
  TKMahJongDissolutionReq_descriptor_ = file->message_type(2);
  static const int TKMahJongDissolutionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDissolutionReq, dissolutiontype_),
  };
  TKMahJongDissolutionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongDissolutionReq_descriptor_,
      TKMahJongDissolutionReq::default_instance_,
      TKMahJongDissolutionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDissolutionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDissolutionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongDissolutionReq));
  TKMahJongDissolutionAck_descriptor_ = file->message_type(3);
  static const int TKMahJongDissolutionAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDissolutionAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDissolutionAck, dissolutiontype_),
  };
  TKMahJongDissolutionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongDissolutionAck_descriptor_,
      TKMahJongDissolutionAck::default_instance_,
      TKMahJongDissolutionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDissolutionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDissolutionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongDissolutionAck));
  TKMahJongGameBeginAck_descriptor_ = file->message_type(4);
  static const int TKMahJongGameBeginAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGameBeginAck, tilecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGameBeginAck, svrversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGameBeginAck, scores_),
  };
  TKMahJongGameBeginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongGameBeginAck_descriptor_,
      TKMahJongGameBeginAck::default_instance_,
      TKMahJongGameBeginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGameBeginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGameBeginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongGameBeginAck));
  TKMahJongPlaceAck_descriptor_ = file->message_type(5);
  static const int TKMahJongPlaceAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPlaceAck, banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPlaceAck, roundwind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPlaceAck, lianzhuangtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPlaceAck, jsonruler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPlaceAck, micount_),
  };
  TKMahJongPlaceAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongPlaceAck_descriptor_,
      TKMahJongPlaceAck::default_instance_,
      TKMahJongPlaceAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPlaceAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPlaceAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongPlaceAck));
  TKMahJongOpenDoorAck_descriptor_ = file->message_type(6);
  static const int TKMahJongOpenDoorAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongOpenDoorAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongOpenDoorAck, tiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongOpenDoorAck, handstyle_),
  };
  TKMahJongOpenDoorAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongOpenDoorAck_descriptor_,
      TKMahJongOpenDoorAck::default_instance_,
      TKMahJongOpenDoorAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongOpenDoorAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongOpenDoorAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongOpenDoorAck));
  TKMahJongActionAck_descriptor_ = file->message_type(7);
  static const int TKMahJongActionAck_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, recommendtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, recommendtile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, bmusthu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, capped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, gangtiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, citiles_),
  };
  TKMahJongActionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongActionAck_descriptor_,
      TKMahJongActionAck::default_instance_,
      TKMahJongActionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongActionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongActionAck));
  TKMahJongPengAck_descriptor_ = file->message_type(8);
  static const int TKMahJongPengAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPengAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPengAck, discardseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPengAck, tileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPengAck, calldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPengAck, recommendtileid_),
  };
  TKMahJongPengAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongPengAck_descriptor_,
      TKMahJongPengAck::default_instance_,
      TKMahJongPengAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPengAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongPengAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongPengAck));
  TKMahJongGangAck_descriptor_ = file->message_type(9);
  static const int TKMahJongGangAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGangAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGangAck, discardseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGangAck, gangtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGangAck, tileid_),
  };
  TKMahJongGangAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongGangAck_descriptor_,
      TKMahJongGangAck::default_instance_,
      TKMahJongGangAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGangAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongGangAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongGangAck));
  TKMahJongWinAck_descriptor_ = file->message_type(10);
  static const int TKMahJongWinAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongWinAck, winseats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongWinAck, winseatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongWinAck, paoseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongWinAck, wintileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongWinAck, winmode_),
  };
  TKMahJongWinAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongWinAck_descriptor_,
      TKMahJongWinAck::default_instance_,
      TKMahJongWinAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongWinAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongWinAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongWinAck));
  TKMahJongDiscardTileAck_descriptor_ = file->message_type(11);
  static const int TKMahJongDiscardTileAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDiscardTileAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDiscardTileAck, tileid_),
  };
  TKMahJongDiscardTileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongDiscardTileAck_descriptor_,
      TKMahJongDiscardTileAck::default_instance_,
      TKMahJongDiscardTileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDiscardTileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDiscardTileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongDiscardTileAck));
  TKMahJongDrawTileAck_descriptor_ = file->message_type(12);
  static const int TKMahJongDrawTileAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDrawTileAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDrawTileAck, drawtiletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDrawTileAck, tileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDrawTileAck, recommendtileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDrawTileAck, calldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDrawTileAck, uitype_),
  };
  TKMahJongDrawTileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongDrawTileAck_descriptor_,
      TKMahJongDrawTileAck::default_instance_,
      TKMahJongDrawTileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDrawTileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDrawTileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongDrawTileAck));
  TKMahJongTrustPlayAck_descriptor_ = file->message_type(13);
  static const int TKMahJongTrustPlayAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTrustPlayAck, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTrustPlayAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTrustPlayAck, seat_),
  };
  TKMahJongTrustPlayAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongTrustPlayAck_descriptor_,
      TKMahJongTrustPlayAck::default_instance_,
      TKMahJongTrustPlayAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTrustPlayAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTrustPlayAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongTrustPlayAck));
  TKMahJongResultAck_descriptor_ = file->message_type(14);
  static const int TKMahJongResultAck_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, playerhandtiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, showtotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, winseats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, winmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, konscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, huscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, micount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, citileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, zhuangseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, wintileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, paoseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, scorebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, curround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, genzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, paociseat_),
  };
  TKMahJongResultAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongResultAck_descriptor_,
      TKMahJongResultAck::default_instance_,
      TKMahJongResultAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongResultAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongResultAck));
  TKMahJongMessageAck_descriptor_ = file->message_type(15);
  static const int TKMahJongMessageAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongMessageAck, messagetype_),
  };
  TKMahJongMessageAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongMessageAck_descriptor_,
      TKMahJongMessageAck::default_instance_,
      TKMahJongMessageAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongMessageAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongMessageAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongMessageAck));
  TKMahJongTileGroup_descriptor_ = file->message_type(16);
  static const int TKMahJongTileGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTileGroup, grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTileGroup, groupfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTileGroup, grouptileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTileGroup, groupchitileid_),
  };
  TKMahJongTileGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongTileGroup_descriptor_,
      TKMahJongTileGroup::default_instance_,
      TKMahJongTileGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTileGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongTileGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongTileGroup));
  CallUnitData_descriptor_ = file->message_type(17);
  static const int CallUnitData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallUnitData, tile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallUnitData, fan_),
  };
  CallUnitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallUnitData_descriptor_,
      CallUnitData::default_instance_,
      CallUnitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallUnitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallUnitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallUnitData));
  TKMahJongCallData_descriptor_ = file->message_type(18);
  static const int TKMahJongCallData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongCallData, tile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongCallData, hutilesdetail_),
  };
  TKMahJongCallData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongCallData_descriptor_,
      TKMahJongCallData::default_instance_,
      TKMahJongCallData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongCallData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongCallData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongCallData));
  TKMahJongHandTiles_descriptor_ = file->message_type(19);
  static const int TKMahJongHandTiles_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongHandTiles, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongHandTiles, anhandtile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongHandTiles, tilegroup_),
  };
  TKMahJongHandTiles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongHandTiles_descriptor_,
      TKMahJongHandTiles::default_instance_,
      TKMahJongHandTiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongHandTiles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongHandTiles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongHandTiles));
  TKMahjongHandTilesAck_descriptor_ = file->message_type(20);
  static const int TKMahjongHandTilesAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongHandTilesAck, playerhandtiles_),
  };
  TKMahjongHandTilesAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahjongHandTilesAck_descriptor_,
      TKMahjongHandTilesAck::default_instance_,
      TKMahjongHandTilesAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongHandTilesAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongHandTilesAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahjongHandTilesAck));
  TKMahJongScoreChangeAck_descriptor_ = file->message_type(21);
  static const int TKMahJongScoreChangeAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongScoreChangeAck, incremental_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongScoreChangeAck, showincremental_),
  };
  TKMahJongScoreChangeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongScoreChangeAck_descriptor_,
      TKMahJongScoreChangeAck::default_instance_,
      TKMahJongScoreChangeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongScoreChangeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongScoreChangeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongScoreChangeAck));
  TKMahJongDebugLogAck_descriptor_ = file->message_type(22);
  static const int TKMahJongDebugLogAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDebugLogAck, msg_),
  };
  TKMahJongDebugLogAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahJongDebugLogAck_descriptor_,
      TKMahJongDebugLogAck::default_instance_,
      TKMahJongDebugLogAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDebugLogAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahJongDebugLogAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahJongDebugLogAck));
  TKMahjongBeginAnimalAck_descriptor_ = file->message_type(23);
  static const int TKMahjongBeginAnimalAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongBeginAnimalAck, requestid_),
  };
  TKMahjongBeginAnimalAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahjongBeginAnimalAck_descriptor_,
      TKMahjongBeginAnimalAck::default_instance_,
      TKMahjongBeginAnimalAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongBeginAnimalAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongBeginAnimalAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahjongBeginAnimalAck));
  TKMahjongEndAnimalReq_descriptor_ = file->message_type(24);
  static const int TKMahjongEndAnimalReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongEndAnimalReq, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongEndAnimalReq, requestid_),
  };
  TKMahjongEndAnimalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahjongEndAnimalReq_descriptor_,
      TKMahjongEndAnimalReq::default_instance_,
      TKMahjongEndAnimalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongEndAnimalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongEndAnimalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahjongEndAnimalReq));
  TKMahjongCallDataAck_descriptor_ = file->message_type(25);
  static const int TKMahjongCallDataAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongCallDataAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongCallDataAck, calldata_),
  };
  TKMahjongCallDataAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahjongCallDataAck_descriptor_,
      TKMahjongCallDataAck::default_instance_,
      TKMahjongCallDataAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongCallDataAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongCallDataAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahjongCallDataAck));
  TKMahjongGenZhuangAck_descriptor_ = file->message_type(26);
  static const int TKMahjongGenZhuangAck_offsets_[1] = {
  };
  TKMahjongGenZhuangAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMahjongGenZhuangAck_descriptor_,
      TKMahjongGenZhuangAck::default_instance_,
      TKMahjongGenZhuangAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongGenZhuangAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMahjongGenZhuangAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMahjongGenZhuangAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TKMJStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongRequestReq_descriptor_, &TKMahJongRequestReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongTrustPlayReq_descriptor_, &TKMahJongTrustPlayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongDissolutionReq_descriptor_, &TKMahJongDissolutionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongDissolutionAck_descriptor_, &TKMahJongDissolutionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongGameBeginAck_descriptor_, &TKMahJongGameBeginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongPlaceAck_descriptor_, &TKMahJongPlaceAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongOpenDoorAck_descriptor_, &TKMahJongOpenDoorAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongActionAck_descriptor_, &TKMahJongActionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongPengAck_descriptor_, &TKMahJongPengAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongGangAck_descriptor_, &TKMahJongGangAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongWinAck_descriptor_, &TKMahJongWinAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongDiscardTileAck_descriptor_, &TKMahJongDiscardTileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongDrawTileAck_descriptor_, &TKMahJongDrawTileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongTrustPlayAck_descriptor_, &TKMahJongTrustPlayAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongResultAck_descriptor_, &TKMahJongResultAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongMessageAck_descriptor_, &TKMahJongMessageAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongTileGroup_descriptor_, &TKMahJongTileGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallUnitData_descriptor_, &CallUnitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongCallData_descriptor_, &TKMahJongCallData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongHandTiles_descriptor_, &TKMahJongHandTiles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahjongHandTilesAck_descriptor_, &TKMahjongHandTilesAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongScoreChangeAck_descriptor_, &TKMahJongScoreChangeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahJongDebugLogAck_descriptor_, &TKMahJongDebugLogAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahjongBeginAnimalAck_descriptor_, &TKMahjongBeginAnimalAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahjongEndAnimalReq_descriptor_, &TKMahjongEndAnimalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahjongCallDataAck_descriptor_, &TKMahjongCallDataAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMahjongGenZhuangAck_descriptor_, &TKMahjongGenZhuangAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TKMJStruct_2eproto() {
  delete TKMahJongRequestReq::default_instance_;
  delete TKMahJongRequestReq_reflection_;
  delete TKMahJongTrustPlayReq::default_instance_;
  delete TKMahJongTrustPlayReq_reflection_;
  delete TKMahJongDissolutionReq::default_instance_;
  delete TKMahJongDissolutionReq_reflection_;
  delete TKMahJongDissolutionAck::default_instance_;
  delete TKMahJongDissolutionAck_reflection_;
  delete TKMahJongGameBeginAck::default_instance_;
  delete TKMahJongGameBeginAck_reflection_;
  delete TKMahJongPlaceAck::default_instance_;
  delete TKMahJongPlaceAck_reflection_;
  delete TKMahJongOpenDoorAck::default_instance_;
  delete TKMahJongOpenDoorAck_reflection_;
  delete TKMahJongActionAck::default_instance_;
  delete TKMahJongActionAck_reflection_;
  delete TKMahJongPengAck::default_instance_;
  delete TKMahJongPengAck_reflection_;
  delete TKMahJongGangAck::default_instance_;
  delete TKMahJongGangAck_reflection_;
  delete TKMahJongWinAck::default_instance_;
  delete TKMahJongWinAck_reflection_;
  delete TKMahJongDiscardTileAck::default_instance_;
  delete TKMahJongDiscardTileAck_reflection_;
  delete TKMahJongDrawTileAck::default_instance_;
  delete TKMahJongDrawTileAck_reflection_;
  delete TKMahJongTrustPlayAck::default_instance_;
  delete TKMahJongTrustPlayAck_reflection_;
  delete TKMahJongResultAck::default_instance_;
  delete TKMahJongResultAck_reflection_;
  delete TKMahJongMessageAck::default_instance_;
  delete TKMahJongMessageAck_reflection_;
  delete TKMahJongTileGroup::default_instance_;
  delete TKMahJongTileGroup_reflection_;
  delete CallUnitData::default_instance_;
  delete CallUnitData_reflection_;
  delete TKMahJongCallData::default_instance_;
  delete TKMahJongCallData_reflection_;
  delete TKMahJongHandTiles::default_instance_;
  delete TKMahJongHandTiles_reflection_;
  delete TKMahjongHandTilesAck::default_instance_;
  delete TKMahjongHandTilesAck_reflection_;
  delete TKMahJongScoreChangeAck::default_instance_;
  delete TKMahJongScoreChangeAck_reflection_;
  delete TKMahJongDebugLogAck::default_instance_;
  delete TKMahJongDebugLogAck_reflection_;
  delete TKMahjongBeginAnimalAck::default_instance_;
  delete TKMahjongBeginAnimalAck_reflection_;
  delete TKMahjongEndAnimalReq::default_instance_;
  delete TKMahjongEndAnimalReq_reflection_;
  delete TKMahjongCallDataAck::default_instance_;
  delete TKMahjongCallDataAck_reflection_;
  delete TKMahjongGenZhuangAck::default_instance_;
  delete TKMahjongGenZhuangAck_reflection_;
}

void protobuf_AddDesc_TKMJStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TKMJStruct.proto\022\032cn.jj.service.msg.pr"
    "otocol\"l\n\023TKMahJongRequestReq\022\014\n\004seat\030\001 "
    "\002(\r\022\023\n\013requesttype\030\002 \002(\r\022\021\n\trequestid\030\003 "
    "\002(\r\022\016\n\006tileid\030\004 \001(\005\022\017\n\007traceid\030\005 \001(\t\"5\n\025"
    "TKMahJongTrustPlayReq\022\016\n\006userid\030\001 \002(\r\022\014\n"
    "\004type\030\002 \002(\r\"2\n\027TKMahJongDissolutionReq\022\027"
    "\n\017dissolutiontype\030\001 \002(\r\"@\n\027TKMahJongDiss"
    "olutionAck\022\014\n\004seat\030\001 \002(\r\022\027\n\017dissolutiont"
    "ype\030\002 \003(\r\"N\n\025TKMahJongGameBeginAck\022\021\n\tti"
    "lecount\030\001 \002(\005\022\022\n\nsvrVersion\030\002 \001(\t\022\016\n\006sco"
    "res\030\003 \003(\005\"r\n\021TKMahJongPlaceAck\022\016\n\006banker"
    "\030\001 \002(\r\022\021\n\troundwind\030\002 \002(\r\022\026\n\016lianzhuangt"
    "ime\030\003 \001(\r\022\021\n\tjsonruler\030\004 \001(\t\022\017\n\007micount\030"
    "\005 \003(\r\"F\n\024TKMahJongOpenDoorAck\022\014\n\004seat\030\001 "
    "\002(\r\022\r\n\005tiles\030\002 \003(\005\022\021\n\thandstyle\030\003 \001(\005\"\307\001"
    "\n\022TKMahJongActionAck\022\014\n\004seat\030\001 \002(\r\022\023\n\013re"
    "questtype\030\002 \002(\r\022\021\n\trequestid\030\003 \002(\r\022\031\n\rre"
    "commendtype\030\004 \001(\005:\002-1\022\030\n\rrecommendtile\030\005"
    " \001(\005:\0010\022\017\n\007bmusthu\030\006 \001(\005\022\021\n\006capped\030\007 \001(\005"
    ":\0010\022\021\n\tgangtiles\030\010 \003(\005\022\017\n\007citiles\030\t \003(\005\""
    "\242\001\n\020TKMahJongPengAck\022\014\n\004seat\030\001 \002(\r\022\023\n\013di"
    "scardSeat\030\002 \002(\r\022\016\n\006tileid\030\003 \002(\005\022\?\n\010calld"
    "ata\030\004 \003(\0132-.cn.jj.service.msg.protocol.T"
    "KMahJongCallData\022\032\n\017recommendtileid\030\005 \001("
    "\005:\0010\"W\n\020TKMahJongGangAck\022\014\n\004seat\030\001 \002(\r\022\023"
    "\n\013discardSeat\030\002 \002(\r\022\020\n\010gangtype\030\003 \002(\r\022\016\n"
    "\006tileid\030\004 \002(\005\"n\n\017TKMahJongWinAck\022\020\n\010wins"
    "eats\030\001 \003(\r\022\024\n\014winseatcount\030\002 \002(\r\022\017\n\007paos"
    "eat\030\003 \002(\005\022\021\n\twintileid\030\004 \002(\005\022\017\n\007winmode\030"
    "\005 \002(\005\"7\n\027TKMahJongDiscardTileAck\022\014\n\004seat"
    "\030\001 \002(\r\022\016\n\006tileid\030\002 \002(\005\"\267\001\n\024TKMahJongDraw"
    "TileAck\022\014\n\004seat\030\001 \002(\r\022\024\n\014drawtiletype\030\002 "
    "\002(\r\022\016\n\006tileid\030\003 \002(\005\022\032\n\017recommendtileid\030\004"
    " \001(\005:\0010\022\?\n\010calldata\030\005 \003(\0132-.cn.jj.servic"
    "e.msg.protocol.TKMahJongCallData\022\016\n\006uity"
    "pe\030\006 \001(\005\"C\n\025TKMahJongTrustPlayAck\022\016\n\006use"
    "rid\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\014\n\004seat\030\003 \001(\r\"\365\002"
    "\n\022TKMahJongResultAck\022\022\n\ntotalscore\030\001 \003(\005"
    "\022G\n\017playerhandtiles\030\002 \003(\0132..cn.jj.servic"
    "e.msg.protocol.TKMahJongHandTiles\022\026\n\016sho"
    "wtotalscore\030\003 \003(\005\022\020\n\010winseats\030\004 \003(\005\022\017\n\007w"
    "inmode\030\005 \001(\005\022\020\n\010konscore\030\006 \003(\005\022\017\n\007huscor"
    "e\030\007 \003(\005\022\017\n\007micount\030\010 \003(\005\022\020\n\010citileid\030\t \001"
    "(\005\022\022\n\nzhuangseat\030\n \001(\005\022\021\n\twintileid\030\013 \001("
    "\005\022\017\n\007paoseat\030\014 \001(\005\022\021\n\tscorebase\030\r \001(\005\022\020\n"
    "\010curround\030\016 \001(\005\022\021\n\tgenzhuang\030\017 \001(\005\022\021\n\tpa"
    "ociseat\030\020 \001(\005\"*\n\023TKMahJongMessageAck\022\023\n\013"
    "messagetype\030\001 \002(\005\"g\n\022TKMahJongTileGroup\022"
    "\021\n\tgrouptype\030\001 \002(\005\022\021\n\tgroupfrom\030\002 \002(\005\022\023\n"
    "\013grouptileid\030\003 \002(\005\022\026\n\016groupchitileid\030\004 \001"
    "(\005\")\n\014CallUnitData\022\014\n\004tile\030\001 \002(\005\022\013\n\003fan\030"
    "\002 \002(\r\"b\n\021TKMahJongCallData\022\014\n\004tile\030\001 \002(\005"
    "\022\?\n\rhutilesdetail\030\003 \003(\0132(.cn.jj.service."
    "msg.protocol.CallUnitData\"y\n\022TKMahJongHa"
    "ndTiles\022\014\n\004seat\030\001 \002(\r\022\022\n\nanhandtile\030\002 \003("
    "\005\022A\n\ttilegroup\030\003 \003(\0132..cn.jj.service.msg"
    ".protocol.TKMahJongTileGroup\"`\n\025TKMahjon"
    "gHandTilesAck\022G\n\017playerhandtiles\030\001 \003(\0132."
    ".cn.jj.service.msg.protocol.TKMahJongHan"
    "dTiles\"G\n\027TKMahJongScoreChangeAck\022\023\n\013inc"
    "remental\030\001 \003(\005\022\027\n\017showincremental\030\002 \003(\005\""
    "#\n\024TKMahJongDebugLogAck\022\013\n\003msg\030\001 \001(\t\"/\n\027"
    "TKMahjongBeginAnimalAck\022\024\n\trequestid\030\001 \001"
    "(\005:\0010\";\n\025TKMahjongEndAnimalReq\022\014\n\004seat\030\001"
    " \002(\005\022\024\n\trequestid\030\002 \001(\005:\0010\"e\n\024TKMahjongC"
    "allDataAck\022\014\n\004seat\030\001 \001(\005\022\?\n\010calldata\030\002 \003"
    "(\0132-.cn.jj.service.msg.protocol.TKMahJon"
    "gCallData\"\027\n\025TKMahjongGenZhuangAck", 2714);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TKMJStruct.proto", &protobuf_RegisterTypes);
  TKMahJongRequestReq::default_instance_ = new TKMahJongRequestReq();
  TKMahJongTrustPlayReq::default_instance_ = new TKMahJongTrustPlayReq();
  TKMahJongDissolutionReq::default_instance_ = new TKMahJongDissolutionReq();
  TKMahJongDissolutionAck::default_instance_ = new TKMahJongDissolutionAck();
  TKMahJongGameBeginAck::default_instance_ = new TKMahJongGameBeginAck();
  TKMahJongPlaceAck::default_instance_ = new TKMahJongPlaceAck();
  TKMahJongOpenDoorAck::default_instance_ = new TKMahJongOpenDoorAck();
  TKMahJongActionAck::default_instance_ = new TKMahJongActionAck();
  TKMahJongPengAck::default_instance_ = new TKMahJongPengAck();
  TKMahJongGangAck::default_instance_ = new TKMahJongGangAck();
  TKMahJongWinAck::default_instance_ = new TKMahJongWinAck();
  TKMahJongDiscardTileAck::default_instance_ = new TKMahJongDiscardTileAck();
  TKMahJongDrawTileAck::default_instance_ = new TKMahJongDrawTileAck();
  TKMahJongTrustPlayAck::default_instance_ = new TKMahJongTrustPlayAck();
  TKMahJongResultAck::default_instance_ = new TKMahJongResultAck();
  TKMahJongMessageAck::default_instance_ = new TKMahJongMessageAck();
  TKMahJongTileGroup::default_instance_ = new TKMahJongTileGroup();
  CallUnitData::default_instance_ = new CallUnitData();
  TKMahJongCallData::default_instance_ = new TKMahJongCallData();
  TKMahJongHandTiles::default_instance_ = new TKMahJongHandTiles();
  TKMahjongHandTilesAck::default_instance_ = new TKMahjongHandTilesAck();
  TKMahJongScoreChangeAck::default_instance_ = new TKMahJongScoreChangeAck();
  TKMahJongDebugLogAck::default_instance_ = new TKMahJongDebugLogAck();
  TKMahjongBeginAnimalAck::default_instance_ = new TKMahjongBeginAnimalAck();
  TKMahjongEndAnimalReq::default_instance_ = new TKMahjongEndAnimalReq();
  TKMahjongCallDataAck::default_instance_ = new TKMahjongCallDataAck();
  TKMahjongGenZhuangAck::default_instance_ = new TKMahjongGenZhuangAck();
  TKMahJongRequestReq::default_instance_->InitAsDefaultInstance();
  TKMahJongTrustPlayReq::default_instance_->InitAsDefaultInstance();
  TKMahJongDissolutionReq::default_instance_->InitAsDefaultInstance();
  TKMahJongDissolutionAck::default_instance_->InitAsDefaultInstance();
  TKMahJongGameBeginAck::default_instance_->InitAsDefaultInstance();
  TKMahJongPlaceAck::default_instance_->InitAsDefaultInstance();
  TKMahJongOpenDoorAck::default_instance_->InitAsDefaultInstance();
  TKMahJongActionAck::default_instance_->InitAsDefaultInstance();
  TKMahJongPengAck::default_instance_->InitAsDefaultInstance();
  TKMahJongGangAck::default_instance_->InitAsDefaultInstance();
  TKMahJongWinAck::default_instance_->InitAsDefaultInstance();
  TKMahJongDiscardTileAck::default_instance_->InitAsDefaultInstance();
  TKMahJongDrawTileAck::default_instance_->InitAsDefaultInstance();
  TKMahJongTrustPlayAck::default_instance_->InitAsDefaultInstance();
  TKMahJongResultAck::default_instance_->InitAsDefaultInstance();
  TKMahJongMessageAck::default_instance_->InitAsDefaultInstance();
  TKMahJongTileGroup::default_instance_->InitAsDefaultInstance();
  CallUnitData::default_instance_->InitAsDefaultInstance();
  TKMahJongCallData::default_instance_->InitAsDefaultInstance();
  TKMahJongHandTiles::default_instance_->InitAsDefaultInstance();
  TKMahjongHandTilesAck::default_instance_->InitAsDefaultInstance();
  TKMahJongScoreChangeAck::default_instance_->InitAsDefaultInstance();
  TKMahJongDebugLogAck::default_instance_->InitAsDefaultInstance();
  TKMahjongBeginAnimalAck::default_instance_->InitAsDefaultInstance();
  TKMahjongEndAnimalReq::default_instance_->InitAsDefaultInstance();
  TKMahjongCallDataAck::default_instance_->InitAsDefaultInstance();
  TKMahjongGenZhuangAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TKMJStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TKMJStruct_2eproto {
  StaticDescriptorInitializer_TKMJStruct_2eproto() {
    protobuf_AddDesc_TKMJStruct_2eproto();
  }
} static_descriptor_initializer_TKMJStruct_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongRequestReq::kSeatFieldNumber;
const int TKMahJongRequestReq::kRequesttypeFieldNumber;
const int TKMahJongRequestReq::kRequestidFieldNumber;
const int TKMahJongRequestReq::kTileidFieldNumber;
const int TKMahJongRequestReq::kTraceidFieldNumber;
#endif  // !_MSC_VER

TKMahJongRequestReq::TKMahJongRequestReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongRequestReq::InitAsDefaultInstance() {
}

TKMahJongRequestReq::TKMahJongRequestReq(const TKMahJongRequestReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongRequestReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  requesttype_ = 0u;
  requestid_ = 0u;
  tileid_ = 0;
  traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongRequestReq::~TKMahJongRequestReq() {
  SharedDtor();
}

void TKMahJongRequestReq::SharedDtor() {
  if (traceid_ != &::google::protobuf::internal::kEmptyString) {
    delete traceid_;
  }
  if (this != default_instance_) {
  }
}

void TKMahJongRequestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongRequestReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongRequestReq_descriptor_;
}

const TKMahJongRequestReq& TKMahJongRequestReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongRequestReq* TKMahJongRequestReq::default_instance_ = NULL;

TKMahJongRequestReq* TKMahJongRequestReq::New() const {
  return new TKMahJongRequestReq;
}

void TKMahJongRequestReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
    requesttype_ = 0u;
    requestid_ = 0u;
    tileid_ = 0;
    if (has_traceid()) {
      if (traceid_ != &::google::protobuf::internal::kEmptyString) {
        traceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongRequestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requesttype;
        break;
      }
      
      // required uint32 requesttype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requesttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestid;
        break;
      }
      
      // required uint32 requestid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tileid;
        break;
      }
      
      // optional int32 tileid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileid_)));
          set_has_tileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_traceid;
        break;
      }
      
      // optional string traceid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->traceid().data(), this->traceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongRequestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }
  
  // required uint32 requesttype = 2;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->requesttype(), output);
  }
  
  // required uint32 requestid = 3;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->requestid(), output);
  }
  
  // optional int32 tileid = 4;
  if (has_tileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tileid(), output);
  }
  
  // optional string traceid = 5;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traceid().data(), this->traceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->traceid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongRequestReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }
  
  // required uint32 requesttype = 2;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->requesttype(), target);
  }
  
  // required uint32 requestid = 3;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->requestid(), target);
  }
  
  // optional int32 tileid = 4;
  if (has_tileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tileid(), target);
  }
  
  // optional string traceid = 5;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traceid().data(), this->traceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->traceid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongRequestReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
    // required uint32 requesttype = 2;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requesttype());
    }
    
    // required uint32 requestid = 3;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }
    
    // optional int32 tileid = 4;
    if (has_tileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tileid());
    }
    
    // optional string traceid = 5;
    if (has_traceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traceid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongRequestReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongRequestReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongRequestReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongRequestReq::MergeFrom(const TKMahJongRequestReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_tileid()) {
      set_tileid(from.tileid());
    }
    if (from.has_traceid()) {
      set_traceid(from.traceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongRequestReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongRequestReq::CopyFrom(const TKMahJongRequestReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongRequestReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void TKMahJongRequestReq::Swap(TKMahJongRequestReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(requesttype_, other->requesttype_);
    std::swap(requestid_, other->requestid_);
    std::swap(tileid_, other->tileid_);
    std::swap(traceid_, other->traceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongRequestReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongRequestReq_descriptor_;
  metadata.reflection = TKMahJongRequestReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongTrustPlayReq::kUseridFieldNumber;
const int TKMahJongTrustPlayReq::kTypeFieldNumber;
#endif  // !_MSC_VER

TKMahJongTrustPlayReq::TKMahJongTrustPlayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongTrustPlayReq::InitAsDefaultInstance() {
}

TKMahJongTrustPlayReq::TKMahJongTrustPlayReq(const TKMahJongTrustPlayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongTrustPlayReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongTrustPlayReq::~TKMahJongTrustPlayReq() {
  SharedDtor();
}

void TKMahJongTrustPlayReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongTrustPlayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongTrustPlayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongTrustPlayReq_descriptor_;
}

const TKMahJongTrustPlayReq& TKMahJongTrustPlayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongTrustPlayReq* TKMahJongTrustPlayReq::default_instance_ = NULL;

TKMahJongTrustPlayReq* TKMahJongTrustPlayReq::New() const {
  return new TKMahJongTrustPlayReq;
}

void TKMahJongTrustPlayReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongTrustPlayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongTrustPlayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongTrustPlayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongTrustPlayReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongTrustPlayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongTrustPlayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongTrustPlayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongTrustPlayReq::MergeFrom(const TKMahJongTrustPlayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongTrustPlayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongTrustPlayReq::CopyFrom(const TKMahJongTrustPlayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongTrustPlayReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TKMahJongTrustPlayReq::Swap(TKMahJongTrustPlayReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongTrustPlayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongTrustPlayReq_descriptor_;
  metadata.reflection = TKMahJongTrustPlayReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongDissolutionReq::kDissolutiontypeFieldNumber;
#endif  // !_MSC_VER

TKMahJongDissolutionReq::TKMahJongDissolutionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongDissolutionReq::InitAsDefaultInstance() {
}

TKMahJongDissolutionReq::TKMahJongDissolutionReq(const TKMahJongDissolutionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongDissolutionReq::SharedCtor() {
  _cached_size_ = 0;
  dissolutiontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongDissolutionReq::~TKMahJongDissolutionReq() {
  SharedDtor();
}

void TKMahJongDissolutionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongDissolutionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongDissolutionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongDissolutionReq_descriptor_;
}

const TKMahJongDissolutionReq& TKMahJongDissolutionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongDissolutionReq* TKMahJongDissolutionReq::default_instance_ = NULL;

TKMahJongDissolutionReq* TKMahJongDissolutionReq::New() const {
  return new TKMahJongDissolutionReq;
}

void TKMahJongDissolutionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dissolutiontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongDissolutionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dissolutiontype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dissolutiontype_)));
          set_has_dissolutiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongDissolutionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dissolutiontype = 1;
  if (has_dissolutiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dissolutiontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongDissolutionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dissolutiontype = 1;
  if (has_dissolutiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dissolutiontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongDissolutionReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dissolutiontype = 1;
    if (has_dissolutiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dissolutiontype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongDissolutionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongDissolutionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongDissolutionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongDissolutionReq::MergeFrom(const TKMahJongDissolutionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dissolutiontype()) {
      set_dissolutiontype(from.dissolutiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongDissolutionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongDissolutionReq::CopyFrom(const TKMahJongDissolutionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongDissolutionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TKMahJongDissolutionReq::Swap(TKMahJongDissolutionReq* other) {
  if (other != this) {
    std::swap(dissolutiontype_, other->dissolutiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongDissolutionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongDissolutionReq_descriptor_;
  metadata.reflection = TKMahJongDissolutionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongDissolutionAck::kSeatFieldNumber;
const int TKMahJongDissolutionAck::kDissolutiontypeFieldNumber;
#endif  // !_MSC_VER

TKMahJongDissolutionAck::TKMahJongDissolutionAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongDissolutionAck::InitAsDefaultInstance() {
}

TKMahJongDissolutionAck::TKMahJongDissolutionAck(const TKMahJongDissolutionAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongDissolutionAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongDissolutionAck::~TKMahJongDissolutionAck() {
  SharedDtor();
}

void TKMahJongDissolutionAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongDissolutionAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongDissolutionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongDissolutionAck_descriptor_;
}

const TKMahJongDissolutionAck& TKMahJongDissolutionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongDissolutionAck* TKMahJongDissolutionAck::default_instance_ = NULL;

TKMahJongDissolutionAck* TKMahJongDissolutionAck::New() const {
  return new TKMahJongDissolutionAck;
}

void TKMahJongDissolutionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
  }
  dissolutiontype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongDissolutionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dissolutiontype;
        break;
      }
      
      // repeated uint32 dissolutiontype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolutiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_dissolutiontype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dissolutiontype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dissolutiontype;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongDissolutionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }
  
  // repeated uint32 dissolutiontype = 2;
  for (int i = 0; i < this->dissolutiontype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->dissolutiontype(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongDissolutionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }
  
  // repeated uint32 dissolutiontype = 2;
  for (int i = 0; i < this->dissolutiontype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->dissolutiontype(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongDissolutionAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
  }
  // repeated uint32 dissolutiontype = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dissolutiontype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dissolutiontype(i));
    }
    total_size += 1 * this->dissolutiontype_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongDissolutionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongDissolutionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongDissolutionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongDissolutionAck::MergeFrom(const TKMahJongDissolutionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  dissolutiontype_.MergeFrom(from.dissolutiontype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongDissolutionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongDissolutionAck::CopyFrom(const TKMahJongDissolutionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongDissolutionAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TKMahJongDissolutionAck::Swap(TKMahJongDissolutionAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    dissolutiontype_.Swap(&other->dissolutiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongDissolutionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongDissolutionAck_descriptor_;
  metadata.reflection = TKMahJongDissolutionAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongGameBeginAck::kTilecountFieldNumber;
const int TKMahJongGameBeginAck::kSvrVersionFieldNumber;
const int TKMahJongGameBeginAck::kScoresFieldNumber;
#endif  // !_MSC_VER

TKMahJongGameBeginAck::TKMahJongGameBeginAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongGameBeginAck::InitAsDefaultInstance() {
}

TKMahJongGameBeginAck::TKMahJongGameBeginAck(const TKMahJongGameBeginAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongGameBeginAck::SharedCtor() {
  _cached_size_ = 0;
  tilecount_ = 0;
  svrversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongGameBeginAck::~TKMahJongGameBeginAck() {
  SharedDtor();
}

void TKMahJongGameBeginAck::SharedDtor() {
  if (svrversion_ != &::google::protobuf::internal::kEmptyString) {
    delete svrversion_;
  }
  if (this != default_instance_) {
  }
}

void TKMahJongGameBeginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongGameBeginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongGameBeginAck_descriptor_;
}

const TKMahJongGameBeginAck& TKMahJongGameBeginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongGameBeginAck* TKMahJongGameBeginAck::default_instance_ = NULL;

TKMahJongGameBeginAck* TKMahJongGameBeginAck::New() const {
  return new TKMahJongGameBeginAck;
}

void TKMahJongGameBeginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tilecount_ = 0;
    if (has_svrversion()) {
      if (svrversion_ != &::google::protobuf::internal::kEmptyString) {
        svrversion_->clear();
      }
    }
  }
  scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongGameBeginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tilecount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tilecount_)));
          set_has_tilecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_svrVersion;
        break;
      }
      
      // optional string svrVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svrVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svrversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svrversion().data(), this->svrversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scores;
        break;
      }
      
      // repeated int32 scores = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scores;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongGameBeginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tilecount = 1;
  if (has_tilecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tilecount(), output);
  }
  
  // optional string svrVersion = 2;
  if (has_svrversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svrversion().data(), this->svrversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->svrversion(), output);
  }
  
  // repeated int32 scores = 3;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->scores(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongGameBeginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tilecount = 1;
  if (has_tilecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tilecount(), target);
  }
  
  // optional string svrVersion = 2;
  if (has_svrversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svrversion().data(), this->svrversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->svrversion(), target);
  }
  
  // repeated int32 scores = 3;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->scores(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongGameBeginAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tilecount = 1;
    if (has_tilecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tilecount());
    }
    
    // optional string svrVersion = 2;
    if (has_svrversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svrversion());
    }
    
  }
  // repeated int32 scores = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->scores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scores(i));
    }
    total_size += 1 * this->scores_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongGameBeginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongGameBeginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongGameBeginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongGameBeginAck::MergeFrom(const TKMahJongGameBeginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  scores_.MergeFrom(from.scores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tilecount()) {
      set_tilecount(from.tilecount());
    }
    if (from.has_svrversion()) {
      set_svrversion(from.svrversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongGameBeginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongGameBeginAck::CopyFrom(const TKMahJongGameBeginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongGameBeginAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TKMahJongGameBeginAck::Swap(TKMahJongGameBeginAck* other) {
  if (other != this) {
    std::swap(tilecount_, other->tilecount_);
    std::swap(svrversion_, other->svrversion_);
    scores_.Swap(&other->scores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongGameBeginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongGameBeginAck_descriptor_;
  metadata.reflection = TKMahJongGameBeginAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongPlaceAck::kBankerFieldNumber;
const int TKMahJongPlaceAck::kRoundwindFieldNumber;
const int TKMahJongPlaceAck::kLianzhuangtimeFieldNumber;
const int TKMahJongPlaceAck::kJsonrulerFieldNumber;
const int TKMahJongPlaceAck::kMicountFieldNumber;
#endif  // !_MSC_VER

TKMahJongPlaceAck::TKMahJongPlaceAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongPlaceAck::InitAsDefaultInstance() {
}

TKMahJongPlaceAck::TKMahJongPlaceAck(const TKMahJongPlaceAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongPlaceAck::SharedCtor() {
  _cached_size_ = 0;
  banker_ = 0u;
  roundwind_ = 0u;
  lianzhuangtime_ = 0u;
  jsonruler_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongPlaceAck::~TKMahJongPlaceAck() {
  SharedDtor();
}

void TKMahJongPlaceAck::SharedDtor() {
  if (jsonruler_ != &::google::protobuf::internal::kEmptyString) {
    delete jsonruler_;
  }
  if (this != default_instance_) {
  }
}

void TKMahJongPlaceAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongPlaceAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongPlaceAck_descriptor_;
}

const TKMahJongPlaceAck& TKMahJongPlaceAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongPlaceAck* TKMahJongPlaceAck::default_instance_ = NULL;

TKMahJongPlaceAck* TKMahJongPlaceAck::New() const {
  return new TKMahJongPlaceAck;
}

void TKMahJongPlaceAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_ = 0u;
    roundwind_ = 0u;
    lianzhuangtime_ = 0u;
    if (has_jsonruler()) {
      if (jsonruler_ != &::google::protobuf::internal::kEmptyString) {
        jsonruler_->clear();
      }
    }
  }
  micount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongPlaceAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 banker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_)));
          set_has_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roundwind;
        break;
      }
      
      // required uint32 roundwind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundwind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roundwind_)));
          set_has_roundwind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lianzhuangtime;
        break;
      }
      
      // optional uint32 lianzhuangtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lianzhuangtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lianzhuangtime_)));
          set_has_lianzhuangtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jsonruler;
        break;
      }
      
      // optional string jsonruler = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jsonruler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonruler()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jsonruler().data(), this->jsonruler().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_micount;
        break;
      }
      
      // repeated uint32 micount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_micount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_micount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_micount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_micount;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongPlaceAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 banker = 1;
  if (has_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banker(), output);
  }
  
  // required uint32 roundwind = 2;
  if (has_roundwind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roundwind(), output);
  }
  
  // optional uint32 lianzhuangtime = 3;
  if (has_lianzhuangtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lianzhuangtime(), output);
  }
  
  // optional string jsonruler = 4;
  if (has_jsonruler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonruler().data(), this->jsonruler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jsonruler(), output);
  }
  
  // repeated uint32 micount = 5;
  for (int i = 0; i < this->micount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->micount(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongPlaceAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 banker = 1;
  if (has_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->banker(), target);
  }
  
  // required uint32 roundwind = 2;
  if (has_roundwind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roundwind(), target);
  }
  
  // optional uint32 lianzhuangtime = 3;
  if (has_lianzhuangtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lianzhuangtime(), target);
  }
  
  // optional string jsonruler = 4;
  if (has_jsonruler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonruler().data(), this->jsonruler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jsonruler(), target);
  }
  
  // repeated uint32 micount = 5;
  for (int i = 0; i < this->micount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->micount(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongPlaceAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 banker = 1;
    if (has_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker());
    }
    
    // required uint32 roundwind = 2;
    if (has_roundwind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roundwind());
    }
    
    // optional uint32 lianzhuangtime = 3;
    if (has_lianzhuangtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lianzhuangtime());
    }
    
    // optional string jsonruler = 4;
    if (has_jsonruler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonruler());
    }
    
  }
  // repeated uint32 micount = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->micount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->micount(i));
    }
    total_size += 1 * this->micount_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongPlaceAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongPlaceAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongPlaceAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongPlaceAck::MergeFrom(const TKMahJongPlaceAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  micount_.MergeFrom(from.micount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker()) {
      set_banker(from.banker());
    }
    if (from.has_roundwind()) {
      set_roundwind(from.roundwind());
    }
    if (from.has_lianzhuangtime()) {
      set_lianzhuangtime(from.lianzhuangtime());
    }
    if (from.has_jsonruler()) {
      set_jsonruler(from.jsonruler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongPlaceAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongPlaceAck::CopyFrom(const TKMahJongPlaceAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongPlaceAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TKMahJongPlaceAck::Swap(TKMahJongPlaceAck* other) {
  if (other != this) {
    std::swap(banker_, other->banker_);
    std::swap(roundwind_, other->roundwind_);
    std::swap(lianzhuangtime_, other->lianzhuangtime_);
    std::swap(jsonruler_, other->jsonruler_);
    micount_.Swap(&other->micount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongPlaceAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongPlaceAck_descriptor_;
  metadata.reflection = TKMahJongPlaceAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongOpenDoorAck::kSeatFieldNumber;
const int TKMahJongOpenDoorAck::kTilesFieldNumber;
const int TKMahJongOpenDoorAck::kHandstyleFieldNumber;
#endif  // !_MSC_VER

TKMahJongOpenDoorAck::TKMahJongOpenDoorAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongOpenDoorAck::InitAsDefaultInstance() {
}

TKMahJongOpenDoorAck::TKMahJongOpenDoorAck(const TKMahJongOpenDoorAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongOpenDoorAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  handstyle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongOpenDoorAck::~TKMahJongOpenDoorAck() {
  SharedDtor();
}

void TKMahJongOpenDoorAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongOpenDoorAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongOpenDoorAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongOpenDoorAck_descriptor_;
}

const TKMahJongOpenDoorAck& TKMahJongOpenDoorAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongOpenDoorAck* TKMahJongOpenDoorAck::default_instance_ = NULL;

TKMahJongOpenDoorAck* TKMahJongOpenDoorAck::New() const {
  return new TKMahJongOpenDoorAck;
}

void TKMahJongOpenDoorAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
    handstyle_ = 0;
  }
  tiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongOpenDoorAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tiles;
        break;
      }
      
      // repeated int32 tiles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_tiles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tiles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tiles;
        if (input->ExpectTag(24)) goto parse_handstyle;
        break;
      }
      
      // optional int32 handstyle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handstyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handstyle_)));
          set_has_handstyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongOpenDoorAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }
  
  // repeated int32 tiles = 2;
  for (int i = 0; i < this->tiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->tiles(i), output);
  }
  
  // optional int32 handstyle = 3;
  if (has_handstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->handstyle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongOpenDoorAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }
  
  // repeated int32 tiles = 2;
  for (int i = 0; i < this->tiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->tiles(i), target);
  }
  
  // optional int32 handstyle = 3;
  if (has_handstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->handstyle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongOpenDoorAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
    // optional int32 handstyle = 3;
    if (has_handstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handstyle());
    }
    
  }
  // repeated int32 tiles = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->tiles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tiles(i));
    }
    total_size += 1 * this->tiles_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongOpenDoorAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongOpenDoorAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongOpenDoorAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongOpenDoorAck::MergeFrom(const TKMahJongOpenDoorAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  tiles_.MergeFrom(from.tiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_handstyle()) {
      set_handstyle(from.handstyle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongOpenDoorAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongOpenDoorAck::CopyFrom(const TKMahJongOpenDoorAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongOpenDoorAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TKMahJongOpenDoorAck::Swap(TKMahJongOpenDoorAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    tiles_.Swap(&other->tiles_);
    std::swap(handstyle_, other->handstyle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongOpenDoorAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongOpenDoorAck_descriptor_;
  metadata.reflection = TKMahJongOpenDoorAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongActionAck::kSeatFieldNumber;
const int TKMahJongActionAck::kRequesttypeFieldNumber;
const int TKMahJongActionAck::kRequestidFieldNumber;
const int TKMahJongActionAck::kRecommendtypeFieldNumber;
const int TKMahJongActionAck::kRecommendtileFieldNumber;
const int TKMahJongActionAck::kBmusthuFieldNumber;
const int TKMahJongActionAck::kCappedFieldNumber;
const int TKMahJongActionAck::kGangtilesFieldNumber;
const int TKMahJongActionAck::kCitilesFieldNumber;
#endif  // !_MSC_VER

TKMahJongActionAck::TKMahJongActionAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongActionAck::InitAsDefaultInstance() {
}

TKMahJongActionAck::TKMahJongActionAck(const TKMahJongActionAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongActionAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  requesttype_ = 0u;
  requestid_ = 0u;
  recommendtype_ = -1;
  recommendtile_ = 0;
  bmusthu_ = 0;
  capped_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongActionAck::~TKMahJongActionAck() {
  SharedDtor();
}

void TKMahJongActionAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongActionAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongActionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongActionAck_descriptor_;
}

const TKMahJongActionAck& TKMahJongActionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongActionAck* TKMahJongActionAck::default_instance_ = NULL;

TKMahJongActionAck* TKMahJongActionAck::New() const {
  return new TKMahJongActionAck;
}

void TKMahJongActionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
    requesttype_ = 0u;
    requestid_ = 0u;
    recommendtype_ = -1;
    recommendtile_ = 0;
    bmusthu_ = 0;
    capped_ = 0;
  }
  gangtiles_.Clear();
  citiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongActionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requesttype;
        break;
      }
      
      // required uint32 requesttype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requesttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestid;
        break;
      }
      
      // required uint32 requestid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recommendtype;
        break;
      }
      
      // optional int32 recommendtype = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recommendtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommendtype_)));
          set_has_recommendtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recommendtile;
        break;
      }
      
      // optional int32 recommendtile = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recommendtile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommendtile_)));
          set_has_recommendtile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bmusthu;
        break;
      }
      
      // optional int32 bmusthu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bmusthu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bmusthu_)));
          set_has_bmusthu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_capped;
        break;
      }
      
      // optional int32 capped = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capped_)));
          set_has_capped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gangtiles;
        break;
      }
      
      // repeated int32 gangtiles = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangtiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_gangtiles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gangtiles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gangtiles;
        if (input->ExpectTag(72)) goto parse_citiles;
        break;
      }
      
      // repeated int32 citiles = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_citiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_citiles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_citiles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_citiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongActionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }
  
  // required uint32 requesttype = 2;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->requesttype(), output);
  }
  
  // required uint32 requestid = 3;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->requestid(), output);
  }
  
  // optional int32 recommendtype = 4 [default = -1];
  if (has_recommendtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recommendtype(), output);
  }
  
  // optional int32 recommendtile = 5 [default = 0];
  if (has_recommendtile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recommendtile(), output);
  }
  
  // optional int32 bmusthu = 6;
  if (has_bmusthu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bmusthu(), output);
  }
  
  // optional int32 capped = 7 [default = 0];
  if (has_capped()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->capped(), output);
  }
  
  // repeated int32 gangtiles = 8;
  for (int i = 0; i < this->gangtiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->gangtiles(i), output);
  }
  
  // repeated int32 citiles = 9;
  for (int i = 0; i < this->citiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->citiles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongActionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }
  
  // required uint32 requesttype = 2;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->requesttype(), target);
  }
  
  // required uint32 requestid = 3;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->requestid(), target);
  }
  
  // optional int32 recommendtype = 4 [default = -1];
  if (has_recommendtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recommendtype(), target);
  }
  
  // optional int32 recommendtile = 5 [default = 0];
  if (has_recommendtile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recommendtile(), target);
  }
  
  // optional int32 bmusthu = 6;
  if (has_bmusthu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bmusthu(), target);
  }
  
  // optional int32 capped = 7 [default = 0];
  if (has_capped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->capped(), target);
  }
  
  // repeated int32 gangtiles = 8;
  for (int i = 0; i < this->gangtiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->gangtiles(i), target);
  }
  
  // repeated int32 citiles = 9;
  for (int i = 0; i < this->citiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->citiles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongActionAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
    // required uint32 requesttype = 2;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requesttype());
    }
    
    // required uint32 requestid = 3;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }
    
    // optional int32 recommendtype = 4 [default = -1];
    if (has_recommendtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommendtype());
    }
    
    // optional int32 recommendtile = 5 [default = 0];
    if (has_recommendtile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommendtile());
    }
    
    // optional int32 bmusthu = 6;
    if (has_bmusthu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bmusthu());
    }
    
    // optional int32 capped = 7 [default = 0];
    if (has_capped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capped());
    }
    
  }
  // repeated int32 gangtiles = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->gangtiles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gangtiles(i));
    }
    total_size += 1 * this->gangtiles_size() + data_size;
  }
  
  // repeated int32 citiles = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->citiles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->citiles(i));
    }
    total_size += 1 * this->citiles_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongActionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongActionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongActionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongActionAck::MergeFrom(const TKMahJongActionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  gangtiles_.MergeFrom(from.gangtiles_);
  citiles_.MergeFrom(from.citiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_recommendtype()) {
      set_recommendtype(from.recommendtype());
    }
    if (from.has_recommendtile()) {
      set_recommendtile(from.recommendtile());
    }
    if (from.has_bmusthu()) {
      set_bmusthu(from.bmusthu());
    }
    if (from.has_capped()) {
      set_capped(from.capped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongActionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongActionAck::CopyFrom(const TKMahJongActionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongActionAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void TKMahJongActionAck::Swap(TKMahJongActionAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(requesttype_, other->requesttype_);
    std::swap(requestid_, other->requestid_);
    std::swap(recommendtype_, other->recommendtype_);
    std::swap(recommendtile_, other->recommendtile_);
    std::swap(bmusthu_, other->bmusthu_);
    std::swap(capped_, other->capped_);
    gangtiles_.Swap(&other->gangtiles_);
    citiles_.Swap(&other->citiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongActionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongActionAck_descriptor_;
  metadata.reflection = TKMahJongActionAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongPengAck::kSeatFieldNumber;
const int TKMahJongPengAck::kDiscardSeatFieldNumber;
const int TKMahJongPengAck::kTileidFieldNumber;
const int TKMahJongPengAck::kCalldataFieldNumber;
const int TKMahJongPengAck::kRecommendtileidFieldNumber;
#endif  // !_MSC_VER

TKMahJongPengAck::TKMahJongPengAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongPengAck::InitAsDefaultInstance() {
}

TKMahJongPengAck::TKMahJongPengAck(const TKMahJongPengAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongPengAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  discardseat_ = 0u;
  tileid_ = 0;
  recommendtileid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongPengAck::~TKMahJongPengAck() {
  SharedDtor();
}

void TKMahJongPengAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongPengAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongPengAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongPengAck_descriptor_;
}

const TKMahJongPengAck& TKMahJongPengAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongPengAck* TKMahJongPengAck::default_instance_ = NULL;

TKMahJongPengAck* TKMahJongPengAck::New() const {
  return new TKMahJongPengAck;
}

void TKMahJongPengAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
    discardseat_ = 0u;
    tileid_ = 0;
    recommendtileid_ = 0;
  }
  calldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongPengAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_discardSeat;
        break;
      }
      
      // required uint32 discardSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discardSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discardseat_)));
          set_has_discardseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tileid;
        break;
      }
      
      // required int32 tileid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileid_)));
          set_has_tileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_calldata;
        break;
      }
      
      // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_calldata;
        if (input->ExpectTag(40)) goto parse_recommendtileid;
        break;
      }
      
      // optional int32 recommendtileid = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recommendtileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommendtileid_)));
          set_has_recommendtileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongPengAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }
  
  // required uint32 discardSeat = 2;
  if (has_discardseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->discardseat(), output);
  }
  
  // required int32 tileid = 3;
  if (has_tileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tileid(), output);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 4;
  for (int i = 0; i < this->calldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->calldata(i), output);
  }
  
  // optional int32 recommendtileid = 5 [default = 0];
  if (has_recommendtileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recommendtileid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongPengAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }
  
  // required uint32 discardSeat = 2;
  if (has_discardseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->discardseat(), target);
  }
  
  // required int32 tileid = 3;
  if (has_tileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tileid(), target);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 4;
  for (int i = 0; i < this->calldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->calldata(i), target);
  }
  
  // optional int32 recommendtileid = 5 [default = 0];
  if (has_recommendtileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recommendtileid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongPengAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
    // required uint32 discardSeat = 2;
    if (has_discardseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discardseat());
    }
    
    // required int32 tileid = 3;
    if (has_tileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tileid());
    }
    
    // optional int32 recommendtileid = 5 [default = 0];
    if (has_recommendtileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommendtileid());
    }
    
  }
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 4;
  total_size += 1 * this->calldata_size();
  for (int i = 0; i < this->calldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calldata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongPengAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongPengAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongPengAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongPengAck::MergeFrom(const TKMahJongPengAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  calldata_.MergeFrom(from.calldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_discardseat()) {
      set_discardseat(from.discardseat());
    }
    if (from.has_tileid()) {
      set_tileid(from.tileid());
    }
    if (from.has_recommendtileid()) {
      set_recommendtileid(from.recommendtileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongPengAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongPengAck::CopyFrom(const TKMahJongPengAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongPengAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < calldata_size(); i++) {
    if (!this->calldata(i).IsInitialized()) return false;
  }
  return true;
}

void TKMahJongPengAck::Swap(TKMahJongPengAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(discardseat_, other->discardseat_);
    std::swap(tileid_, other->tileid_);
    calldata_.Swap(&other->calldata_);
    std::swap(recommendtileid_, other->recommendtileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongPengAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongPengAck_descriptor_;
  metadata.reflection = TKMahJongPengAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongGangAck::kSeatFieldNumber;
const int TKMahJongGangAck::kDiscardSeatFieldNumber;
const int TKMahJongGangAck::kGangtypeFieldNumber;
const int TKMahJongGangAck::kTileidFieldNumber;
#endif  // !_MSC_VER

TKMahJongGangAck::TKMahJongGangAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongGangAck::InitAsDefaultInstance() {
}

TKMahJongGangAck::TKMahJongGangAck(const TKMahJongGangAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongGangAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  discardseat_ = 0u;
  gangtype_ = 0u;
  tileid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongGangAck::~TKMahJongGangAck() {
  SharedDtor();
}

void TKMahJongGangAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongGangAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongGangAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongGangAck_descriptor_;
}

const TKMahJongGangAck& TKMahJongGangAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongGangAck* TKMahJongGangAck::default_instance_ = NULL;

TKMahJongGangAck* TKMahJongGangAck::New() const {
  return new TKMahJongGangAck;
}

void TKMahJongGangAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
    discardseat_ = 0u;
    gangtype_ = 0u;
    tileid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongGangAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_discardSeat;
        break;
      }
      
      // required uint32 discardSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discardSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discardseat_)));
          set_has_discardseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gangtype;
        break;
      }
      
      // required uint32 gangtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gangtype_)));
          set_has_gangtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tileid;
        break;
      }
      
      // required int32 tileid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileid_)));
          set_has_tileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongGangAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }
  
  // required uint32 discardSeat = 2;
  if (has_discardseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->discardseat(), output);
  }
  
  // required uint32 gangtype = 3;
  if (has_gangtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gangtype(), output);
  }
  
  // required int32 tileid = 4;
  if (has_tileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tileid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongGangAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }
  
  // required uint32 discardSeat = 2;
  if (has_discardseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->discardseat(), target);
  }
  
  // required uint32 gangtype = 3;
  if (has_gangtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gangtype(), target);
  }
  
  // required int32 tileid = 4;
  if (has_tileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tileid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongGangAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
    // required uint32 discardSeat = 2;
    if (has_discardseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discardseat());
    }
    
    // required uint32 gangtype = 3;
    if (has_gangtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gangtype());
    }
    
    // required int32 tileid = 4;
    if (has_tileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tileid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongGangAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongGangAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongGangAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongGangAck::MergeFrom(const TKMahJongGangAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_discardseat()) {
      set_discardseat(from.discardseat());
    }
    if (from.has_gangtype()) {
      set_gangtype(from.gangtype());
    }
    if (from.has_tileid()) {
      set_tileid(from.tileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongGangAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongGangAck::CopyFrom(const TKMahJongGangAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongGangAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TKMahJongGangAck::Swap(TKMahJongGangAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(discardseat_, other->discardseat_);
    std::swap(gangtype_, other->gangtype_);
    std::swap(tileid_, other->tileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongGangAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongGangAck_descriptor_;
  metadata.reflection = TKMahJongGangAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongWinAck::kWinseatsFieldNumber;
const int TKMahJongWinAck::kWinseatcountFieldNumber;
const int TKMahJongWinAck::kPaoseatFieldNumber;
const int TKMahJongWinAck::kWintileidFieldNumber;
const int TKMahJongWinAck::kWinmodeFieldNumber;
#endif  // !_MSC_VER

TKMahJongWinAck::TKMahJongWinAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongWinAck::InitAsDefaultInstance() {
}

TKMahJongWinAck::TKMahJongWinAck(const TKMahJongWinAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongWinAck::SharedCtor() {
  _cached_size_ = 0;
  winseatcount_ = 0u;
  paoseat_ = 0;
  wintileid_ = 0;
  winmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongWinAck::~TKMahJongWinAck() {
  SharedDtor();
}

void TKMahJongWinAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongWinAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongWinAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongWinAck_descriptor_;
}

const TKMahJongWinAck& TKMahJongWinAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongWinAck* TKMahJongWinAck::default_instance_ = NULL;

TKMahJongWinAck* TKMahJongWinAck::New() const {
  return new TKMahJongWinAck;
}

void TKMahJongWinAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    winseatcount_ = 0u;
    paoseat_ = 0;
    wintileid_ = 0;
    winmode_ = 0;
  }
  winseats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongWinAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 winseats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winseats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_winseats())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_winseats())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_winseats;
        if (input->ExpectTag(16)) goto parse_winseatcount;
        break;
      }
      
      // required uint32 winseatcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winseatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winseatcount_)));
          set_has_winseatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_paoseat;
        break;
      }
      
      // required int32 paoseat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paoseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paoseat_)));
          set_has_paoseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wintileid;
        break;
      }
      
      // required int32 wintileid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintileid_)));
          set_has_wintileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winmode;
        break;
      }
      
      // required int32 winmode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmode_)));
          set_has_winmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongWinAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 winseats = 1;
  for (int i = 0; i < this->winseats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->winseats(i), output);
  }
  
  // required uint32 winseatcount = 2;
  if (has_winseatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winseatcount(), output);
  }
  
  // required int32 paoseat = 3;
  if (has_paoseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->paoseat(), output);
  }
  
  // required int32 wintileid = 4;
  if (has_wintileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wintileid(), output);
  }
  
  // required int32 winmode = 5;
  if (has_winmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winmode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongWinAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 winseats = 1;
  for (int i = 0; i < this->winseats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->winseats(i), target);
  }
  
  // required uint32 winseatcount = 2;
  if (has_winseatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winseatcount(), target);
  }
  
  // required int32 paoseat = 3;
  if (has_paoseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->paoseat(), target);
  }
  
  // required int32 wintileid = 4;
  if (has_wintileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wintileid(), target);
  }
  
  // required int32 winmode = 5;
  if (has_winmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winmode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongWinAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 winseatcount = 2;
    if (has_winseatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winseatcount());
    }
    
    // required int32 paoseat = 3;
    if (has_paoseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paoseat());
    }
    
    // required int32 wintileid = 4;
    if (has_wintileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintileid());
    }
    
    // required int32 winmode = 5;
    if (has_winmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmode());
    }
    
  }
  // repeated uint32 winseats = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->winseats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->winseats(i));
    }
    total_size += 1 * this->winseats_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongWinAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongWinAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongWinAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongWinAck::MergeFrom(const TKMahJongWinAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  winseats_.MergeFrom(from.winseats_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_winseatcount()) {
      set_winseatcount(from.winseatcount());
    }
    if (from.has_paoseat()) {
      set_paoseat(from.paoseat());
    }
    if (from.has_wintileid()) {
      set_wintileid(from.wintileid());
    }
    if (from.has_winmode()) {
      set_winmode(from.winmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongWinAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongWinAck::CopyFrom(const TKMahJongWinAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongWinAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  
  return true;
}

void TKMahJongWinAck::Swap(TKMahJongWinAck* other) {
  if (other != this) {
    winseats_.Swap(&other->winseats_);
    std::swap(winseatcount_, other->winseatcount_);
    std::swap(paoseat_, other->paoseat_);
    std::swap(wintileid_, other->wintileid_);
    std::swap(winmode_, other->winmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongWinAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongWinAck_descriptor_;
  metadata.reflection = TKMahJongWinAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongDiscardTileAck::kSeatFieldNumber;
const int TKMahJongDiscardTileAck::kTileidFieldNumber;
#endif  // !_MSC_VER

TKMahJongDiscardTileAck::TKMahJongDiscardTileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongDiscardTileAck::InitAsDefaultInstance() {
}

TKMahJongDiscardTileAck::TKMahJongDiscardTileAck(const TKMahJongDiscardTileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongDiscardTileAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  tileid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongDiscardTileAck::~TKMahJongDiscardTileAck() {
  SharedDtor();
}

void TKMahJongDiscardTileAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongDiscardTileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongDiscardTileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongDiscardTileAck_descriptor_;
}

const TKMahJongDiscardTileAck& TKMahJongDiscardTileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongDiscardTileAck* TKMahJongDiscardTileAck::default_instance_ = NULL;

TKMahJongDiscardTileAck* TKMahJongDiscardTileAck::New() const {
  return new TKMahJongDiscardTileAck;
}

void TKMahJongDiscardTileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
    tileid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongDiscardTileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tileid;
        break;
      }
      
      // required int32 tileid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileid_)));
          set_has_tileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongDiscardTileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }
  
  // required int32 tileid = 2;
  if (has_tileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tileid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongDiscardTileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }
  
  // required int32 tileid = 2;
  if (has_tileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tileid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongDiscardTileAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
    // required int32 tileid = 2;
    if (has_tileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tileid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongDiscardTileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongDiscardTileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongDiscardTileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongDiscardTileAck::MergeFrom(const TKMahJongDiscardTileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_tileid()) {
      set_tileid(from.tileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongDiscardTileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongDiscardTileAck::CopyFrom(const TKMahJongDiscardTileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongDiscardTileAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TKMahJongDiscardTileAck::Swap(TKMahJongDiscardTileAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(tileid_, other->tileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongDiscardTileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongDiscardTileAck_descriptor_;
  metadata.reflection = TKMahJongDiscardTileAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongDrawTileAck::kSeatFieldNumber;
const int TKMahJongDrawTileAck::kDrawtiletypeFieldNumber;
const int TKMahJongDrawTileAck::kTileidFieldNumber;
const int TKMahJongDrawTileAck::kRecommendtileidFieldNumber;
const int TKMahJongDrawTileAck::kCalldataFieldNumber;
const int TKMahJongDrawTileAck::kUitypeFieldNumber;
#endif  // !_MSC_VER

TKMahJongDrawTileAck::TKMahJongDrawTileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongDrawTileAck::InitAsDefaultInstance() {
}

TKMahJongDrawTileAck::TKMahJongDrawTileAck(const TKMahJongDrawTileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongDrawTileAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  drawtiletype_ = 0u;
  tileid_ = 0;
  recommendtileid_ = 0;
  uitype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongDrawTileAck::~TKMahJongDrawTileAck() {
  SharedDtor();
}

void TKMahJongDrawTileAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongDrawTileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongDrawTileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongDrawTileAck_descriptor_;
}

const TKMahJongDrawTileAck& TKMahJongDrawTileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongDrawTileAck* TKMahJongDrawTileAck::default_instance_ = NULL;

TKMahJongDrawTileAck* TKMahJongDrawTileAck::New() const {
  return new TKMahJongDrawTileAck;
}

void TKMahJongDrawTileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
    drawtiletype_ = 0u;
    tileid_ = 0;
    recommendtileid_ = 0;
    uitype_ = 0;
  }
  calldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongDrawTileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drawtiletype;
        break;
      }
      
      // required uint32 drawtiletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawtiletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawtiletype_)));
          set_has_drawtiletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tileid;
        break;
      }
      
      // required int32 tileid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileid_)));
          set_has_tileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recommendtileid;
        break;
      }
      
      // optional int32 recommendtileid = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recommendtileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommendtileid_)));
          set_has_recommendtileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_calldata;
        break;
      }
      
      // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_calldata;
        if (input->ExpectTag(48)) goto parse_uitype;
        break;
      }
      
      // optional int32 uitype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uitype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uitype_)));
          set_has_uitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongDrawTileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }
  
  // required uint32 drawtiletype = 2;
  if (has_drawtiletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->drawtiletype(), output);
  }
  
  // required int32 tileid = 3;
  if (has_tileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tileid(), output);
  }
  
  // optional int32 recommendtileid = 4 [default = 0];
  if (has_recommendtileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recommendtileid(), output);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 5;
  for (int i = 0; i < this->calldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->calldata(i), output);
  }
  
  // optional int32 uitype = 6;
  if (has_uitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uitype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongDrawTileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }
  
  // required uint32 drawtiletype = 2;
  if (has_drawtiletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->drawtiletype(), target);
  }
  
  // required int32 tileid = 3;
  if (has_tileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tileid(), target);
  }
  
  // optional int32 recommendtileid = 4 [default = 0];
  if (has_recommendtileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recommendtileid(), target);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 5;
  for (int i = 0; i < this->calldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->calldata(i), target);
  }
  
  // optional int32 uitype = 6;
  if (has_uitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uitype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongDrawTileAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
    // required uint32 drawtiletype = 2;
    if (has_drawtiletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawtiletype());
    }
    
    // required int32 tileid = 3;
    if (has_tileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tileid());
    }
    
    // optional int32 recommendtileid = 4 [default = 0];
    if (has_recommendtileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommendtileid());
    }
    
    // optional int32 uitype = 6;
    if (has_uitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uitype());
    }
    
  }
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 5;
  total_size += 1 * this->calldata_size();
  for (int i = 0; i < this->calldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calldata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongDrawTileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongDrawTileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongDrawTileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongDrawTileAck::MergeFrom(const TKMahJongDrawTileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  calldata_.MergeFrom(from.calldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_drawtiletype()) {
      set_drawtiletype(from.drawtiletype());
    }
    if (from.has_tileid()) {
      set_tileid(from.tileid());
    }
    if (from.has_recommendtileid()) {
      set_recommendtileid(from.recommendtileid());
    }
    if (from.has_uitype()) {
      set_uitype(from.uitype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongDrawTileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongDrawTileAck::CopyFrom(const TKMahJongDrawTileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongDrawTileAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < calldata_size(); i++) {
    if (!this->calldata(i).IsInitialized()) return false;
  }
  return true;
}

void TKMahJongDrawTileAck::Swap(TKMahJongDrawTileAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(drawtiletype_, other->drawtiletype_);
    std::swap(tileid_, other->tileid_);
    std::swap(recommendtileid_, other->recommendtileid_);
    calldata_.Swap(&other->calldata_);
    std::swap(uitype_, other->uitype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongDrawTileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongDrawTileAck_descriptor_;
  metadata.reflection = TKMahJongDrawTileAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongTrustPlayAck::kUseridFieldNumber;
const int TKMahJongTrustPlayAck::kTypeFieldNumber;
const int TKMahJongTrustPlayAck::kSeatFieldNumber;
#endif  // !_MSC_VER

TKMahJongTrustPlayAck::TKMahJongTrustPlayAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongTrustPlayAck::InitAsDefaultInstance() {
}

TKMahJongTrustPlayAck::TKMahJongTrustPlayAck(const TKMahJongTrustPlayAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongTrustPlayAck::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  type_ = 0u;
  seat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongTrustPlayAck::~TKMahJongTrustPlayAck() {
  SharedDtor();
}

void TKMahJongTrustPlayAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongTrustPlayAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongTrustPlayAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongTrustPlayAck_descriptor_;
}

const TKMahJongTrustPlayAck& TKMahJongTrustPlayAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongTrustPlayAck* TKMahJongTrustPlayAck::default_instance_ = NULL;

TKMahJongTrustPlayAck* TKMahJongTrustPlayAck::New() const {
  return new TKMahJongTrustPlayAck;
}

void TKMahJongTrustPlayAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    type_ = 0u;
    seat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongTrustPlayAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat;
        break;
      }
      
      // optional uint32 seat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongTrustPlayAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 seat = 3;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongTrustPlayAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 seat = 3;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongTrustPlayAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 seat = 3;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongTrustPlayAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongTrustPlayAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongTrustPlayAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongTrustPlayAck::MergeFrom(const TKMahJongTrustPlayAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongTrustPlayAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongTrustPlayAck::CopyFrom(const TKMahJongTrustPlayAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongTrustPlayAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TKMahJongTrustPlayAck::Swap(TKMahJongTrustPlayAck* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongTrustPlayAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongTrustPlayAck_descriptor_;
  metadata.reflection = TKMahJongTrustPlayAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongResultAck::kTotalscoreFieldNumber;
const int TKMahJongResultAck::kPlayerhandtilesFieldNumber;
const int TKMahJongResultAck::kShowtotalscoreFieldNumber;
const int TKMahJongResultAck::kWinseatsFieldNumber;
const int TKMahJongResultAck::kWinmodeFieldNumber;
const int TKMahJongResultAck::kKonscoreFieldNumber;
const int TKMahJongResultAck::kHuscoreFieldNumber;
const int TKMahJongResultAck::kMicountFieldNumber;
const int TKMahJongResultAck::kCitileidFieldNumber;
const int TKMahJongResultAck::kZhuangseatFieldNumber;
const int TKMahJongResultAck::kWintileidFieldNumber;
const int TKMahJongResultAck::kPaoseatFieldNumber;
const int TKMahJongResultAck::kScorebaseFieldNumber;
const int TKMahJongResultAck::kCurroundFieldNumber;
const int TKMahJongResultAck::kGenzhuangFieldNumber;
const int TKMahJongResultAck::kPaociseatFieldNumber;
#endif  // !_MSC_VER

TKMahJongResultAck::TKMahJongResultAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongResultAck::InitAsDefaultInstance() {
}

TKMahJongResultAck::TKMahJongResultAck(const TKMahJongResultAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongResultAck::SharedCtor() {
  _cached_size_ = 0;
  winmode_ = 0;
  citileid_ = 0;
  zhuangseat_ = 0;
  wintileid_ = 0;
  paoseat_ = 0;
  scorebase_ = 0;
  curround_ = 0;
  genzhuang_ = 0;
  paociseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongResultAck::~TKMahJongResultAck() {
  SharedDtor();
}

void TKMahJongResultAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongResultAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongResultAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongResultAck_descriptor_;
}

const TKMahJongResultAck& TKMahJongResultAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongResultAck* TKMahJongResultAck::default_instance_ = NULL;

TKMahJongResultAck* TKMahJongResultAck::New() const {
  return new TKMahJongResultAck;
}

void TKMahJongResultAck::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    winmode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    citileid_ = 0;
    zhuangseat_ = 0;
    wintileid_ = 0;
    paoseat_ = 0;
    scorebase_ = 0;
    curround_ = 0;
    genzhuang_ = 0;
    paociseat_ = 0;
  }
  totalscore_.Clear();
  playerhandtiles_.Clear();
  showtotalscore_.Clear();
  winseats_.Clear();
  konscore_.Clear();
  huscore_.Clear();
  micount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongResultAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 totalscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_totalscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_totalscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_totalscore;
        if (input->ExpectTag(18)) goto parse_playerhandtiles;
        break;
      }
      
      // repeated .cn.jj.service.msg.protocol.TKMahJongHandTiles playerhandtiles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerhandtiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerhandtiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerhandtiles;
        if (input->ExpectTag(24)) goto parse_showtotalscore;
        break;
      }
      
      // repeated int32 showtotalscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showtotalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_showtotalscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_showtotalscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_showtotalscore;
        if (input->ExpectTag(32)) goto parse_winseats;
        break;
      }
      
      // repeated int32 winseats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winseats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_winseats())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winseats())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winseats;
        if (input->ExpectTag(40)) goto parse_winmode;
        break;
      }
      
      // optional int32 winmode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmode_)));
          set_has_winmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_konscore;
        break;
      }
      
      // repeated int32 konscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_konscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_konscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_konscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_konscore;
        if (input->ExpectTag(56)) goto parse_huscore;
        break;
      }
      
      // repeated int32 huscore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_huscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_huscore;
        if (input->ExpectTag(64)) goto parse_micount;
        break;
      }
      
      // repeated int32 micount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_micount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_micount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_micount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_micount;
        if (input->ExpectTag(72)) goto parse_citileid;
        break;
      }
      
      // optional int32 citileid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_citileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &citileid_)));
          set_has_citileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_zhuangseat;
        break;
      }
      
      // optional int32 zhuangseat = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhuangseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhuangseat_)));
          set_has_zhuangseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wintileid;
        break;
      }
      
      // optional int32 wintileid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintileid_)));
          set_has_wintileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_paoseat;
        break;
      }
      
      // optional int32 paoseat = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paoseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paoseat_)));
          set_has_paoseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_scorebase;
        break;
      }
      
      // optional int32 scorebase = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scorebase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scorebase_)));
          set_has_scorebase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_curround;
        break;
      }
      
      // optional int32 curround = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curround_)));
          set_has_curround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_genzhuang;
        break;
      }
      
      // optional int32 genzhuang = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genzhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &genzhuang_)));
          set_has_genzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_paociseat;
        break;
      }
      
      // optional int32 paociseat = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paociseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paociseat_)));
          set_has_paociseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongResultAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 totalscore = 1;
  for (int i = 0; i < this->totalscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->totalscore(i), output);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongHandTiles playerhandtiles = 2;
  for (int i = 0; i < this->playerhandtiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerhandtiles(i), output);
  }
  
  // repeated int32 showtotalscore = 3;
  for (int i = 0; i < this->showtotalscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->showtotalscore(i), output);
  }
  
  // repeated int32 winseats = 4;
  for (int i = 0; i < this->winseats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->winseats(i), output);
  }
  
  // optional int32 winmode = 5;
  if (has_winmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winmode(), output);
  }
  
  // repeated int32 konscore = 6;
  for (int i = 0; i < this->konscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->konscore(i), output);
  }
  
  // repeated int32 huscore = 7;
  for (int i = 0; i < this->huscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->huscore(i), output);
  }
  
  // repeated int32 micount = 8;
  for (int i = 0; i < this->micount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->micount(i), output);
  }
  
  // optional int32 citileid = 9;
  if (has_citileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->citileid(), output);
  }
  
  // optional int32 zhuangseat = 10;
  if (has_zhuangseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->zhuangseat(), output);
  }
  
  // optional int32 wintileid = 11;
  if (has_wintileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wintileid(), output);
  }
  
  // optional int32 paoseat = 12;
  if (has_paoseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->paoseat(), output);
  }
  
  // optional int32 scorebase = 13;
  if (has_scorebase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->scorebase(), output);
  }
  
  // optional int32 curround = 14;
  if (has_curround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->curround(), output);
  }
  
  // optional int32 genzhuang = 15;
  if (has_genzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->genzhuang(), output);
  }
  
  // optional int32 paociseat = 16;
  if (has_paociseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->paociseat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongResultAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 totalscore = 1;
  for (int i = 0; i < this->totalscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->totalscore(i), target);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongHandTiles playerhandtiles = 2;
  for (int i = 0; i < this->playerhandtiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerhandtiles(i), target);
  }
  
  // repeated int32 showtotalscore = 3;
  for (int i = 0; i < this->showtotalscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->showtotalscore(i), target);
  }
  
  // repeated int32 winseats = 4;
  for (int i = 0; i < this->winseats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->winseats(i), target);
  }
  
  // optional int32 winmode = 5;
  if (has_winmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winmode(), target);
  }
  
  // repeated int32 konscore = 6;
  for (int i = 0; i < this->konscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->konscore(i), target);
  }
  
  // repeated int32 huscore = 7;
  for (int i = 0; i < this->huscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->huscore(i), target);
  }
  
  // repeated int32 micount = 8;
  for (int i = 0; i < this->micount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->micount(i), target);
  }
  
  // optional int32 citileid = 9;
  if (has_citileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->citileid(), target);
  }
  
  // optional int32 zhuangseat = 10;
  if (has_zhuangseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->zhuangseat(), target);
  }
  
  // optional int32 wintileid = 11;
  if (has_wintileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wintileid(), target);
  }
  
  // optional int32 paoseat = 12;
  if (has_paoseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->paoseat(), target);
  }
  
  // optional int32 scorebase = 13;
  if (has_scorebase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->scorebase(), target);
  }
  
  // optional int32 curround = 14;
  if (has_curround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->curround(), target);
  }
  
  // optional int32 genzhuang = 15;
  if (has_genzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->genzhuang(), target);
  }
  
  // optional int32 paociseat = 16;
  if (has_paociseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->paociseat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongResultAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional int32 winmode = 5;
    if (has_winmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 citileid = 9;
    if (has_citileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->citileid());
    }
    
    // optional int32 zhuangseat = 10;
    if (has_zhuangseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhuangseat());
    }
    
    // optional int32 wintileid = 11;
    if (has_wintileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintileid());
    }
    
    // optional int32 paoseat = 12;
    if (has_paoseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paoseat());
    }
    
    // optional int32 scorebase = 13;
    if (has_scorebase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scorebase());
    }
    
    // optional int32 curround = 14;
    if (has_curround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curround());
    }
    
    // optional int32 genzhuang = 15;
    if (has_genzhuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->genzhuang());
    }
    
    // optional int32 paociseat = 16;
    if (has_paociseat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paociseat());
    }
    
  }
  // repeated int32 totalscore = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->totalscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->totalscore(i));
    }
    total_size += 1 * this->totalscore_size() + data_size;
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongHandTiles playerhandtiles = 2;
  total_size += 1 * this->playerhandtiles_size();
  for (int i = 0; i < this->playerhandtiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerhandtiles(i));
  }
  
  // repeated int32 showtotalscore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->showtotalscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->showtotalscore(i));
    }
    total_size += 1 * this->showtotalscore_size() + data_size;
  }
  
  // repeated int32 winseats = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->winseats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winseats(i));
    }
    total_size += 1 * this->winseats_size() + data_size;
  }
  
  // repeated int32 konscore = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->konscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->konscore(i));
    }
    total_size += 1 * this->konscore_size() + data_size;
  }
  
  // repeated int32 huscore = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->huscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huscore(i));
    }
    total_size += 1 * this->huscore_size() + data_size;
  }
  
  // repeated int32 micount = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->micount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->micount(i));
    }
    total_size += 1 * this->micount_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongResultAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongResultAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongResultAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongResultAck::MergeFrom(const TKMahJongResultAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  totalscore_.MergeFrom(from.totalscore_);
  playerhandtiles_.MergeFrom(from.playerhandtiles_);
  showtotalscore_.MergeFrom(from.showtotalscore_);
  winseats_.MergeFrom(from.winseats_);
  konscore_.MergeFrom(from.konscore_);
  huscore_.MergeFrom(from.huscore_);
  micount_.MergeFrom(from.micount_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_winmode()) {
      set_winmode(from.winmode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_citileid()) {
      set_citileid(from.citileid());
    }
    if (from.has_zhuangseat()) {
      set_zhuangseat(from.zhuangseat());
    }
    if (from.has_wintileid()) {
      set_wintileid(from.wintileid());
    }
    if (from.has_paoseat()) {
      set_paoseat(from.paoseat());
    }
    if (from.has_scorebase()) {
      set_scorebase(from.scorebase());
    }
    if (from.has_curround()) {
      set_curround(from.curround());
    }
    if (from.has_genzhuang()) {
      set_genzhuang(from.genzhuang());
    }
    if (from.has_paociseat()) {
      set_paociseat(from.paociseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongResultAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongResultAck::CopyFrom(const TKMahJongResultAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongResultAck::IsInitialized() const {
  
  for (int i = 0; i < playerhandtiles_size(); i++) {
    if (!this->playerhandtiles(i).IsInitialized()) return false;
  }
  return true;
}

void TKMahJongResultAck::Swap(TKMahJongResultAck* other) {
  if (other != this) {
    totalscore_.Swap(&other->totalscore_);
    playerhandtiles_.Swap(&other->playerhandtiles_);
    showtotalscore_.Swap(&other->showtotalscore_);
    winseats_.Swap(&other->winseats_);
    std::swap(winmode_, other->winmode_);
    konscore_.Swap(&other->konscore_);
    huscore_.Swap(&other->huscore_);
    micount_.Swap(&other->micount_);
    std::swap(citileid_, other->citileid_);
    std::swap(zhuangseat_, other->zhuangseat_);
    std::swap(wintileid_, other->wintileid_);
    std::swap(paoseat_, other->paoseat_);
    std::swap(scorebase_, other->scorebase_);
    std::swap(curround_, other->curround_);
    std::swap(genzhuang_, other->genzhuang_);
    std::swap(paociseat_, other->paociseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongResultAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongResultAck_descriptor_;
  metadata.reflection = TKMahJongResultAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongMessageAck::kMessagetypeFieldNumber;
#endif  // !_MSC_VER

TKMahJongMessageAck::TKMahJongMessageAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongMessageAck::InitAsDefaultInstance() {
}

TKMahJongMessageAck::TKMahJongMessageAck(const TKMahJongMessageAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongMessageAck::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongMessageAck::~TKMahJongMessageAck() {
  SharedDtor();
}

void TKMahJongMessageAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongMessageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongMessageAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongMessageAck_descriptor_;
}

const TKMahJongMessageAck& TKMahJongMessageAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongMessageAck* TKMahJongMessageAck::default_instance_ = NULL;

TKMahJongMessageAck* TKMahJongMessageAck::New() const {
  return new TKMahJongMessageAck;
}

void TKMahJongMessageAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongMessageAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 messagetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongMessageAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->messagetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongMessageAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 messagetype = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->messagetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongMessageAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 messagetype = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongMessageAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongMessageAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongMessageAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongMessageAck::MergeFrom(const TKMahJongMessageAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongMessageAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongMessageAck::CopyFrom(const TKMahJongMessageAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongMessageAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TKMahJongMessageAck::Swap(TKMahJongMessageAck* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongMessageAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongMessageAck_descriptor_;
  metadata.reflection = TKMahJongMessageAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongTileGroup::kGrouptypeFieldNumber;
const int TKMahJongTileGroup::kGroupfromFieldNumber;
const int TKMahJongTileGroup::kGrouptileidFieldNumber;
const int TKMahJongTileGroup::kGroupchitileidFieldNumber;
#endif  // !_MSC_VER

TKMahJongTileGroup::TKMahJongTileGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongTileGroup::InitAsDefaultInstance() {
}

TKMahJongTileGroup::TKMahJongTileGroup(const TKMahJongTileGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongTileGroup::SharedCtor() {
  _cached_size_ = 0;
  grouptype_ = 0;
  groupfrom_ = 0;
  grouptileid_ = 0;
  groupchitileid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongTileGroup::~TKMahJongTileGroup() {
  SharedDtor();
}

void TKMahJongTileGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongTileGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongTileGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongTileGroup_descriptor_;
}

const TKMahJongTileGroup& TKMahJongTileGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongTileGroup* TKMahJongTileGroup::default_instance_ = NULL;

TKMahJongTileGroup* TKMahJongTileGroup::New() const {
  return new TKMahJongTileGroup;
}

void TKMahJongTileGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grouptype_ = 0;
    groupfrom_ = 0;
    grouptileid_ = 0;
    groupchitileid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongTileGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grouptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouptype_)));
          set_has_grouptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupfrom;
        break;
      }
      
      // required int32 groupfrom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupfrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupfrom_)));
          set_has_groupfrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grouptileid;
        break;
      }
      
      // required int32 grouptileid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grouptileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouptileid_)));
          set_has_grouptileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_groupchitileid;
        break;
      }
      
      // optional int32 groupchitileid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupchitileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupchitileid_)));
          set_has_groupchitileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongTileGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 grouptype = 1;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grouptype(), output);
  }
  
  // required int32 groupfrom = 2;
  if (has_groupfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupfrom(), output);
  }
  
  // required int32 grouptileid = 3;
  if (has_grouptileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grouptileid(), output);
  }
  
  // optional int32 groupchitileid = 4;
  if (has_groupchitileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->groupchitileid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongTileGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 grouptype = 1;
  if (has_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grouptype(), target);
  }
  
  // required int32 groupfrom = 2;
  if (has_groupfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupfrom(), target);
  }
  
  // required int32 grouptileid = 3;
  if (has_grouptileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grouptileid(), target);
  }
  
  // optional int32 groupchitileid = 4;
  if (has_groupchitileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->groupchitileid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongTileGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grouptype = 1;
    if (has_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouptype());
    }
    
    // required int32 groupfrom = 2;
    if (has_groupfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupfrom());
    }
    
    // required int32 grouptileid = 3;
    if (has_grouptileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouptileid());
    }
    
    // optional int32 groupchitileid = 4;
    if (has_groupchitileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupchitileid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongTileGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongTileGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongTileGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongTileGroup::MergeFrom(const TKMahJongTileGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grouptype()) {
      set_grouptype(from.grouptype());
    }
    if (from.has_groupfrom()) {
      set_groupfrom(from.groupfrom());
    }
    if (from.has_grouptileid()) {
      set_grouptileid(from.grouptileid());
    }
    if (from.has_groupchitileid()) {
      set_groupchitileid(from.groupchitileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongTileGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongTileGroup::CopyFrom(const TKMahJongTileGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongTileGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void TKMahJongTileGroup::Swap(TKMahJongTileGroup* other) {
  if (other != this) {
    std::swap(grouptype_, other->grouptype_);
    std::swap(groupfrom_, other->groupfrom_);
    std::swap(grouptileid_, other->grouptileid_);
    std::swap(groupchitileid_, other->groupchitileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongTileGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongTileGroup_descriptor_;
  metadata.reflection = TKMahJongTileGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallUnitData::kTileFieldNumber;
const int CallUnitData::kFanFieldNumber;
#endif  // !_MSC_VER

CallUnitData::CallUnitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallUnitData::InitAsDefaultInstance() {
}

CallUnitData::CallUnitData(const CallUnitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallUnitData::SharedCtor() {
  _cached_size_ = 0;
  tile_ = 0;
  fan_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallUnitData::~CallUnitData() {
  SharedDtor();
}

void CallUnitData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CallUnitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallUnitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallUnitData_descriptor_;
}

const CallUnitData& CallUnitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

CallUnitData* CallUnitData::default_instance_ = NULL;

CallUnitData* CallUnitData::New() const {
  return new CallUnitData;
}

void CallUnitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tile_ = 0;
    fan_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallUnitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_)));
          set_has_tile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fan;
        break;
      }
      
      // required uint32 fan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fan_)));
          set_has_fan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallUnitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tile = 1;
  if (has_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tile(), output);
  }
  
  // required uint32 fan = 2;
  if (has_fan()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fan(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallUnitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tile = 1;
  if (has_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tile(), target);
  }
  
  // required uint32 fan = 2;
  if (has_fan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fan(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallUnitData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tile = 1;
    if (has_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tile());
    }
    
    // required uint32 fan = 2;
    if (has_fan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fan());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallUnitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallUnitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallUnitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallUnitData::MergeFrom(const CallUnitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tile()) {
      set_tile(from.tile());
    }
    if (from.has_fan()) {
      set_fan(from.fan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallUnitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallUnitData::CopyFrom(const CallUnitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallUnitData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CallUnitData::Swap(CallUnitData* other) {
  if (other != this) {
    std::swap(tile_, other->tile_);
    std::swap(fan_, other->fan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallUnitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallUnitData_descriptor_;
  metadata.reflection = CallUnitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongCallData::kTileFieldNumber;
const int TKMahJongCallData::kHutilesdetailFieldNumber;
#endif  // !_MSC_VER

TKMahJongCallData::TKMahJongCallData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongCallData::InitAsDefaultInstance() {
}

TKMahJongCallData::TKMahJongCallData(const TKMahJongCallData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongCallData::SharedCtor() {
  _cached_size_ = 0;
  tile_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongCallData::~TKMahJongCallData() {
  SharedDtor();
}

void TKMahJongCallData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongCallData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongCallData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongCallData_descriptor_;
}

const TKMahJongCallData& TKMahJongCallData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongCallData* TKMahJongCallData::default_instance_ = NULL;

TKMahJongCallData* TKMahJongCallData::New() const {
  return new TKMahJongCallData;
}

void TKMahJongCallData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tile_ = 0;
  }
  hutilesdetail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongCallData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_)));
          set_has_tile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hutilesdetail;
        break;
      }
      
      // repeated .cn.jj.service.msg.protocol.CallUnitData hutilesdetail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hutilesdetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hutilesdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hutilesdetail;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongCallData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tile = 1;
  if (has_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tile(), output);
  }
  
  // repeated .cn.jj.service.msg.protocol.CallUnitData hutilesdetail = 3;
  for (int i = 0; i < this->hutilesdetail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hutilesdetail(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongCallData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tile = 1;
  if (has_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tile(), target);
  }
  
  // repeated .cn.jj.service.msg.protocol.CallUnitData hutilesdetail = 3;
  for (int i = 0; i < this->hutilesdetail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hutilesdetail(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongCallData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tile = 1;
    if (has_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tile());
    }
    
  }
  // repeated .cn.jj.service.msg.protocol.CallUnitData hutilesdetail = 3;
  total_size += 1 * this->hutilesdetail_size();
  for (int i = 0; i < this->hutilesdetail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hutilesdetail(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongCallData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongCallData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongCallData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongCallData::MergeFrom(const TKMahJongCallData& from) {
  GOOGLE_CHECK_NE(&from, this);
  hutilesdetail_.MergeFrom(from.hutilesdetail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tile()) {
      set_tile(from.tile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongCallData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongCallData::CopyFrom(const TKMahJongCallData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongCallData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < hutilesdetail_size(); i++) {
    if (!this->hutilesdetail(i).IsInitialized()) return false;
  }
  return true;
}

void TKMahJongCallData::Swap(TKMahJongCallData* other) {
  if (other != this) {
    std::swap(tile_, other->tile_);
    hutilesdetail_.Swap(&other->hutilesdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongCallData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongCallData_descriptor_;
  metadata.reflection = TKMahJongCallData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongHandTiles::kSeatFieldNumber;
const int TKMahJongHandTiles::kAnhandtileFieldNumber;
const int TKMahJongHandTiles::kTilegroupFieldNumber;
#endif  // !_MSC_VER

TKMahJongHandTiles::TKMahJongHandTiles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongHandTiles::InitAsDefaultInstance() {
}

TKMahJongHandTiles::TKMahJongHandTiles(const TKMahJongHandTiles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongHandTiles::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongHandTiles::~TKMahJongHandTiles() {
  SharedDtor();
}

void TKMahJongHandTiles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongHandTiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongHandTiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongHandTiles_descriptor_;
}

const TKMahJongHandTiles& TKMahJongHandTiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongHandTiles* TKMahJongHandTiles::default_instance_ = NULL;

TKMahJongHandTiles* TKMahJongHandTiles::New() const {
  return new TKMahJongHandTiles;
}

void TKMahJongHandTiles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
  }
  anhandtile_.Clear();
  tilegroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongHandTiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_anhandtile;
        break;
      }
      
      // repeated int32 anhandtile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anhandtile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_anhandtile())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_anhandtile())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_anhandtile;
        if (input->ExpectTag(26)) goto parse_tilegroup;
        break;
      }
      
      // repeated .cn.jj.service.msg.protocol.TKMahJongTileGroup tilegroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tilegroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tilegroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tilegroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongHandTiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }
  
  // repeated int32 anhandtile = 2;
  for (int i = 0; i < this->anhandtile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->anhandtile(i), output);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongTileGroup tilegroup = 3;
  for (int i = 0; i < this->tilegroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tilegroup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongHandTiles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }
  
  // repeated int32 anhandtile = 2;
  for (int i = 0; i < this->anhandtile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->anhandtile(i), target);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongTileGroup tilegroup = 3;
  for (int i = 0; i < this->tilegroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tilegroup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongHandTiles::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }
    
  }
  // repeated int32 anhandtile = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->anhandtile_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->anhandtile(i));
    }
    total_size += 1 * this->anhandtile_size() + data_size;
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongTileGroup tilegroup = 3;
  total_size += 1 * this->tilegroup_size();
  for (int i = 0; i < this->tilegroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tilegroup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongHandTiles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongHandTiles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongHandTiles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongHandTiles::MergeFrom(const TKMahJongHandTiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  anhandtile_.MergeFrom(from.anhandtile_);
  tilegroup_.MergeFrom(from.tilegroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongHandTiles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongHandTiles::CopyFrom(const TKMahJongHandTiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongHandTiles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < tilegroup_size(); i++) {
    if (!this->tilegroup(i).IsInitialized()) return false;
  }
  return true;
}

void TKMahJongHandTiles::Swap(TKMahJongHandTiles* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    anhandtile_.Swap(&other->anhandtile_);
    tilegroup_.Swap(&other->tilegroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongHandTiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongHandTiles_descriptor_;
  metadata.reflection = TKMahJongHandTiles_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahjongHandTilesAck::kPlayerhandtilesFieldNumber;
#endif  // !_MSC_VER

TKMahjongHandTilesAck::TKMahjongHandTilesAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahjongHandTilesAck::InitAsDefaultInstance() {
}

TKMahjongHandTilesAck::TKMahjongHandTilesAck(const TKMahjongHandTilesAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahjongHandTilesAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahjongHandTilesAck::~TKMahjongHandTilesAck() {
  SharedDtor();
}

void TKMahjongHandTilesAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahjongHandTilesAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahjongHandTilesAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahjongHandTilesAck_descriptor_;
}

const TKMahjongHandTilesAck& TKMahjongHandTilesAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahjongHandTilesAck* TKMahjongHandTilesAck::default_instance_ = NULL;

TKMahjongHandTilesAck* TKMahjongHandTilesAck::New() const {
  return new TKMahjongHandTilesAck;
}

void TKMahjongHandTilesAck::Clear() {
  playerhandtiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahjongHandTilesAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cn.jj.service.msg.protocol.TKMahJongHandTiles playerhandtiles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerhandtiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerhandtiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playerhandtiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahjongHandTilesAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cn.jj.service.msg.protocol.TKMahJongHandTiles playerhandtiles = 1;
  for (int i = 0; i < this->playerhandtiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerhandtiles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahjongHandTilesAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cn.jj.service.msg.protocol.TKMahJongHandTiles playerhandtiles = 1;
  for (int i = 0; i < this->playerhandtiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerhandtiles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahjongHandTilesAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongHandTiles playerhandtiles = 1;
  total_size += 1 * this->playerhandtiles_size();
  for (int i = 0; i < this->playerhandtiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerhandtiles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahjongHandTilesAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahjongHandTilesAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahjongHandTilesAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahjongHandTilesAck::MergeFrom(const TKMahjongHandTilesAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerhandtiles_.MergeFrom(from.playerhandtiles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahjongHandTilesAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahjongHandTilesAck::CopyFrom(const TKMahjongHandTilesAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahjongHandTilesAck::IsInitialized() const {
  
  for (int i = 0; i < playerhandtiles_size(); i++) {
    if (!this->playerhandtiles(i).IsInitialized()) return false;
  }
  return true;
}

void TKMahjongHandTilesAck::Swap(TKMahjongHandTilesAck* other) {
  if (other != this) {
    playerhandtiles_.Swap(&other->playerhandtiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahjongHandTilesAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahjongHandTilesAck_descriptor_;
  metadata.reflection = TKMahjongHandTilesAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongScoreChangeAck::kIncrementalFieldNumber;
const int TKMahJongScoreChangeAck::kShowincrementalFieldNumber;
#endif  // !_MSC_VER

TKMahJongScoreChangeAck::TKMahJongScoreChangeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongScoreChangeAck::InitAsDefaultInstance() {
}

TKMahJongScoreChangeAck::TKMahJongScoreChangeAck(const TKMahJongScoreChangeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongScoreChangeAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongScoreChangeAck::~TKMahJongScoreChangeAck() {
  SharedDtor();
}

void TKMahJongScoreChangeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahJongScoreChangeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongScoreChangeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongScoreChangeAck_descriptor_;
}

const TKMahJongScoreChangeAck& TKMahJongScoreChangeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongScoreChangeAck* TKMahJongScoreChangeAck::default_instance_ = NULL;

TKMahJongScoreChangeAck* TKMahJongScoreChangeAck::New() const {
  return new TKMahJongScoreChangeAck;
}

void TKMahJongScoreChangeAck::Clear() {
  incremental_.Clear();
  showincremental_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongScoreChangeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 incremental = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incremental:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_incremental())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_incremental())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_incremental;
        if (input->ExpectTag(16)) goto parse_showincremental;
        break;
      }
      
      // repeated int32 showincremental = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showincremental:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_showincremental())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_showincremental())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_showincremental;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongScoreChangeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 incremental = 1;
  for (int i = 0; i < this->incremental_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->incremental(i), output);
  }
  
  // repeated int32 showincremental = 2;
  for (int i = 0; i < this->showincremental_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->showincremental(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongScoreChangeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 incremental = 1;
  for (int i = 0; i < this->incremental_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->incremental(i), target);
  }
  
  // repeated int32 showincremental = 2;
  for (int i = 0; i < this->showincremental_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->showincremental(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongScoreChangeAck::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 incremental = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->incremental_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->incremental(i));
    }
    total_size += 1 * this->incremental_size() + data_size;
  }
  
  // repeated int32 showincremental = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->showincremental_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->showincremental(i));
    }
    total_size += 1 * this->showincremental_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongScoreChangeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongScoreChangeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongScoreChangeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongScoreChangeAck::MergeFrom(const TKMahJongScoreChangeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  incremental_.MergeFrom(from.incremental_);
  showincremental_.MergeFrom(from.showincremental_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongScoreChangeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongScoreChangeAck::CopyFrom(const TKMahJongScoreChangeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongScoreChangeAck::IsInitialized() const {
  
  return true;
}

void TKMahJongScoreChangeAck::Swap(TKMahJongScoreChangeAck* other) {
  if (other != this) {
    incremental_.Swap(&other->incremental_);
    showincremental_.Swap(&other->showincremental_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongScoreChangeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongScoreChangeAck_descriptor_;
  metadata.reflection = TKMahJongScoreChangeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahJongDebugLogAck::kMsgFieldNumber;
#endif  // !_MSC_VER

TKMahJongDebugLogAck::TKMahJongDebugLogAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahJongDebugLogAck::InitAsDefaultInstance() {
}

TKMahJongDebugLogAck::TKMahJongDebugLogAck(const TKMahJongDebugLogAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahJongDebugLogAck::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahJongDebugLogAck::~TKMahJongDebugLogAck() {
  SharedDtor();
}

void TKMahJongDebugLogAck::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void TKMahJongDebugLogAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahJongDebugLogAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahJongDebugLogAck_descriptor_;
}

const TKMahJongDebugLogAck& TKMahJongDebugLogAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahJongDebugLogAck* TKMahJongDebugLogAck::default_instance_ = NULL;

TKMahJongDebugLogAck* TKMahJongDebugLogAck::New() const {
  return new TKMahJongDebugLogAck;
}

void TKMahJongDebugLogAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahJongDebugLogAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahJongDebugLogAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahJongDebugLogAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahJongDebugLogAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahJongDebugLogAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahJongDebugLogAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahJongDebugLogAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahJongDebugLogAck::MergeFrom(const TKMahJongDebugLogAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahJongDebugLogAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahJongDebugLogAck::CopyFrom(const TKMahJongDebugLogAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahJongDebugLogAck::IsInitialized() const {
  
  return true;
}

void TKMahJongDebugLogAck::Swap(TKMahJongDebugLogAck* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahJongDebugLogAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahJongDebugLogAck_descriptor_;
  metadata.reflection = TKMahJongDebugLogAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahjongBeginAnimalAck::kRequestidFieldNumber;
#endif  // !_MSC_VER

TKMahjongBeginAnimalAck::TKMahjongBeginAnimalAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahjongBeginAnimalAck::InitAsDefaultInstance() {
}

TKMahjongBeginAnimalAck::TKMahjongBeginAnimalAck(const TKMahjongBeginAnimalAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahjongBeginAnimalAck::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahjongBeginAnimalAck::~TKMahjongBeginAnimalAck() {
  SharedDtor();
}

void TKMahjongBeginAnimalAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahjongBeginAnimalAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahjongBeginAnimalAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahjongBeginAnimalAck_descriptor_;
}

const TKMahjongBeginAnimalAck& TKMahjongBeginAnimalAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahjongBeginAnimalAck* TKMahjongBeginAnimalAck::default_instance_ = NULL;

TKMahjongBeginAnimalAck* TKMahjongBeginAnimalAck::New() const {
  return new TKMahjongBeginAnimalAck;
}

void TKMahjongBeginAnimalAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahjongBeginAnimalAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahjongBeginAnimalAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 requestid = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahjongBeginAnimalAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 requestid = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahjongBeginAnimalAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestid = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahjongBeginAnimalAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahjongBeginAnimalAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahjongBeginAnimalAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahjongBeginAnimalAck::MergeFrom(const TKMahjongBeginAnimalAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahjongBeginAnimalAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahjongBeginAnimalAck::CopyFrom(const TKMahjongBeginAnimalAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahjongBeginAnimalAck::IsInitialized() const {
  
  return true;
}

void TKMahjongBeginAnimalAck::Swap(TKMahjongBeginAnimalAck* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahjongBeginAnimalAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahjongBeginAnimalAck_descriptor_;
  metadata.reflection = TKMahjongBeginAnimalAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahjongEndAnimalReq::kSeatFieldNumber;
const int TKMahjongEndAnimalReq::kRequestidFieldNumber;
#endif  // !_MSC_VER

TKMahjongEndAnimalReq::TKMahjongEndAnimalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahjongEndAnimalReq::InitAsDefaultInstance() {
}

TKMahjongEndAnimalReq::TKMahjongEndAnimalReq(const TKMahjongEndAnimalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahjongEndAnimalReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahjongEndAnimalReq::~TKMahjongEndAnimalReq() {
  SharedDtor();
}

void TKMahjongEndAnimalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahjongEndAnimalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahjongEndAnimalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahjongEndAnimalReq_descriptor_;
}

const TKMahjongEndAnimalReq& TKMahjongEndAnimalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahjongEndAnimalReq* TKMahjongEndAnimalReq::default_instance_ = NULL;

TKMahjongEndAnimalReq* TKMahjongEndAnimalReq::New() const {
  return new TKMahjongEndAnimalReq;
}

void TKMahjongEndAnimalReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    requestid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahjongEndAnimalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requestid;
        break;
      }
      
      // optional int32 requestid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahjongEndAnimalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional int32 requestid = 2 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->requestid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahjongEndAnimalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional int32 requestid = 2 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->requestid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahjongEndAnimalReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional int32 requestid = 2 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahjongEndAnimalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahjongEndAnimalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahjongEndAnimalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahjongEndAnimalReq::MergeFrom(const TKMahjongEndAnimalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahjongEndAnimalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahjongEndAnimalReq::CopyFrom(const TKMahjongEndAnimalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahjongEndAnimalReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TKMahjongEndAnimalReq::Swap(TKMahjongEndAnimalReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahjongEndAnimalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahjongEndAnimalReq_descriptor_;
  metadata.reflection = TKMahjongEndAnimalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMahjongCallDataAck::kSeatFieldNumber;
const int TKMahjongCallDataAck::kCalldataFieldNumber;
#endif  // !_MSC_VER

TKMahjongCallDataAck::TKMahjongCallDataAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahjongCallDataAck::InitAsDefaultInstance() {
}

TKMahjongCallDataAck::TKMahjongCallDataAck(const TKMahjongCallDataAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahjongCallDataAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahjongCallDataAck::~TKMahjongCallDataAck() {
  SharedDtor();
}

void TKMahjongCallDataAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahjongCallDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahjongCallDataAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahjongCallDataAck_descriptor_;
}

const TKMahjongCallDataAck& TKMahjongCallDataAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahjongCallDataAck* TKMahjongCallDataAck::default_instance_ = NULL;

TKMahjongCallDataAck* TKMahjongCallDataAck::New() const {
  return new TKMahjongCallDataAck;
}

void TKMahjongCallDataAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  calldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahjongCallDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_calldata;
        break;
      }
      
      // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_calldata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMahjongCallDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
  for (int i = 0; i < this->calldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->calldata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahjongCallDataAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
  for (int i = 0; i < this->calldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->calldata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahjongCallDataAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  // repeated .cn.jj.service.msg.protocol.TKMahJongCallData calldata = 2;
  total_size += 1 * this->calldata_size();
  for (int i = 0; i < this->calldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calldata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahjongCallDataAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahjongCallDataAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahjongCallDataAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahjongCallDataAck::MergeFrom(const TKMahjongCallDataAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  calldata_.MergeFrom(from.calldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahjongCallDataAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahjongCallDataAck::CopyFrom(const TKMahjongCallDataAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahjongCallDataAck::IsInitialized() const {
  
  for (int i = 0; i < calldata_size(); i++) {
    if (!this->calldata(i).IsInitialized()) return false;
  }
  return true;
}

void TKMahjongCallDataAck::Swap(TKMahjongCallDataAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    calldata_.Swap(&other->calldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahjongCallDataAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahjongCallDataAck_descriptor_;
  metadata.reflection = TKMahjongCallDataAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TKMahjongGenZhuangAck::TKMahjongGenZhuangAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMahjongGenZhuangAck::InitAsDefaultInstance() {
}

TKMahjongGenZhuangAck::TKMahjongGenZhuangAck(const TKMahjongGenZhuangAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMahjongGenZhuangAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMahjongGenZhuangAck::~TKMahjongGenZhuangAck() {
  SharedDtor();
}

void TKMahjongGenZhuangAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TKMahjongGenZhuangAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMahjongGenZhuangAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMahjongGenZhuangAck_descriptor_;
}

const TKMahjongGenZhuangAck& TKMahjongGenZhuangAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKMJStruct_2eproto();  return *default_instance_;
}

TKMahjongGenZhuangAck* TKMahjongGenZhuangAck::default_instance_ = NULL;

TKMahjongGenZhuangAck* TKMahjongGenZhuangAck::New() const {
  return new TKMahjongGenZhuangAck;
}

void TKMahjongGenZhuangAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMahjongGenZhuangAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TKMahjongGenZhuangAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMahjongGenZhuangAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMahjongGenZhuangAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMahjongGenZhuangAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMahjongGenZhuangAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMahjongGenZhuangAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMahjongGenZhuangAck::MergeFrom(const TKMahjongGenZhuangAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMahjongGenZhuangAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMahjongGenZhuangAck::CopyFrom(const TKMahjongGenZhuangAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMahjongGenZhuangAck::IsInitialized() const {
  
  return true;
}

void TKMahjongGenZhuangAck::Swap(TKMahjongGenZhuangAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMahjongGenZhuangAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMahjongGenZhuangAck_descriptor_;
  metadata.reflection = TKMahjongGenZhuangAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace msg
}  // namespace service
}  // namespace jj
}  // namespace cn

// @@protoc_insertion_point(global_scope)
