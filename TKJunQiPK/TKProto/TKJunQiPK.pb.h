// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TKJunQiPK.proto

#ifndef PROTOBUF_TKJunQiPK_2eproto__INCLUDED
#define PROTOBUF_TKJunQiPK_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cn {
namespace jj {
namespace service {
namespace msg {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TKJunQiPK_2eproto();
void protobuf_AssignDesc_TKJunQiPK_2eproto();
void protobuf_ShutdownFile_TKJunQiPK_2eproto();

class TKMobileReqMsg;
class TKMobileAckMsg;
class JunQiPKReqMsg;
class JunQiPKAckMsg;
class Chess;
class ParaInfo;
class InitLayoutReq;
class SelectChessReq;
class MoveChessReq;
class AcotionFinishReq;
class ConcedeReq;
class PeaceReq;
class PeaceResReq;
class ShowChessReq;
class InitRuleReq;
class FeelReq;
class InitChessAck;
class StartMoveChessAck;
class SelectChessAck;
class MoveChessAck;
class ActionFinishAck;
class FinishGameAck;
class PeaceAck;
class ShowChessAck;
class ShowTipsAck;
class RefusePeaceAck;
class RepeatCountAck;
class InitRuleAck;
class InitLayoutAck;
class TimeOutAck;
class FeelAck;
class ConcedeAck;

// ===================================================================

class TKMobileReqMsg : public ::google::protobuf::Message {
 public:
  TKMobileReqMsg();
  virtual ~TKMobileReqMsg();
  
  TKMobileReqMsg(const TKMobileReqMsg& from);
  
  inline TKMobileReqMsg& operator=(const TKMobileReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TKMobileReqMsg& default_instance();
  
  void Swap(TKMobileReqMsg* other);
  
  // implements Message ----------------------------------------------
  
  TKMobileReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKMobileReqMsg& from);
  void MergeFrom(const TKMobileReqMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 param = 1;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);
  
  // optional .cn.jj.service.msg.protocol.JunQiPKReqMsg junqipk_req_msg = 66;
  inline bool has_junqipk_req_msg() const;
  inline void clear_junqipk_req_msg();
  static const int kJunqipkReqMsgFieldNumber = 66;
  inline const ::cn::jj::service::msg::protocol::JunQiPKReqMsg& junqipk_req_msg() const;
  inline ::cn::jj::service::msg::protocol::JunQiPKReqMsg* mutable_junqipk_req_msg();
  inline ::cn::jj::service::msg::protocol::JunQiPKReqMsg* release_junqipk_req_msg();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.TKMobileReqMsg)
 private:
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_junqipk_req_msg();
  inline void clear_has_junqipk_req_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cn::jj::service::msg::protocol::JunQiPKReqMsg* junqipk_req_msg_;
  ::google::protobuf::uint32 param_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static TKMobileReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class TKMobileAckMsg : public ::google::protobuf::Message {
 public:
  TKMobileAckMsg();
  virtual ~TKMobileAckMsg();
  
  TKMobileAckMsg(const TKMobileAckMsg& from);
  
  inline TKMobileAckMsg& operator=(const TKMobileAckMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TKMobileAckMsg& default_instance();
  
  void Swap(TKMobileAckMsg* other);
  
  // implements Message ----------------------------------------------
  
  TKMobileAckMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKMobileAckMsg& from);
  void MergeFrom(const TKMobileAckMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 param = 1;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);
  
  // optional .cn.jj.service.msg.protocol.JunQiPKAckMsg junqipk_ack_msg = 66;
  inline bool has_junqipk_ack_msg() const;
  inline void clear_junqipk_ack_msg();
  static const int kJunqipkAckMsgFieldNumber = 66;
  inline const ::cn::jj::service::msg::protocol::JunQiPKAckMsg& junqipk_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::JunQiPKAckMsg* mutable_junqipk_ack_msg();
  inline ::cn::jj::service::msg::protocol::JunQiPKAckMsg* release_junqipk_ack_msg();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.TKMobileAckMsg)
 private:
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_junqipk_ack_msg();
  inline void clear_has_junqipk_ack_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cn::jj::service::msg::protocol::JunQiPKAckMsg* junqipk_ack_msg_;
  ::google::protobuf::uint32 param_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static TKMobileAckMsg* default_instance_;
};
// -------------------------------------------------------------------

class JunQiPKReqMsg : public ::google::protobuf::Message {
 public:
  JunQiPKReqMsg();
  virtual ~JunQiPKReqMsg();
  
  JunQiPKReqMsg(const JunQiPKReqMsg& from);
  
  inline JunQiPKReqMsg& operator=(const JunQiPKReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JunQiPKReqMsg& default_instance();
  
  void Swap(JunQiPKReqMsg* other);
  
  // implements Message ----------------------------------------------
  
  JunQiPKReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JunQiPKReqMsg& from);
  void MergeFrom(const JunQiPKReqMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);
  
  // optional .cn.jj.service.msg.protocol.InitLayoutReq initlayout_req_msg = 2;
  inline bool has_initlayout_req_msg() const;
  inline void clear_initlayout_req_msg();
  static const int kInitlayoutReqMsgFieldNumber = 2;
  inline const ::cn::jj::service::msg::protocol::InitLayoutReq& initlayout_req_msg() const;
  inline ::cn::jj::service::msg::protocol::InitLayoutReq* mutable_initlayout_req_msg();
  inline ::cn::jj::service::msg::protocol::InitLayoutReq* release_initlayout_req_msg();
  
  // optional .cn.jj.service.msg.protocol.SelectChessReq selectchess_req_msg = 3;
  inline bool has_selectchess_req_msg() const;
  inline void clear_selectchess_req_msg();
  static const int kSelectchessReqMsgFieldNumber = 3;
  inline const ::cn::jj::service::msg::protocol::SelectChessReq& selectchess_req_msg() const;
  inline ::cn::jj::service::msg::protocol::SelectChessReq* mutable_selectchess_req_msg();
  inline ::cn::jj::service::msg::protocol::SelectChessReq* release_selectchess_req_msg();
  
  // optional .cn.jj.service.msg.protocol.MoveChessReq movechess_req_msg = 4;
  inline bool has_movechess_req_msg() const;
  inline void clear_movechess_req_msg();
  static const int kMovechessReqMsgFieldNumber = 4;
  inline const ::cn::jj::service::msg::protocol::MoveChessReq& movechess_req_msg() const;
  inline ::cn::jj::service::msg::protocol::MoveChessReq* mutable_movechess_req_msg();
  inline ::cn::jj::service::msg::protocol::MoveChessReq* release_movechess_req_msg();
  
  // optional .cn.jj.service.msg.protocol.AcotionFinishReq actionfinish_req_msg = 5;
  inline bool has_actionfinish_req_msg() const;
  inline void clear_actionfinish_req_msg();
  static const int kActionfinishReqMsgFieldNumber = 5;
  inline const ::cn::jj::service::msg::protocol::AcotionFinishReq& actionfinish_req_msg() const;
  inline ::cn::jj::service::msg::protocol::AcotionFinishReq* mutable_actionfinish_req_msg();
  inline ::cn::jj::service::msg::protocol::AcotionFinishReq* release_actionfinish_req_msg();
  
  // optional .cn.jj.service.msg.protocol.ConcedeReq concede_req_msg = 6;
  inline bool has_concede_req_msg() const;
  inline void clear_concede_req_msg();
  static const int kConcedeReqMsgFieldNumber = 6;
  inline const ::cn::jj::service::msg::protocol::ConcedeReq& concede_req_msg() const;
  inline ::cn::jj::service::msg::protocol::ConcedeReq* mutable_concede_req_msg();
  inline ::cn::jj::service::msg::protocol::ConcedeReq* release_concede_req_msg();
  
  // optional .cn.jj.service.msg.protocol.PeaceReq peace_req_msg = 7;
  inline bool has_peace_req_msg() const;
  inline void clear_peace_req_msg();
  static const int kPeaceReqMsgFieldNumber = 7;
  inline const ::cn::jj::service::msg::protocol::PeaceReq& peace_req_msg() const;
  inline ::cn::jj::service::msg::protocol::PeaceReq* mutable_peace_req_msg();
  inline ::cn::jj::service::msg::protocol::PeaceReq* release_peace_req_msg();
  
  // optional .cn.jj.service.msg.protocol.PeaceResReq peaceres_req_msg = 8;
  inline bool has_peaceres_req_msg() const;
  inline void clear_peaceres_req_msg();
  static const int kPeaceresReqMsgFieldNumber = 8;
  inline const ::cn::jj::service::msg::protocol::PeaceResReq& peaceres_req_msg() const;
  inline ::cn::jj::service::msg::protocol::PeaceResReq* mutable_peaceres_req_msg();
  inline ::cn::jj::service::msg::protocol::PeaceResReq* release_peaceres_req_msg();
  
  // optional .cn.jj.service.msg.protocol.ShowChessReq showchess_req_msg = 9;
  inline bool has_showchess_req_msg() const;
  inline void clear_showchess_req_msg();
  static const int kShowchessReqMsgFieldNumber = 9;
  inline const ::cn::jj::service::msg::protocol::ShowChessReq& showchess_req_msg() const;
  inline ::cn::jj::service::msg::protocol::ShowChessReq* mutable_showchess_req_msg();
  inline ::cn::jj::service::msg::protocol::ShowChessReq* release_showchess_req_msg();
  
  // optional .cn.jj.service.msg.protocol.InitRuleReq initrule_req_msg = 10;
  inline bool has_initrule_req_msg() const;
  inline void clear_initrule_req_msg();
  static const int kInitruleReqMsgFieldNumber = 10;
  inline const ::cn::jj::service::msg::protocol::InitRuleReq& initrule_req_msg() const;
  inline ::cn::jj::service::msg::protocol::InitRuleReq* mutable_initrule_req_msg();
  inline ::cn::jj::service::msg::protocol::InitRuleReq* release_initrule_req_msg();
  
  // optional uint32 cancellayout_req_msg = 11;
  inline bool has_cancellayout_req_msg() const;
  inline void clear_cancellayout_req_msg();
  static const int kCancellayoutReqMsgFieldNumber = 11;
  inline ::google::protobuf::uint32 cancellayout_req_msg() const;
  inline void set_cancellayout_req_msg(::google::protobuf::uint32 value);
  
  // optional .cn.jj.service.msg.protocol.FeelReq feel_req_msg = 12;
  inline bool has_feel_req_msg() const;
  inline void clear_feel_req_msg();
  static const int kFeelReqMsgFieldNumber = 12;
  inline const ::cn::jj::service::msg::protocol::FeelReq& feel_req_msg() const;
  inline ::cn::jj::service::msg::protocol::FeelReq* mutable_feel_req_msg();
  inline ::cn::jj::service::msg::protocol::FeelReq* release_feel_req_msg();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.JunQiPKReqMsg)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_initlayout_req_msg();
  inline void clear_has_initlayout_req_msg();
  inline void set_has_selectchess_req_msg();
  inline void clear_has_selectchess_req_msg();
  inline void set_has_movechess_req_msg();
  inline void clear_has_movechess_req_msg();
  inline void set_has_actionfinish_req_msg();
  inline void clear_has_actionfinish_req_msg();
  inline void set_has_concede_req_msg();
  inline void clear_has_concede_req_msg();
  inline void set_has_peace_req_msg();
  inline void clear_has_peace_req_msg();
  inline void set_has_peaceres_req_msg();
  inline void clear_has_peaceres_req_msg();
  inline void set_has_showchess_req_msg();
  inline void clear_has_showchess_req_msg();
  inline void set_has_initrule_req_msg();
  inline void clear_has_initrule_req_msg();
  inline void set_has_cancellayout_req_msg();
  inline void clear_has_cancellayout_req_msg();
  inline void set_has_feel_req_msg();
  inline void clear_has_feel_req_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cn::jj::service::msg::protocol::InitLayoutReq* initlayout_req_msg_;
  ::cn::jj::service::msg::protocol::SelectChessReq* selectchess_req_msg_;
  ::cn::jj::service::msg::protocol::MoveChessReq* movechess_req_msg_;
  ::cn::jj::service::msg::protocol::AcotionFinishReq* actionfinish_req_msg_;
  ::cn::jj::service::msg::protocol::ConcedeReq* concede_req_msg_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 cancellayout_req_msg_;
  ::cn::jj::service::msg::protocol::PeaceReq* peace_req_msg_;
  ::cn::jj::service::msg::protocol::PeaceResReq* peaceres_req_msg_;
  ::cn::jj::service::msg::protocol::ShowChessReq* showchess_req_msg_;
  ::cn::jj::service::msg::protocol::InitRuleReq* initrule_req_msg_;
  ::cn::jj::service::msg::protocol::FeelReq* feel_req_msg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static JunQiPKReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class JunQiPKAckMsg : public ::google::protobuf::Message {
 public:
  JunQiPKAckMsg();
  virtual ~JunQiPKAckMsg();
  
  JunQiPKAckMsg(const JunQiPKAckMsg& from);
  
  inline JunQiPKAckMsg& operator=(const JunQiPKAckMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JunQiPKAckMsg& default_instance();
  
  void Swap(JunQiPKAckMsg* other);
  
  // implements Message ----------------------------------------------
  
  JunQiPKAckMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JunQiPKAckMsg& from);
  void MergeFrom(const JunQiPKAckMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);
  
  // required uint32 severtime = 2;
  inline bool has_severtime() const;
  inline void clear_severtime();
  static const int kSevertimeFieldNumber = 2;
  inline ::google::protobuf::uint32 severtime() const;
  inline void set_severtime(::google::protobuf::uint32 value);
  
  // optional .cn.jj.service.msg.protocol.InitChessAck initchess_ack_msg = 3;
  inline bool has_initchess_ack_msg() const;
  inline void clear_initchess_ack_msg();
  static const int kInitchessAckMsgFieldNumber = 3;
  inline const ::cn::jj::service::msg::protocol::InitChessAck& initchess_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::InitChessAck* mutable_initchess_ack_msg();
  inline ::cn::jj::service::msg::protocol::InitChessAck* release_initchess_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.StartMoveChessAck startmovechess_ack_msg = 4;
  inline bool has_startmovechess_ack_msg() const;
  inline void clear_startmovechess_ack_msg();
  static const int kStartmovechessAckMsgFieldNumber = 4;
  inline const ::cn::jj::service::msg::protocol::StartMoveChessAck& startmovechess_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::StartMoveChessAck* mutable_startmovechess_ack_msg();
  inline ::cn::jj::service::msg::protocol::StartMoveChessAck* release_startmovechess_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.SelectChessAck selectchess_ack_msg = 5;
  inline bool has_selectchess_ack_msg() const;
  inline void clear_selectchess_ack_msg();
  static const int kSelectchessAckMsgFieldNumber = 5;
  inline const ::cn::jj::service::msg::protocol::SelectChessAck& selectchess_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::SelectChessAck* mutable_selectchess_ack_msg();
  inline ::cn::jj::service::msg::protocol::SelectChessAck* release_selectchess_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.MoveChessAck movechess_ack_msg = 6;
  inline bool has_movechess_ack_msg() const;
  inline void clear_movechess_ack_msg();
  static const int kMovechessAckMsgFieldNumber = 6;
  inline const ::cn::jj::service::msg::protocol::MoveChessAck& movechess_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::MoveChessAck* mutable_movechess_ack_msg();
  inline ::cn::jj::service::msg::protocol::MoveChessAck* release_movechess_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.ActionFinishAck actionfinish_ack_msg = 7;
  inline bool has_actionfinish_ack_msg() const;
  inline void clear_actionfinish_ack_msg();
  static const int kActionfinishAckMsgFieldNumber = 7;
  inline const ::cn::jj::service::msg::protocol::ActionFinishAck& actionfinish_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::ActionFinishAck* mutable_actionfinish_ack_msg();
  inline ::cn::jj::service::msg::protocol::ActionFinishAck* release_actionfinish_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.FinishGameAck finishgame_ack_msg = 8;
  inline bool has_finishgame_ack_msg() const;
  inline void clear_finishgame_ack_msg();
  static const int kFinishgameAckMsgFieldNumber = 8;
  inline const ::cn::jj::service::msg::protocol::FinishGameAck& finishgame_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::FinishGameAck* mutable_finishgame_ack_msg();
  inline ::cn::jj::service::msg::protocol::FinishGameAck* release_finishgame_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.PeaceAck peace_ack_msg = 9;
  inline bool has_peace_ack_msg() const;
  inline void clear_peace_ack_msg();
  static const int kPeaceAckMsgFieldNumber = 9;
  inline const ::cn::jj::service::msg::protocol::PeaceAck& peace_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::PeaceAck* mutable_peace_ack_msg();
  inline ::cn::jj::service::msg::protocol::PeaceAck* release_peace_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.ShowChessAck showchess_ack_msg = 10;
  inline bool has_showchess_ack_msg() const;
  inline void clear_showchess_ack_msg();
  static const int kShowchessAckMsgFieldNumber = 10;
  inline const ::cn::jj::service::msg::protocol::ShowChessAck& showchess_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::ShowChessAck* mutable_showchess_ack_msg();
  inline ::cn::jj::service::msg::protocol::ShowChessAck* release_showchess_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.ShowTipsAck showtips_ack_msg = 11;
  inline bool has_showtips_ack_msg() const;
  inline void clear_showtips_ack_msg();
  static const int kShowtipsAckMsgFieldNumber = 11;
  inline const ::cn::jj::service::msg::protocol::ShowTipsAck& showtips_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::ShowTipsAck* mutable_showtips_ack_msg();
  inline ::cn::jj::service::msg::protocol::ShowTipsAck* release_showtips_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.RefusePeaceAck refusepeace_ack_msg = 12;
  inline bool has_refusepeace_ack_msg() const;
  inline void clear_refusepeace_ack_msg();
  static const int kRefusepeaceAckMsgFieldNumber = 12;
  inline const ::cn::jj::service::msg::protocol::RefusePeaceAck& refusepeace_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::RefusePeaceAck* mutable_refusepeace_ack_msg();
  inline ::cn::jj::service::msg::protocol::RefusePeaceAck* release_refusepeace_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.RepeatCountAck repeatcount_ack_msg = 13;
  inline bool has_repeatcount_ack_msg() const;
  inline void clear_repeatcount_ack_msg();
  static const int kRepeatcountAckMsgFieldNumber = 13;
  inline const ::cn::jj::service::msg::protocol::RepeatCountAck& repeatcount_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::RepeatCountAck* mutable_repeatcount_ack_msg();
  inline ::cn::jj::service::msg::protocol::RepeatCountAck* release_repeatcount_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.InitRuleAck initrule_ack_msg = 14;
  inline bool has_initrule_ack_msg() const;
  inline void clear_initrule_ack_msg();
  static const int kInitruleAckMsgFieldNumber = 14;
  inline const ::cn::jj::service::msg::protocol::InitRuleAck& initrule_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::InitRuleAck* mutable_initrule_ack_msg();
  inline ::cn::jj::service::msg::protocol::InitRuleAck* release_initrule_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.InitLayoutAck initlayout_ack_msg = 15;
  inline bool has_initlayout_ack_msg() const;
  inline void clear_initlayout_ack_msg();
  static const int kInitlayoutAckMsgFieldNumber = 15;
  inline const ::cn::jj::service::msg::protocol::InitLayoutAck& initlayout_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::InitLayoutAck* mutable_initlayout_ack_msg();
  inline ::cn::jj::service::msg::protocol::InitLayoutAck* release_initlayout_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.TimeOutAck timeout_ack_msg = 16;
  inline bool has_timeout_ack_msg() const;
  inline void clear_timeout_ack_msg();
  static const int kTimeoutAckMsgFieldNumber = 16;
  inline const ::cn::jj::service::msg::protocol::TimeOutAck& timeout_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::TimeOutAck* mutable_timeout_ack_msg();
  inline ::cn::jj::service::msg::protocol::TimeOutAck* release_timeout_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.FeelAck feel_ack_msg = 17;
  inline bool has_feel_ack_msg() const;
  inline void clear_feel_ack_msg();
  static const int kFeelAckMsgFieldNumber = 17;
  inline const ::cn::jj::service::msg::protocol::FeelAck& feel_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::FeelAck* mutable_feel_ack_msg();
  inline ::cn::jj::service::msg::protocol::FeelAck* release_feel_ack_msg();
  
  // optional .cn.jj.service.msg.protocol.ConcedeAck concede_ack_msg = 18;
  inline bool has_concede_ack_msg() const;
  inline void clear_concede_ack_msg();
  static const int kConcedeAckMsgFieldNumber = 18;
  inline const ::cn::jj::service::msg::protocol::ConcedeAck& concede_ack_msg() const;
  inline ::cn::jj::service::msg::protocol::ConcedeAck* mutable_concede_ack_msg();
  inline ::cn::jj::service::msg::protocol::ConcedeAck* release_concede_ack_msg();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.JunQiPKAckMsg)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_severtime();
  inline void clear_has_severtime();
  inline void set_has_initchess_ack_msg();
  inline void clear_has_initchess_ack_msg();
  inline void set_has_startmovechess_ack_msg();
  inline void clear_has_startmovechess_ack_msg();
  inline void set_has_selectchess_ack_msg();
  inline void clear_has_selectchess_ack_msg();
  inline void set_has_movechess_ack_msg();
  inline void clear_has_movechess_ack_msg();
  inline void set_has_actionfinish_ack_msg();
  inline void clear_has_actionfinish_ack_msg();
  inline void set_has_finishgame_ack_msg();
  inline void clear_has_finishgame_ack_msg();
  inline void set_has_peace_ack_msg();
  inline void clear_has_peace_ack_msg();
  inline void set_has_showchess_ack_msg();
  inline void clear_has_showchess_ack_msg();
  inline void set_has_showtips_ack_msg();
  inline void clear_has_showtips_ack_msg();
  inline void set_has_refusepeace_ack_msg();
  inline void clear_has_refusepeace_ack_msg();
  inline void set_has_repeatcount_ack_msg();
  inline void clear_has_repeatcount_ack_msg();
  inline void set_has_initrule_ack_msg();
  inline void clear_has_initrule_ack_msg();
  inline void set_has_initlayout_ack_msg();
  inline void clear_has_initlayout_ack_msg();
  inline void set_has_timeout_ack_msg();
  inline void clear_has_timeout_ack_msg();
  inline void set_has_feel_ack_msg();
  inline void clear_has_feel_ack_msg();
  inline void set_has_concede_ack_msg();
  inline void clear_has_concede_ack_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 severtime_;
  ::cn::jj::service::msg::protocol::InitChessAck* initchess_ack_msg_;
  ::cn::jj::service::msg::protocol::StartMoveChessAck* startmovechess_ack_msg_;
  ::cn::jj::service::msg::protocol::SelectChessAck* selectchess_ack_msg_;
  ::cn::jj::service::msg::protocol::MoveChessAck* movechess_ack_msg_;
  ::cn::jj::service::msg::protocol::ActionFinishAck* actionfinish_ack_msg_;
  ::cn::jj::service::msg::protocol::FinishGameAck* finishgame_ack_msg_;
  ::cn::jj::service::msg::protocol::PeaceAck* peace_ack_msg_;
  ::cn::jj::service::msg::protocol::ShowChessAck* showchess_ack_msg_;
  ::cn::jj::service::msg::protocol::ShowTipsAck* showtips_ack_msg_;
  ::cn::jj::service::msg::protocol::RefusePeaceAck* refusepeace_ack_msg_;
  ::cn::jj::service::msg::protocol::RepeatCountAck* repeatcount_ack_msg_;
  ::cn::jj::service::msg::protocol::InitRuleAck* initrule_ack_msg_;
  ::cn::jj::service::msg::protocol::InitLayoutAck* initlayout_ack_msg_;
  ::cn::jj::service::msg::protocol::TimeOutAck* timeout_ack_msg_;
  ::cn::jj::service::msg::protocol::FeelAck* feel_ack_msg_;
  ::cn::jj::service::msg::protocol::ConcedeAck* concede_ack_msg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static JunQiPKAckMsg* default_instance_;
};
// -------------------------------------------------------------------

class Chess : public ::google::protobuf::Message {
 public:
  Chess();
  virtual ~Chess();
  
  Chess(const Chess& from);
  
  inline Chess& operator=(const Chess& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chess& default_instance();
  
  void Swap(Chess* other);
  
  // implements Message ----------------------------------------------
  
  Chess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chess& from);
  void MergeFrom(const Chess& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional int32 seat = 4;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 4;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.Chess)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_seat();
  inline void clear_has_seat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static Chess* default_instance_;
};
// -------------------------------------------------------------------

class ParaInfo : public ::google::protobuf::Message {
 public:
  ParaInfo();
  virtual ~ParaInfo();
  
  ParaInfo(const ParaInfo& from);
  
  inline ParaInfo& operator=(const ParaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParaInfo& default_instance();
  
  void Swap(ParaInfo* other);
  
  // implements Message ----------------------------------------------
  
  ParaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParaInfo& from);
  void MergeFrom(const ParaInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 one = 1;
  inline bool has_one() const;
  inline void clear_one();
  static const int kOneFieldNumber = 1;
  inline ::google::protobuf::int32 one() const;
  inline void set_one(::google::protobuf::int32 value);
  
  // optional int32 two = 2;
  inline bool has_two() const;
  inline void clear_two();
  static const int kTwoFieldNumber = 2;
  inline ::google::protobuf::int32 two() const;
  inline void set_two(::google::protobuf::int32 value);
  
  // optional int32 three = 3;
  inline bool has_three() const;
  inline void clear_three();
  static const int kThreeFieldNumber = 3;
  inline ::google::protobuf::int32 three() const;
  inline void set_three(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.ParaInfo)
 private:
  inline void set_has_one();
  inline void clear_has_one();
  inline void set_has_two();
  inline void clear_has_two();
  inline void set_has_three();
  inline void clear_has_three();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 one_;
  ::google::protobuf::int32 two_;
  ::google::protobuf::int32 three_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static ParaInfo* default_instance_;
};
// -------------------------------------------------------------------

class InitLayoutReq : public ::google::protobuf::Message {
 public:
  InitLayoutReq();
  virtual ~InitLayoutReq();
  
  InitLayoutReq(const InitLayoutReq& from);
  
  inline InitLayoutReq& operator=(const InitLayoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitLayoutReq& default_instance();
  
  void Swap(InitLayoutReq* other);
  
  // implements Message ----------------------------------------------
  
  InitLayoutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitLayoutReq& from);
  void MergeFrom(const InitLayoutReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional string layout = 2;
  inline bool has_layout() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 2;
  inline const ::std::string& layout() const;
  inline void set_layout(const ::std::string& value);
  inline void set_layout(const char* value);
  inline void set_layout(const char* value, size_t size);
  inline ::std::string* mutable_layout();
  inline ::std::string* release_layout();
  
  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 headimg = 4;
  inline bool has_headimg() const;
  inline void clear_headimg();
  static const int kHeadimgFieldNumber = 4;
  inline ::google::protobuf::int32 headimg() const;
  inline void set_headimg(::google::protobuf::int32 value);
  
  // optional int32 param = 5;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 5;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.InitLayoutReq)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_layout();
  inline void clear_has_layout();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_headimg();
  inline void clear_has_headimg();
  inline void set_has_param();
  inline void clear_has_param();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* layout_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 headimg_;
  ::google::protobuf::int32 param_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static InitLayoutReq* default_instance_;
};
// -------------------------------------------------------------------

class SelectChessReq : public ::google::protobuf::Message {
 public:
  SelectChessReq();
  virtual ~SelectChessReq();
  
  SelectChessReq(const SelectChessReq& from);
  
  inline SelectChessReq& operator=(const SelectChessReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectChessReq& default_instance();
  
  void Swap(SelectChessReq* other);
  
  // implements Message ----------------------------------------------
  
  SelectChessReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectChessReq& from);
  void MergeFrom(const SelectChessReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.SelectChessReq)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static SelectChessReq* default_instance_;
};
// -------------------------------------------------------------------

class MoveChessReq : public ::google::protobuf::Message {
 public:
  MoveChessReq();
  virtual ~MoveChessReq();
  
  MoveChessReq(const MoveChessReq& from);
  
  inline MoveChessReq& operator=(const MoveChessReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveChessReq& default_instance();
  
  void Swap(MoveChessReq* other);
  
  // implements Message ----------------------------------------------
  
  MoveChessReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveChessReq& from);
  void MergeFrom(const MoveChessReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional int32 atpos = 2;
  inline bool has_atpos() const;
  inline void clear_atpos();
  static const int kAtposFieldNumber = 2;
  inline ::google::protobuf::int32 atpos() const;
  inline void set_atpos(::google::protobuf::int32 value);
  
  // optional int32 topos = 3;
  inline bool has_topos() const;
  inline void clear_topos();
  static const int kToposFieldNumber = 3;
  inline ::google::protobuf::int32 topos() const;
  inline void set_topos(::google::protobuf::int32 value);
  
  // optional int32 isconfirm = 4;
  inline bool has_isconfirm() const;
  inline void clear_isconfirm();
  static const int kIsconfirmFieldNumber = 4;
  inline ::google::protobuf::int32 isconfirm() const;
  inline void set_isconfirm(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.MoveChessReq)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_atpos();
  inline void clear_has_atpos();
  inline void set_has_topos();
  inline void clear_has_topos();
  inline void set_has_isconfirm();
  inline void clear_has_isconfirm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 atpos_;
  ::google::protobuf::int32 topos_;
  ::google::protobuf::int32 isconfirm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static MoveChessReq* default_instance_;
};
// -------------------------------------------------------------------

class AcotionFinishReq : public ::google::protobuf::Message {
 public:
  AcotionFinishReq();
  virtual ~AcotionFinishReq();
  
  AcotionFinishReq(const AcotionFinishReq& from);
  
  inline AcotionFinishReq& operator=(const AcotionFinishReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcotionFinishReq& default_instance();
  
  void Swap(AcotionFinishReq* other);
  
  // implements Message ----------------------------------------------
  
  AcotionFinishReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcotionFinishReq& from);
  void MergeFrom(const AcotionFinishReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.AcotionFinishReq)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static AcotionFinishReq* default_instance_;
};
// -------------------------------------------------------------------

class ConcedeReq : public ::google::protobuf::Message {
 public:
  ConcedeReq();
  virtual ~ConcedeReq();
  
  ConcedeReq(const ConcedeReq& from);
  
  inline ConcedeReq& operator=(const ConcedeReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcedeReq& default_instance();
  
  void Swap(ConcedeReq* other);
  
  // implements Message ----------------------------------------------
  
  ConcedeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcedeReq& from);
  void MergeFrom(const ConcedeReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.ConcedeReq)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static ConcedeReq* default_instance_;
};
// -------------------------------------------------------------------

class PeaceReq : public ::google::protobuf::Message {
 public:
  PeaceReq();
  virtual ~PeaceReq();
  
  PeaceReq(const PeaceReq& from);
  
  inline PeaceReq& operator=(const PeaceReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeaceReq& default_instance();
  
  void Swap(PeaceReq* other);
  
  // implements Message ----------------------------------------------
  
  PeaceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeaceReq& from);
  void MergeFrom(const PeaceReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.PeaceReq)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static PeaceReq* default_instance_;
};
// -------------------------------------------------------------------

class PeaceResReq : public ::google::protobuf::Message {
 public:
  PeaceResReq();
  virtual ~PeaceResReq();
  
  PeaceResReq(const PeaceResReq& from);
  
  inline PeaceResReq& operator=(const PeaceResReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeaceResReq& default_instance();
  
  void Swap(PeaceResReq* other);
  
  // implements Message ----------------------------------------------
  
  PeaceResReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeaceResReq& from);
  void MergeFrom(const PeaceResReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional int32 agree = 2;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 2;
  inline ::google::protobuf::int32 agree() const;
  inline void set_agree(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.PeaceResReq)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_agree();
  inline void clear_has_agree();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 agree_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static PeaceResReq* default_instance_;
};
// -------------------------------------------------------------------

class ShowChessReq : public ::google::protobuf::Message {
 public:
  ShowChessReq();
  virtual ~ShowChessReq();
  
  ShowChessReq(const ShowChessReq& from);
  
  inline ShowChessReq& operator=(const ShowChessReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowChessReq& default_instance();
  
  void Swap(ShowChessReq* other);
  
  // implements Message ----------------------------------------------
  
  ShowChessReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowChessReq& from);
  void MergeFrom(const ShowChessReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 atpos = 1;
  inline bool has_atpos() const;
  inline void clear_atpos();
  static const int kAtposFieldNumber = 1;
  inline ::google::protobuf::int32 atpos() const;
  inline void set_atpos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.ShowChessReq)
 private:
  inline void set_has_atpos();
  inline void clear_has_atpos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 atpos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static ShowChessReq* default_instance_;
};
// -------------------------------------------------------------------

class InitRuleReq : public ::google::protobuf::Message {
 public:
  InitRuleReq();
  virtual ~InitRuleReq();
  
  InitRuleReq(const InitRuleReq& from);
  
  inline InitRuleReq& operator=(const InitRuleReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitRuleReq& default_instance();
  
  void Swap(InitRuleReq* other);
  
  // implements Message ----------------------------------------------
  
  InitRuleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitRuleReq& from);
  void MergeFrom(const InitRuleReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 gametype = 1;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 1;
  inline ::google::protobuf::int32 gametype() const;
  inline void set_gametype(::google::protobuf::int32 value);
  
  // optional int32 cleandilei = 2;
  inline bool has_cleandilei() const;
  inline void clear_cleandilei();
  static const int kCleandileiFieldNumber = 2;
  inline ::google::protobuf::int32 cleandilei() const;
  inline void set_cleandilei(::google::protobuf::int32 value);
  
  // optional int32 carryjunqi = 3;
  inline bool has_carryjunqi() const;
  inline void clear_carryjunqi();
  static const int kCarryjunqiFieldNumber = 3;
  inline ::google::protobuf::int32 carryjunqi() const;
  inline void set_carryjunqi(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.InitRuleReq)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_cleandilei();
  inline void clear_has_cleandilei();
  inline void set_has_carryjunqi();
  inline void clear_has_carryjunqi();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 gametype_;
  ::google::protobuf::int32 cleandilei_;
  ::google::protobuf::int32 carryjunqi_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static InitRuleReq* default_instance_;
};
// -------------------------------------------------------------------

class FeelReq : public ::google::protobuf::Message {
 public:
  FeelReq();
  virtual ~FeelReq();
  
  FeelReq(const FeelReq& from);
  
  inline FeelReq& operator=(const FeelReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeelReq& default_instance();
  
  void Swap(FeelReq* other);
  
  // implements Message ----------------------------------------------
  
  FeelReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeelReq& from);
  void MergeFrom(const FeelReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline ::google::protobuf::uint32 from() const;
  inline void set_from(::google::protobuf::uint32 value);
  
  // optional uint32 to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline ::google::protobuf::uint32 to() const;
  inline void set_to(::google::protobuf::uint32 value);
  
  // optional uint32 feel = 3;
  inline bool has_feel() const;
  inline void clear_feel();
  static const int kFeelFieldNumber = 3;
  inline ::google::protobuf::uint32 feel() const;
  inline void set_feel(::google::protobuf::uint32 value);
  
  // optional string str = 4;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 4;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.FeelReq)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_feel();
  inline void clear_has_feel();
  inline void set_has_str();
  inline void clear_has_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 from_;
  ::google::protobuf::uint32 to_;
  ::std::string* str_;
  ::google::protobuf::uint32 feel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static FeelReq* default_instance_;
};
// -------------------------------------------------------------------

class InitChessAck : public ::google::protobuf::Message {
 public:
  InitChessAck();
  virtual ~InitChessAck();
  
  InitChessAck(const InitChessAck& from);
  
  inline InitChessAck& operator=(const InitChessAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitChessAck& default_instance();
  
  void Swap(InitChessAck* other);
  
  // implements Message ----------------------------------------------
  
  InitChessAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitChessAck& from);
  void MergeFrom(const InitChessAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 pos = 1;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos(int index) const;
  inline void set_pos(int index, ::google::protobuf::int32 value);
  inline void add_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pos();
  
  // repeated int32 honor = 2;
  inline int honor_size() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 2;
  inline ::google::protobuf::int32 honor(int index) const;
  inline void set_honor(int index, ::google::protobuf::int32 value);
  inline void add_honor(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      honor() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_honor();
  
  // repeated int32 hands = 3;
  inline int hands_size() const;
  inline void clear_hands();
  static const int kHandsFieldNumber = 3;
  inline ::google::protobuf::int32 hands(int index) const;
  inline void set_hands(int index, ::google::protobuf::int32 value);
  inline void add_hands(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hands() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hands();
  
  // repeated int32 wins = 4;
  inline int wins_size() const;
  inline void clear_wins();
  static const int kWinsFieldNumber = 4;
  inline ::google::protobuf::int32 wins(int index) const;
  inline void set_wins(int index, ::google::protobuf::int32 value);
  inline void add_wins(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wins() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wins();
  
  // repeated int32 breaks = 5;
  inline int breaks_size() const;
  inline void clear_breaks();
  static const int kBreaksFieldNumber = 5;
  inline ::google::protobuf::int32 breaks(int index) const;
  inline void set_breaks(int index, ::google::protobuf::int32 value);
  inline void add_breaks(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      breaks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_breaks();
  
  // repeated int32 grade = 6;
  inline int grade_size() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 6;
  inline ::google::protobuf::int32 grade(int index) const;
  inline void set_grade(int index, ::google::protobuf::int32 value);
  inline void add_grade(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      grade() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_grade();
  
  // optional int32 gametype = 7;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 7;
  inline ::google::protobuf::int32 gametype() const;
  inline void set_gametype(::google::protobuf::int32 value);
  
  // optional int32 cleandilei = 8;
  inline bool has_cleandilei() const;
  inline void clear_cleandilei();
  static const int kCleandileiFieldNumber = 8;
  inline ::google::protobuf::int32 cleandilei() const;
  inline void set_cleandilei(::google::protobuf::int32 value);
  
  // optional int32 carryjunqi = 9;
  inline bool has_carryjunqi() const;
  inline void clear_carryjunqi();
  static const int kCarryjunqiFieldNumber = 9;
  inline ::google::protobuf::int32 carryjunqi() const;
  inline void set_carryjunqi(::google::protobuf::int32 value);
  
  // repeated int32 fanhands = 10;
  inline int fanhands_size() const;
  inline void clear_fanhands();
  static const int kFanhandsFieldNumber = 10;
  inline ::google::protobuf::int32 fanhands(int index) const;
  inline void set_fanhands(int index, ::google::protobuf::int32 value);
  inline void add_fanhands(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fanhands() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fanhands();
  
  // repeated int32 fanwins = 11;
  inline int fanwins_size() const;
  inline void clear_fanwins();
  static const int kFanwinsFieldNumber = 11;
  inline ::google::protobuf::int32 fanwins(int index) const;
  inline void set_fanwins(int index, ::google::protobuf::int32 value);
  inline void add_fanwins(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fanwins() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fanwins();
  
  // repeated int32 fandraws = 12;
  inline int fandraws_size() const;
  inline void clear_fandraws();
  static const int kFandrawsFieldNumber = 12;
  inline ::google::protobuf::int32 fandraws(int index) const;
  inline void set_fandraws(int index, ::google::protobuf::int32 value);
  inline void add_fandraws(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fandraws() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fandraws();
  
  // repeated int32 fandbreaks = 13;
  inline int fandbreaks_size() const;
  inline void clear_fandbreaks();
  static const int kFandbreaksFieldNumber = 13;
  inline ::google::protobuf::int32 fandbreaks(int index) const;
  inline void set_fandbreaks(int index, ::google::protobuf::int32 value);
  inline void add_fandbreaks(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fandbreaks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fandbreaks();
  
  // repeated int32 anhands = 14;
  inline int anhands_size() const;
  inline void clear_anhands();
  static const int kAnhandsFieldNumber = 14;
  inline ::google::protobuf::int32 anhands(int index) const;
  inline void set_anhands(int index, ::google::protobuf::int32 value);
  inline void add_anhands(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      anhands() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_anhands();
  
  // repeated int32 anwins = 15;
  inline int anwins_size() const;
  inline void clear_anwins();
  static const int kAnwinsFieldNumber = 15;
  inline ::google::protobuf::int32 anwins(int index) const;
  inline void set_anwins(int index, ::google::protobuf::int32 value);
  inline void add_anwins(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      anwins() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_anwins();
  
  // repeated int32 andraws = 16;
  inline int andraws_size() const;
  inline void clear_andraws();
  static const int kAndrawsFieldNumber = 16;
  inline ::google::protobuf::int32 andraws(int index) const;
  inline void set_andraws(int index, ::google::protobuf::int32 value);
  inline void add_andraws(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      andraws() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_andraws();
  
  // repeated int32 andbreaks = 17;
  inline int andbreaks_size() const;
  inline void clear_andbreaks();
  static const int kAndbreaksFieldNumber = 17;
  inline ::google::protobuf::int32 andbreaks(int index) const;
  inline void set_andbreaks(int index, ::google::protobuf::int32 value);
  inline void add_andbreaks(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      andbreaks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_andbreaks();
  
  // optional .cn.jj.service.msg.protocol.ParaInfo paras = 18;
  inline bool has_paras() const;
  inline void clear_paras();
  static const int kParasFieldNumber = 18;
  inline const ::cn::jj::service::msg::protocol::ParaInfo& paras() const;
  inline ::cn::jj::service::msg::protocol::ParaInfo* mutable_paras();
  inline ::cn::jj::service::msg::protocol::ParaInfo* release_paras();
  
  // optional string serverversion = 19;
  inline bool has_serverversion() const;
  inline void clear_serverversion();
  static const int kServerversionFieldNumber = 19;
  inline const ::std::string& serverversion() const;
  inline void set_serverversion(const ::std::string& value);
  inline void set_serverversion(const char* value);
  inline void set_serverversion(const char* value, size_t size);
  inline ::std::string* mutable_serverversion();
  inline ::std::string* release_serverversion();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.InitChessAck)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_cleandilei();
  inline void clear_has_cleandilei();
  inline void set_has_carryjunqi();
  inline void clear_has_carryjunqi();
  inline void set_has_paras();
  inline void clear_has_paras();
  inline void set_has_serverversion();
  inline void clear_has_serverversion();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > honor_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hands_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wins_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > breaks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > grade_;
  ::google::protobuf::int32 gametype_;
  ::google::protobuf::int32 cleandilei_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fanhands_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fanwins_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fandraws_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fandbreaks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > anhands_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > anwins_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > andraws_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > andbreaks_;
  ::cn::jj::service::msg::protocol::ParaInfo* paras_;
  ::std::string* serverversion_;
  ::google::protobuf::int32 carryjunqi_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static InitChessAck* default_instance_;
};
// -------------------------------------------------------------------

class StartMoveChessAck : public ::google::protobuf::Message {
 public:
  StartMoveChessAck();
  virtual ~StartMoveChessAck();
  
  StartMoveChessAck(const StartMoveChessAck& from);
  
  inline StartMoveChessAck& operator=(const StartMoveChessAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartMoveChessAck& default_instance();
  
  void Swap(StartMoveChessAck* other);
  
  // implements Message ----------------------------------------------
  
  StartMoveChessAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartMoveChessAck& from);
  void MergeFrom(const StartMoveChessAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional string layout = 2;
  inline bool has_layout() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 2;
  inline const ::std::string& layout() const;
  inline void set_layout(const ::std::string& value);
  inline void set_layout(const char* value);
  inline void set_layout(const char* value, size_t size);
  inline ::std::string* mutable_layout();
  inline ::std::string* release_layout();
  
  // repeated int32 headimg = 3;
  inline int headimg_size() const;
  inline void clear_headimg();
  static const int kHeadimgFieldNumber = 3;
  inline ::google::protobuf::int32 headimg(int index) const;
  inline void set_headimg(int index, ::google::protobuf::int32 value);
  inline void add_headimg(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      headimg() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_headimg();
  
  // repeated uint32 overseat = 4;
  inline int overseat_size() const;
  inline void clear_overseat();
  static const int kOverseatFieldNumber = 4;
  inline ::google::protobuf::uint32 overseat(int index) const;
  inline void set_overseat(int index, ::google::protobuf::uint32 value);
  inline void add_overseat(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      overseat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_overseat();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.StartMoveChessAck)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_layout();
  inline void clear_has_layout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* layout_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > headimg_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > overseat_;
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static StartMoveChessAck* default_instance_;
};
// -------------------------------------------------------------------

class SelectChessAck : public ::google::protobuf::Message {
 public:
  SelectChessAck();
  virtual ~SelectChessAck();
  
  SelectChessAck(const SelectChessAck& from);
  
  inline SelectChessAck& operator=(const SelectChessAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectChessAck& default_instance();
  
  void Swap(SelectChessAck* other);
  
  // implements Message ----------------------------------------------
  
  SelectChessAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectChessAck& from);
  void MergeFrom(const SelectChessAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // repeated int32 postions = 3 [packed = true];
  inline int postions_size() const;
  inline void clear_postions();
  static const int kPostionsFieldNumber = 3;
  inline ::google::protobuf::int32 postions(int index) const;
  inline void set_postions(int index, ::google::protobuf::int32 value);
  inline void add_postions(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      postions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_postions();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.SelectChessAck)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > postions_;
  mutable int _postions_cached_byte_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static SelectChessAck* default_instance_;
};
// -------------------------------------------------------------------

class MoveChessAck : public ::google::protobuf::Message {
 public:
  MoveChessAck();
  virtual ~MoveChessAck();
  
  MoveChessAck(const MoveChessAck& from);
  
  inline MoveChessAck& operator=(const MoveChessAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveChessAck& default_instance();
  
  void Swap(MoveChessAck* other);
  
  // implements Message ----------------------------------------------
  
  MoveChessAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveChessAck& from);
  void MergeFrom(const MoveChessAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // repeated int32 path = 2 [packed = true];
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline ::google::protobuf::int32 path(int index) const;
  inline void set_path(int index, ::google::protobuf::int32 value);
  inline void add_path(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      path() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_path();
  
  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional int32 event = 4;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 4;
  inline ::google::protobuf::int32 event() const;
  inline void set_event(::google::protobuf::int32 value);
  
  // optional int32 step = 5;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 5;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);
  
  // optional int32 chesstype = 6;
  inline bool has_chesstype() const;
  inline void clear_chesstype();
  static const int kChesstypeFieldNumber = 6;
  inline ::google::protobuf::int32 chesstype() const;
  inline void set_chesstype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.MoveChessAck)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_chesstype();
  inline void clear_has_chesstype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > path_;
  mutable int _path_cached_byte_size_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 event_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::int32 chesstype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static MoveChessAck* default_instance_;
};
// -------------------------------------------------------------------

class ActionFinishAck : public ::google::protobuf::Message {
 public:
  ActionFinishAck();
  virtual ~ActionFinishAck();
  
  ActionFinishAck(const ActionFinishAck& from);
  
  inline ActionFinishAck& operator=(const ActionFinishAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionFinishAck& default_instance();
  
  void Swap(ActionFinishAck* other);
  
  // implements Message ----------------------------------------------
  
  ActionFinishAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionFinishAck& from);
  void MergeFrom(const ActionFinishAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nextseat = 1;
  inline bool has_nextseat() const;
  inline void clear_nextseat();
  static const int kNextseatFieldNumber = 1;
  inline ::google::protobuf::int32 nextseat() const;
  inline void set_nextseat(::google::protobuf::int32 value);
  
  // repeated .cn.jj.service.msg.protocol.Chess chess = 2;
  inline int chess_size() const;
  inline void clear_chess();
  static const int kChessFieldNumber = 2;
  inline const ::cn::jj::service::msg::protocol::Chess& chess(int index) const;
  inline ::cn::jj::service::msg::protocol::Chess* mutable_chess(int index);
  inline ::cn::jj::service::msg::protocol::Chess* add_chess();
  inline const ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::Chess >&
      chess() const;
  inline ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::Chess >*
      mutable_chess();
  
  // optional int32 movetime = 3;
  inline bool has_movetime() const;
  inline void clear_movetime();
  static const int kMovetimeFieldNumber = 3;
  inline ::google::protobuf::int32 movetime() const;
  inline void set_movetime(::google::protobuf::int32 value);
  
  // repeated int32 overseat = 4;
  inline int overseat_size() const;
  inline void clear_overseat();
  static const int kOverseatFieldNumber = 4;
  inline ::google::protobuf::int32 overseat(int index) const;
  inline void set_overseat(int index, ::google::protobuf::int32 value);
  inline void add_overseat(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      overseat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_overseat();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.ActionFinishAck)
 private:
  inline void set_has_nextseat();
  inline void clear_has_nextseat();
  inline void set_has_movetime();
  inline void clear_has_movetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::Chess > chess_;
  ::google::protobuf::int32 nextseat_;
  ::google::protobuf::int32 movetime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > overseat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static ActionFinishAck* default_instance_;
};
// -------------------------------------------------------------------

class FinishGameAck : public ::google::protobuf::Message {
 public:
  FinishGameAck();
  virtual ~FinishGameAck();
  
  FinishGameAck(const FinishGameAck& from);
  
  inline FinishGameAck& operator=(const FinishGameAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishGameAck& default_instance();
  
  void Swap(FinishGameAck* other);
  
  // implements Message ----------------------------------------------
  
  FinishGameAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinishGameAck& from);
  void MergeFrom(const FinishGameAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result(int index) const;
  inline void set_result(int index, ::google::protobuf::int32 value);
  inline void add_result(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      result() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_result();
  
  // repeated string layout = 2;
  inline int layout_size() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 2;
  inline const ::std::string& layout(int index) const;
  inline ::std::string* mutable_layout(int index);
  inline void set_layout(int index, const ::std::string& value);
  inline void set_layout(int index, const char* value);
  inline void set_layout(int index, const char* value, size_t size);
  inline ::std::string* add_layout();
  inline void add_layout(const ::std::string& value);
  inline void add_layout(const char* value);
  inline void add_layout(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& layout() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_layout();
  
  // repeated int32 honor = 3;
  inline int honor_size() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 3;
  inline ::google::protobuf::int32 honor(int index) const;
  inline void set_honor(int index, ::google::protobuf::int32 value);
  inline void add_honor(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      honor() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_honor();
  
  // repeated int32 grade = 4;
  inline int grade_size() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 4;
  inline ::google::protobuf::int32 grade(int index) const;
  inline void set_grade(int index, ::google::protobuf::int32 value);
  inline void add_grade(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      grade() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_grade();
  
  // repeated uint32 urlparas = 5;
  inline int urlparas_size() const;
  inline void clear_urlparas();
  static const int kUrlparasFieldNumber = 5;
  inline ::google::protobuf::uint32 urlparas(int index) const;
  inline void set_urlparas(int index, ::google::protobuf::uint32 value);
  inline void add_urlparas(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      urlparas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_urlparas();
  
  // optional uint32 endtype = 6;
  inline bool has_endtype() const;
  inline void clear_endtype();
  static const int kEndtypeFieldNumber = 6;
  inline ::google::protobuf::uint32 endtype() const;
  inline void set_endtype(::google::protobuf::uint32 value);
  
  // repeated uint32 timeoutcost = 7;
  inline int timeoutcost_size() const;
  inline void clear_timeoutcost();
  static const int kTimeoutcostFieldNumber = 7;
  inline ::google::protobuf::uint32 timeoutcost(int index) const;
  inline void set_timeoutcost(int index, ::google::protobuf::uint32 value);
  inline void add_timeoutcost(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      timeoutcost() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_timeoutcost();
  
  // repeated uint32 usedware = 8;
  inline int usedware_size() const;
  inline void clear_usedware();
  static const int kUsedwareFieldNumber = 8;
  inline ::google::protobuf::uint32 usedware(int index) const;
  inline void set_usedware(int index, ::google::protobuf::uint32 value);
  inline void add_usedware(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      usedware() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_usedware();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.FinishGameAck)
 private:
  inline void set_has_endtype();
  inline void clear_has_endtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> layout_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > honor_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > grade_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > urlparas_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > timeoutcost_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > usedware_;
  ::google::protobuf::uint32 endtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static FinishGameAck* default_instance_;
};
// -------------------------------------------------------------------

class PeaceAck : public ::google::protobuf::Message {
 public:
  PeaceAck();
  virtual ~PeaceAck();
  
  PeaceAck(const PeaceAck& from);
  
  inline PeaceAck& operator=(const PeaceAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeaceAck& default_instance();
  
  void Swap(PeaceAck* other);
  
  // implements Message ----------------------------------------------
  
  PeaceAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeaceAck& from);
  void MergeFrom(const PeaceAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.PeaceAck)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static PeaceAck* default_instance_;
};
// -------------------------------------------------------------------

class ShowChessAck : public ::google::protobuf::Message {
 public:
  ShowChessAck();
  virtual ~ShowChessAck();
  
  ShowChessAck(const ShowChessAck& from);
  
  inline ShowChessAck& operator=(const ShowChessAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowChessAck& default_instance();
  
  void Swap(ShowChessAck* other);
  
  // implements Message ----------------------------------------------
  
  ShowChessAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowChessAck& from);
  void MergeFrom(const ShowChessAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .cn.jj.service.msg.protocol.Chess chess = 1;
  inline bool has_chess() const;
  inline void clear_chess();
  static const int kChessFieldNumber = 1;
  inline const ::cn::jj::service::msg::protocol::Chess& chess() const;
  inline ::cn::jj::service::msg::protocol::Chess* mutable_chess();
  inline ::cn::jj::service::msg::protocol::Chess* release_chess();
  
  // optional int32 step = 2;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 2;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);
  
  // repeated int32 color = 3;
  inline int color_size() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline ::google::protobuf::int32 color(int index) const;
  inline void set_color(int index, ::google::protobuf::int32 value);
  inline void add_color(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      color() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_color();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.ShowChessAck)
 private:
  inline void set_has_chess();
  inline void clear_has_chess();
  inline void set_has_step();
  inline void clear_has_step();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cn::jj::service::msg::protocol::Chess* chess_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > color_;
  ::google::protobuf::int32 step_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static ShowChessAck* default_instance_;
};
// -------------------------------------------------------------------

class ShowTipsAck : public ::google::protobuf::Message {
 public:
  ShowTipsAck();
  virtual ~ShowTipsAck();
  
  ShowTipsAck(const ShowTipsAck& from);
  
  inline ShowTipsAck& operator=(const ShowTipsAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowTipsAck& default_instance();
  
  void Swap(ShowTipsAck* other);
  
  // implements Message ----------------------------------------------
  
  ShowTipsAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowTipsAck& from);
  void MergeFrom(const ShowTipsAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional int32 tips = 2;
  inline bool has_tips() const;
  inline void clear_tips();
  static const int kTipsFieldNumber = 2;
  inline ::google::protobuf::int32 tips() const;
  inline void set_tips(::google::protobuf::int32 value);
  
  // optional int32 reducetime = 3;
  inline bool has_reducetime() const;
  inline void clear_reducetime();
  static const int kReducetimeFieldNumber = 3;
  inline ::google::protobuf::int32 reducetime() const;
  inline void set_reducetime(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.ShowTipsAck)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_tips();
  inline void clear_has_tips();
  inline void set_has_reducetime();
  inline void clear_has_reducetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 tips_;
  ::google::protobuf::int32 reducetime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static ShowTipsAck* default_instance_;
};
// -------------------------------------------------------------------

class RefusePeaceAck : public ::google::protobuf::Message {
 public:
  RefusePeaceAck();
  virtual ~RefusePeaceAck();
  
  RefusePeaceAck(const RefusePeaceAck& from);
  
  inline RefusePeaceAck& operator=(const RefusePeaceAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefusePeaceAck& default_instance();
  
  void Swap(RefusePeaceAck* other);
  
  // implements Message ----------------------------------------------
  
  RefusePeaceAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefusePeaceAck& from);
  void MergeFrom(const RefusePeaceAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional int32 disseat = 2;
  inline bool has_disseat() const;
  inline void clear_disseat();
  static const int kDisseatFieldNumber = 2;
  inline ::google::protobuf::int32 disseat() const;
  inline void set_disseat(::google::protobuf::int32 value);
  
  // optional int32 seat = 3;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 3;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.RefusePeaceAck)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_disseat();
  inline void clear_has_disseat();
  inline void set_has_seat();
  inline void clear_has_seat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 disseat_;
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static RefusePeaceAck* default_instance_;
};
// -------------------------------------------------------------------

class RepeatCountAck : public ::google::protobuf::Message {
 public:
  RepeatCountAck();
  virtual ~RepeatCountAck();
  
  RepeatCountAck(const RepeatCountAck& from);
  
  inline RepeatCountAck& operator=(const RepeatCountAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RepeatCountAck& default_instance();
  
  void Swap(RepeatCountAck* other);
  
  // implements Message ----------------------------------------------
  
  RepeatCountAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepeatCountAck& from);
  void MergeFrom(const RepeatCountAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.RepeatCountAck)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static RepeatCountAck* default_instance_;
};
// -------------------------------------------------------------------

class InitRuleAck : public ::google::protobuf::Message {
 public:
  InitRuleAck();
  virtual ~InitRuleAck();
  
  InitRuleAck(const InitRuleAck& from);
  
  inline InitRuleAck& operator=(const InitRuleAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitRuleAck& default_instance();
  
  void Swap(InitRuleAck* other);
  
  // implements Message ----------------------------------------------
  
  InitRuleAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitRuleAck& from);
  void MergeFrom(const InitRuleAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 reserve = 1;
  inline bool has_reserve() const;
  inline void clear_reserve();
  static const int kReserveFieldNumber = 1;
  inline ::google::protobuf::int32 reserve() const;
  inline void set_reserve(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.InitRuleAck)
 private:
  inline void set_has_reserve();
  inline void clear_has_reserve();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 reserve_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static InitRuleAck* default_instance_;
};
// -------------------------------------------------------------------

class InitLayoutAck : public ::google::protobuf::Message {
 public:
  InitLayoutAck();
  virtual ~InitLayoutAck();
  
  InitLayoutAck(const InitLayoutAck& from);
  
  inline InitLayoutAck& operator=(const InitLayoutAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitLayoutAck& default_instance();
  
  void Swap(InitLayoutAck* other);
  
  // implements Message ----------------------------------------------
  
  InitLayoutAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitLayoutAck& from);
  void MergeFrom(const InitLayoutAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 layoutstate = 5;
  inline int layoutstate_size() const;
  inline void clear_layoutstate();
  static const int kLayoutstateFieldNumber = 5;
  inline ::google::protobuf::int32 layoutstate(int index) const;
  inline void set_layoutstate(int index, ::google::protobuf::int32 value);
  inline void add_layoutstate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      layoutstate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_layoutstate();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.InitLayoutAck)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > layoutstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static InitLayoutAck* default_instance_;
};
// -------------------------------------------------------------------

class TimeOutAck : public ::google::protobuf::Message {
 public:
  TimeOutAck();
  virtual ~TimeOutAck();
  
  TimeOutAck(const TimeOutAck& from);
  
  inline TimeOutAck& operator=(const TimeOutAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeOutAck& default_instance();
  
  void Swap(TimeOutAck* other);
  
  // implements Message ----------------------------------------------
  
  TimeOutAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeOutAck& from);
  void MergeFrom(const TimeOutAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional int32 reducetime = 3;
  inline bool has_reducetime() const;
  inline void clear_reducetime();
  static const int kReducetimeFieldNumber = 3;
  inline ::google::protobuf::int32 reducetime() const;
  inline void set_reducetime(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.TimeOutAck)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_reducetime();
  inline void clear_has_reducetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 reducetime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static TimeOutAck* default_instance_;
};
// -------------------------------------------------------------------

class FeelAck : public ::google::protobuf::Message {
 public:
  FeelAck();
  virtual ~FeelAck();
  
  FeelAck(const FeelAck& from);
  
  inline FeelAck& operator=(const FeelAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeelAck& default_instance();
  
  void Swap(FeelAck* other);
  
  // implements Message ----------------------------------------------
  
  FeelAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeelAck& from);
  void MergeFrom(const FeelAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline ::google::protobuf::uint32 from() const;
  inline void set_from(::google::protobuf::uint32 value);
  
  // optional uint32 to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline ::google::protobuf::uint32 to() const;
  inline void set_to(::google::protobuf::uint32 value);
  
  // optional uint32 feel = 3;
  inline bool has_feel() const;
  inline void clear_feel();
  static const int kFeelFieldNumber = 3;
  inline ::google::protobuf::uint32 feel() const;
  inline void set_feel(::google::protobuf::uint32 value);
  
  // optional string str = 4;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 4;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.FeelAck)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_feel();
  inline void clear_has_feel();
  inline void set_has_str();
  inline void clear_has_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 from_;
  ::google::protobuf::uint32 to_;
  ::std::string* str_;
  ::google::protobuf::uint32 feel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static FeelAck* default_instance_;
};
// -------------------------------------------------------------------

class ConcedeAck : public ::google::protobuf::Message {
 public:
  ConcedeAck();
  virtual ~ConcedeAck();
  
  ConcedeAck(const ConcedeAck& from);
  
  inline ConcedeAck& operator=(const ConcedeAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcedeAck& default_instance();
  
  void Swap(ConcedeAck* other);
  
  // implements Message ----------------------------------------------
  
  ConcedeAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcedeAck& from);
  void MergeFrom(const ConcedeAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cn.jj.service.msg.protocol.ConcedeAck)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 seat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TKJunQiPK_2eproto();
  friend void protobuf_AssignDesc_TKJunQiPK_2eproto();
  friend void protobuf_ShutdownFile_TKJunQiPK_2eproto();
  
  void InitAsDefaultInstance();
  static ConcedeAck* default_instance_;
};
// ===================================================================


// ===================================================================

// TKMobileReqMsg

// optional uint32 param = 1;
inline bool TKMobileReqMsg::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKMobileReqMsg::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKMobileReqMsg::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKMobileReqMsg::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 TKMobileReqMsg::param() const {
  return param_;
}
inline void TKMobileReqMsg::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
}

// optional .cn.jj.service.msg.protocol.JunQiPKReqMsg junqipk_req_msg = 66;
inline bool TKMobileReqMsg::has_junqipk_req_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TKMobileReqMsg::set_has_junqipk_req_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TKMobileReqMsg::clear_has_junqipk_req_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TKMobileReqMsg::clear_junqipk_req_msg() {
  if (junqipk_req_msg_ != NULL) junqipk_req_msg_->::cn::jj::service::msg::protocol::JunQiPKReqMsg::Clear();
  clear_has_junqipk_req_msg();
}
inline const ::cn::jj::service::msg::protocol::JunQiPKReqMsg& TKMobileReqMsg::junqipk_req_msg() const {
  return junqipk_req_msg_ != NULL ? *junqipk_req_msg_ : *default_instance_->junqipk_req_msg_;
}
inline ::cn::jj::service::msg::protocol::JunQiPKReqMsg* TKMobileReqMsg::mutable_junqipk_req_msg() {
  set_has_junqipk_req_msg();
  if (junqipk_req_msg_ == NULL) junqipk_req_msg_ = new ::cn::jj::service::msg::protocol::JunQiPKReqMsg;
  return junqipk_req_msg_;
}
inline ::cn::jj::service::msg::protocol::JunQiPKReqMsg* TKMobileReqMsg::release_junqipk_req_msg() {
  clear_has_junqipk_req_msg();
  ::cn::jj::service::msg::protocol::JunQiPKReqMsg* temp = junqipk_req_msg_;
  junqipk_req_msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TKMobileAckMsg

// optional uint32 param = 1;
inline bool TKMobileAckMsg::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKMobileAckMsg::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKMobileAckMsg::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKMobileAckMsg::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 TKMobileAckMsg::param() const {
  return param_;
}
inline void TKMobileAckMsg::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
}

// optional .cn.jj.service.msg.protocol.JunQiPKAckMsg junqipk_ack_msg = 66;
inline bool TKMobileAckMsg::has_junqipk_ack_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TKMobileAckMsg::set_has_junqipk_ack_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TKMobileAckMsg::clear_has_junqipk_ack_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TKMobileAckMsg::clear_junqipk_ack_msg() {
  if (junqipk_ack_msg_ != NULL) junqipk_ack_msg_->::cn::jj::service::msg::protocol::JunQiPKAckMsg::Clear();
  clear_has_junqipk_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::JunQiPKAckMsg& TKMobileAckMsg::junqipk_ack_msg() const {
  return junqipk_ack_msg_ != NULL ? *junqipk_ack_msg_ : *default_instance_->junqipk_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::JunQiPKAckMsg* TKMobileAckMsg::mutable_junqipk_ack_msg() {
  set_has_junqipk_ack_msg();
  if (junqipk_ack_msg_ == NULL) junqipk_ack_msg_ = new ::cn::jj::service::msg::protocol::JunQiPKAckMsg;
  return junqipk_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::JunQiPKAckMsg* TKMobileAckMsg::release_junqipk_ack_msg() {
  clear_has_junqipk_ack_msg();
  ::cn::jj::service::msg::protocol::JunQiPKAckMsg* temp = junqipk_ack_msg_;
  junqipk_ack_msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// JunQiPKReqMsg

// required uint32 matchid = 1;
inline bool JunQiPKReqMsg::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JunQiPKReqMsg::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JunQiPKReqMsg::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JunQiPKReqMsg::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 JunQiPKReqMsg::matchid() const {
  return matchid_;
}
inline void JunQiPKReqMsg::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// optional .cn.jj.service.msg.protocol.InitLayoutReq initlayout_req_msg = 2;
inline bool JunQiPKReqMsg::has_initlayout_req_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JunQiPKReqMsg::set_has_initlayout_req_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JunQiPKReqMsg::clear_has_initlayout_req_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JunQiPKReqMsg::clear_initlayout_req_msg() {
  if (initlayout_req_msg_ != NULL) initlayout_req_msg_->::cn::jj::service::msg::protocol::InitLayoutReq::Clear();
  clear_has_initlayout_req_msg();
}
inline const ::cn::jj::service::msg::protocol::InitLayoutReq& JunQiPKReqMsg::initlayout_req_msg() const {
  return initlayout_req_msg_ != NULL ? *initlayout_req_msg_ : *default_instance_->initlayout_req_msg_;
}
inline ::cn::jj::service::msg::protocol::InitLayoutReq* JunQiPKReqMsg::mutable_initlayout_req_msg() {
  set_has_initlayout_req_msg();
  if (initlayout_req_msg_ == NULL) initlayout_req_msg_ = new ::cn::jj::service::msg::protocol::InitLayoutReq;
  return initlayout_req_msg_;
}
inline ::cn::jj::service::msg::protocol::InitLayoutReq* JunQiPKReqMsg::release_initlayout_req_msg() {
  clear_has_initlayout_req_msg();
  ::cn::jj::service::msg::protocol::InitLayoutReq* temp = initlayout_req_msg_;
  initlayout_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.SelectChessReq selectchess_req_msg = 3;
inline bool JunQiPKReqMsg::has_selectchess_req_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JunQiPKReqMsg::set_has_selectchess_req_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JunQiPKReqMsg::clear_has_selectchess_req_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JunQiPKReqMsg::clear_selectchess_req_msg() {
  if (selectchess_req_msg_ != NULL) selectchess_req_msg_->::cn::jj::service::msg::protocol::SelectChessReq::Clear();
  clear_has_selectchess_req_msg();
}
inline const ::cn::jj::service::msg::protocol::SelectChessReq& JunQiPKReqMsg::selectchess_req_msg() const {
  return selectchess_req_msg_ != NULL ? *selectchess_req_msg_ : *default_instance_->selectchess_req_msg_;
}
inline ::cn::jj::service::msg::protocol::SelectChessReq* JunQiPKReqMsg::mutable_selectchess_req_msg() {
  set_has_selectchess_req_msg();
  if (selectchess_req_msg_ == NULL) selectchess_req_msg_ = new ::cn::jj::service::msg::protocol::SelectChessReq;
  return selectchess_req_msg_;
}
inline ::cn::jj::service::msg::protocol::SelectChessReq* JunQiPKReqMsg::release_selectchess_req_msg() {
  clear_has_selectchess_req_msg();
  ::cn::jj::service::msg::protocol::SelectChessReq* temp = selectchess_req_msg_;
  selectchess_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.MoveChessReq movechess_req_msg = 4;
inline bool JunQiPKReqMsg::has_movechess_req_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JunQiPKReqMsg::set_has_movechess_req_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JunQiPKReqMsg::clear_has_movechess_req_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JunQiPKReqMsg::clear_movechess_req_msg() {
  if (movechess_req_msg_ != NULL) movechess_req_msg_->::cn::jj::service::msg::protocol::MoveChessReq::Clear();
  clear_has_movechess_req_msg();
}
inline const ::cn::jj::service::msg::protocol::MoveChessReq& JunQiPKReqMsg::movechess_req_msg() const {
  return movechess_req_msg_ != NULL ? *movechess_req_msg_ : *default_instance_->movechess_req_msg_;
}
inline ::cn::jj::service::msg::protocol::MoveChessReq* JunQiPKReqMsg::mutable_movechess_req_msg() {
  set_has_movechess_req_msg();
  if (movechess_req_msg_ == NULL) movechess_req_msg_ = new ::cn::jj::service::msg::protocol::MoveChessReq;
  return movechess_req_msg_;
}
inline ::cn::jj::service::msg::protocol::MoveChessReq* JunQiPKReqMsg::release_movechess_req_msg() {
  clear_has_movechess_req_msg();
  ::cn::jj::service::msg::protocol::MoveChessReq* temp = movechess_req_msg_;
  movechess_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.AcotionFinishReq actionfinish_req_msg = 5;
inline bool JunQiPKReqMsg::has_actionfinish_req_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JunQiPKReqMsg::set_has_actionfinish_req_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JunQiPKReqMsg::clear_has_actionfinish_req_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JunQiPKReqMsg::clear_actionfinish_req_msg() {
  if (actionfinish_req_msg_ != NULL) actionfinish_req_msg_->::cn::jj::service::msg::protocol::AcotionFinishReq::Clear();
  clear_has_actionfinish_req_msg();
}
inline const ::cn::jj::service::msg::protocol::AcotionFinishReq& JunQiPKReqMsg::actionfinish_req_msg() const {
  return actionfinish_req_msg_ != NULL ? *actionfinish_req_msg_ : *default_instance_->actionfinish_req_msg_;
}
inline ::cn::jj::service::msg::protocol::AcotionFinishReq* JunQiPKReqMsg::mutable_actionfinish_req_msg() {
  set_has_actionfinish_req_msg();
  if (actionfinish_req_msg_ == NULL) actionfinish_req_msg_ = new ::cn::jj::service::msg::protocol::AcotionFinishReq;
  return actionfinish_req_msg_;
}
inline ::cn::jj::service::msg::protocol::AcotionFinishReq* JunQiPKReqMsg::release_actionfinish_req_msg() {
  clear_has_actionfinish_req_msg();
  ::cn::jj::service::msg::protocol::AcotionFinishReq* temp = actionfinish_req_msg_;
  actionfinish_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.ConcedeReq concede_req_msg = 6;
inline bool JunQiPKReqMsg::has_concede_req_msg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JunQiPKReqMsg::set_has_concede_req_msg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JunQiPKReqMsg::clear_has_concede_req_msg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JunQiPKReqMsg::clear_concede_req_msg() {
  if (concede_req_msg_ != NULL) concede_req_msg_->::cn::jj::service::msg::protocol::ConcedeReq::Clear();
  clear_has_concede_req_msg();
}
inline const ::cn::jj::service::msg::protocol::ConcedeReq& JunQiPKReqMsg::concede_req_msg() const {
  return concede_req_msg_ != NULL ? *concede_req_msg_ : *default_instance_->concede_req_msg_;
}
inline ::cn::jj::service::msg::protocol::ConcedeReq* JunQiPKReqMsg::mutable_concede_req_msg() {
  set_has_concede_req_msg();
  if (concede_req_msg_ == NULL) concede_req_msg_ = new ::cn::jj::service::msg::protocol::ConcedeReq;
  return concede_req_msg_;
}
inline ::cn::jj::service::msg::protocol::ConcedeReq* JunQiPKReqMsg::release_concede_req_msg() {
  clear_has_concede_req_msg();
  ::cn::jj::service::msg::protocol::ConcedeReq* temp = concede_req_msg_;
  concede_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.PeaceReq peace_req_msg = 7;
inline bool JunQiPKReqMsg::has_peace_req_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JunQiPKReqMsg::set_has_peace_req_msg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JunQiPKReqMsg::clear_has_peace_req_msg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JunQiPKReqMsg::clear_peace_req_msg() {
  if (peace_req_msg_ != NULL) peace_req_msg_->::cn::jj::service::msg::protocol::PeaceReq::Clear();
  clear_has_peace_req_msg();
}
inline const ::cn::jj::service::msg::protocol::PeaceReq& JunQiPKReqMsg::peace_req_msg() const {
  return peace_req_msg_ != NULL ? *peace_req_msg_ : *default_instance_->peace_req_msg_;
}
inline ::cn::jj::service::msg::protocol::PeaceReq* JunQiPKReqMsg::mutable_peace_req_msg() {
  set_has_peace_req_msg();
  if (peace_req_msg_ == NULL) peace_req_msg_ = new ::cn::jj::service::msg::protocol::PeaceReq;
  return peace_req_msg_;
}
inline ::cn::jj::service::msg::protocol::PeaceReq* JunQiPKReqMsg::release_peace_req_msg() {
  clear_has_peace_req_msg();
  ::cn::jj::service::msg::protocol::PeaceReq* temp = peace_req_msg_;
  peace_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.PeaceResReq peaceres_req_msg = 8;
inline bool JunQiPKReqMsg::has_peaceres_req_msg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JunQiPKReqMsg::set_has_peaceres_req_msg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JunQiPKReqMsg::clear_has_peaceres_req_msg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JunQiPKReqMsg::clear_peaceres_req_msg() {
  if (peaceres_req_msg_ != NULL) peaceres_req_msg_->::cn::jj::service::msg::protocol::PeaceResReq::Clear();
  clear_has_peaceres_req_msg();
}
inline const ::cn::jj::service::msg::protocol::PeaceResReq& JunQiPKReqMsg::peaceres_req_msg() const {
  return peaceres_req_msg_ != NULL ? *peaceres_req_msg_ : *default_instance_->peaceres_req_msg_;
}
inline ::cn::jj::service::msg::protocol::PeaceResReq* JunQiPKReqMsg::mutable_peaceres_req_msg() {
  set_has_peaceres_req_msg();
  if (peaceres_req_msg_ == NULL) peaceres_req_msg_ = new ::cn::jj::service::msg::protocol::PeaceResReq;
  return peaceres_req_msg_;
}
inline ::cn::jj::service::msg::protocol::PeaceResReq* JunQiPKReqMsg::release_peaceres_req_msg() {
  clear_has_peaceres_req_msg();
  ::cn::jj::service::msg::protocol::PeaceResReq* temp = peaceres_req_msg_;
  peaceres_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.ShowChessReq showchess_req_msg = 9;
inline bool JunQiPKReqMsg::has_showchess_req_msg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JunQiPKReqMsg::set_has_showchess_req_msg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JunQiPKReqMsg::clear_has_showchess_req_msg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JunQiPKReqMsg::clear_showchess_req_msg() {
  if (showchess_req_msg_ != NULL) showchess_req_msg_->::cn::jj::service::msg::protocol::ShowChessReq::Clear();
  clear_has_showchess_req_msg();
}
inline const ::cn::jj::service::msg::protocol::ShowChessReq& JunQiPKReqMsg::showchess_req_msg() const {
  return showchess_req_msg_ != NULL ? *showchess_req_msg_ : *default_instance_->showchess_req_msg_;
}
inline ::cn::jj::service::msg::protocol::ShowChessReq* JunQiPKReqMsg::mutable_showchess_req_msg() {
  set_has_showchess_req_msg();
  if (showchess_req_msg_ == NULL) showchess_req_msg_ = new ::cn::jj::service::msg::protocol::ShowChessReq;
  return showchess_req_msg_;
}
inline ::cn::jj::service::msg::protocol::ShowChessReq* JunQiPKReqMsg::release_showchess_req_msg() {
  clear_has_showchess_req_msg();
  ::cn::jj::service::msg::protocol::ShowChessReq* temp = showchess_req_msg_;
  showchess_req_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.InitRuleReq initrule_req_msg = 10;
inline bool JunQiPKReqMsg::has_initrule_req_msg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JunQiPKReqMsg::set_has_initrule_req_msg() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JunQiPKReqMsg::clear_has_initrule_req_msg() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JunQiPKReqMsg::clear_initrule_req_msg() {
  if (initrule_req_msg_ != NULL) initrule_req_msg_->::cn::jj::service::msg::protocol::InitRuleReq::Clear();
  clear_has_initrule_req_msg();
}
inline const ::cn::jj::service::msg::protocol::InitRuleReq& JunQiPKReqMsg::initrule_req_msg() const {
  return initrule_req_msg_ != NULL ? *initrule_req_msg_ : *default_instance_->initrule_req_msg_;
}
inline ::cn::jj::service::msg::protocol::InitRuleReq* JunQiPKReqMsg::mutable_initrule_req_msg() {
  set_has_initrule_req_msg();
  if (initrule_req_msg_ == NULL) initrule_req_msg_ = new ::cn::jj::service::msg::protocol::InitRuleReq;
  return initrule_req_msg_;
}
inline ::cn::jj::service::msg::protocol::InitRuleReq* JunQiPKReqMsg::release_initrule_req_msg() {
  clear_has_initrule_req_msg();
  ::cn::jj::service::msg::protocol::InitRuleReq* temp = initrule_req_msg_;
  initrule_req_msg_ = NULL;
  return temp;
}

// optional uint32 cancellayout_req_msg = 11;
inline bool JunQiPKReqMsg::has_cancellayout_req_msg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JunQiPKReqMsg::set_has_cancellayout_req_msg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JunQiPKReqMsg::clear_has_cancellayout_req_msg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JunQiPKReqMsg::clear_cancellayout_req_msg() {
  cancellayout_req_msg_ = 0u;
  clear_has_cancellayout_req_msg();
}
inline ::google::protobuf::uint32 JunQiPKReqMsg::cancellayout_req_msg() const {
  return cancellayout_req_msg_;
}
inline void JunQiPKReqMsg::set_cancellayout_req_msg(::google::protobuf::uint32 value) {
  set_has_cancellayout_req_msg();
  cancellayout_req_msg_ = value;
}

// optional .cn.jj.service.msg.protocol.FeelReq feel_req_msg = 12;
inline bool JunQiPKReqMsg::has_feel_req_msg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JunQiPKReqMsg::set_has_feel_req_msg() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JunQiPKReqMsg::clear_has_feel_req_msg() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JunQiPKReqMsg::clear_feel_req_msg() {
  if (feel_req_msg_ != NULL) feel_req_msg_->::cn::jj::service::msg::protocol::FeelReq::Clear();
  clear_has_feel_req_msg();
}
inline const ::cn::jj::service::msg::protocol::FeelReq& JunQiPKReqMsg::feel_req_msg() const {
  return feel_req_msg_ != NULL ? *feel_req_msg_ : *default_instance_->feel_req_msg_;
}
inline ::cn::jj::service::msg::protocol::FeelReq* JunQiPKReqMsg::mutable_feel_req_msg() {
  set_has_feel_req_msg();
  if (feel_req_msg_ == NULL) feel_req_msg_ = new ::cn::jj::service::msg::protocol::FeelReq;
  return feel_req_msg_;
}
inline ::cn::jj::service::msg::protocol::FeelReq* JunQiPKReqMsg::release_feel_req_msg() {
  clear_has_feel_req_msg();
  ::cn::jj::service::msg::protocol::FeelReq* temp = feel_req_msg_;
  feel_req_msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// JunQiPKAckMsg

// required uint32 matchid = 1;
inline bool JunQiPKAckMsg::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JunQiPKAckMsg::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JunQiPKAckMsg::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JunQiPKAckMsg::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 JunQiPKAckMsg::matchid() const {
  return matchid_;
}
inline void JunQiPKAckMsg::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 severtime = 2;
inline bool JunQiPKAckMsg::has_severtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JunQiPKAckMsg::set_has_severtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JunQiPKAckMsg::clear_has_severtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JunQiPKAckMsg::clear_severtime() {
  severtime_ = 0u;
  clear_has_severtime();
}
inline ::google::protobuf::uint32 JunQiPKAckMsg::severtime() const {
  return severtime_;
}
inline void JunQiPKAckMsg::set_severtime(::google::protobuf::uint32 value) {
  set_has_severtime();
  severtime_ = value;
}

// optional .cn.jj.service.msg.protocol.InitChessAck initchess_ack_msg = 3;
inline bool JunQiPKAckMsg::has_initchess_ack_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JunQiPKAckMsg::set_has_initchess_ack_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JunQiPKAckMsg::clear_has_initchess_ack_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JunQiPKAckMsg::clear_initchess_ack_msg() {
  if (initchess_ack_msg_ != NULL) initchess_ack_msg_->::cn::jj::service::msg::protocol::InitChessAck::Clear();
  clear_has_initchess_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::InitChessAck& JunQiPKAckMsg::initchess_ack_msg() const {
  return initchess_ack_msg_ != NULL ? *initchess_ack_msg_ : *default_instance_->initchess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::InitChessAck* JunQiPKAckMsg::mutable_initchess_ack_msg() {
  set_has_initchess_ack_msg();
  if (initchess_ack_msg_ == NULL) initchess_ack_msg_ = new ::cn::jj::service::msg::protocol::InitChessAck;
  return initchess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::InitChessAck* JunQiPKAckMsg::release_initchess_ack_msg() {
  clear_has_initchess_ack_msg();
  ::cn::jj::service::msg::protocol::InitChessAck* temp = initchess_ack_msg_;
  initchess_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.StartMoveChessAck startmovechess_ack_msg = 4;
inline bool JunQiPKAckMsg::has_startmovechess_ack_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JunQiPKAckMsg::set_has_startmovechess_ack_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JunQiPKAckMsg::clear_has_startmovechess_ack_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JunQiPKAckMsg::clear_startmovechess_ack_msg() {
  if (startmovechess_ack_msg_ != NULL) startmovechess_ack_msg_->::cn::jj::service::msg::protocol::StartMoveChessAck::Clear();
  clear_has_startmovechess_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::StartMoveChessAck& JunQiPKAckMsg::startmovechess_ack_msg() const {
  return startmovechess_ack_msg_ != NULL ? *startmovechess_ack_msg_ : *default_instance_->startmovechess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::StartMoveChessAck* JunQiPKAckMsg::mutable_startmovechess_ack_msg() {
  set_has_startmovechess_ack_msg();
  if (startmovechess_ack_msg_ == NULL) startmovechess_ack_msg_ = new ::cn::jj::service::msg::protocol::StartMoveChessAck;
  return startmovechess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::StartMoveChessAck* JunQiPKAckMsg::release_startmovechess_ack_msg() {
  clear_has_startmovechess_ack_msg();
  ::cn::jj::service::msg::protocol::StartMoveChessAck* temp = startmovechess_ack_msg_;
  startmovechess_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.SelectChessAck selectchess_ack_msg = 5;
inline bool JunQiPKAckMsg::has_selectchess_ack_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JunQiPKAckMsg::set_has_selectchess_ack_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JunQiPKAckMsg::clear_has_selectchess_ack_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JunQiPKAckMsg::clear_selectchess_ack_msg() {
  if (selectchess_ack_msg_ != NULL) selectchess_ack_msg_->::cn::jj::service::msg::protocol::SelectChessAck::Clear();
  clear_has_selectchess_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::SelectChessAck& JunQiPKAckMsg::selectchess_ack_msg() const {
  return selectchess_ack_msg_ != NULL ? *selectchess_ack_msg_ : *default_instance_->selectchess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::SelectChessAck* JunQiPKAckMsg::mutable_selectchess_ack_msg() {
  set_has_selectchess_ack_msg();
  if (selectchess_ack_msg_ == NULL) selectchess_ack_msg_ = new ::cn::jj::service::msg::protocol::SelectChessAck;
  return selectchess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::SelectChessAck* JunQiPKAckMsg::release_selectchess_ack_msg() {
  clear_has_selectchess_ack_msg();
  ::cn::jj::service::msg::protocol::SelectChessAck* temp = selectchess_ack_msg_;
  selectchess_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.MoveChessAck movechess_ack_msg = 6;
inline bool JunQiPKAckMsg::has_movechess_ack_msg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JunQiPKAckMsg::set_has_movechess_ack_msg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JunQiPKAckMsg::clear_has_movechess_ack_msg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JunQiPKAckMsg::clear_movechess_ack_msg() {
  if (movechess_ack_msg_ != NULL) movechess_ack_msg_->::cn::jj::service::msg::protocol::MoveChessAck::Clear();
  clear_has_movechess_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::MoveChessAck& JunQiPKAckMsg::movechess_ack_msg() const {
  return movechess_ack_msg_ != NULL ? *movechess_ack_msg_ : *default_instance_->movechess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::MoveChessAck* JunQiPKAckMsg::mutable_movechess_ack_msg() {
  set_has_movechess_ack_msg();
  if (movechess_ack_msg_ == NULL) movechess_ack_msg_ = new ::cn::jj::service::msg::protocol::MoveChessAck;
  return movechess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::MoveChessAck* JunQiPKAckMsg::release_movechess_ack_msg() {
  clear_has_movechess_ack_msg();
  ::cn::jj::service::msg::protocol::MoveChessAck* temp = movechess_ack_msg_;
  movechess_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.ActionFinishAck actionfinish_ack_msg = 7;
inline bool JunQiPKAckMsg::has_actionfinish_ack_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JunQiPKAckMsg::set_has_actionfinish_ack_msg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JunQiPKAckMsg::clear_has_actionfinish_ack_msg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JunQiPKAckMsg::clear_actionfinish_ack_msg() {
  if (actionfinish_ack_msg_ != NULL) actionfinish_ack_msg_->::cn::jj::service::msg::protocol::ActionFinishAck::Clear();
  clear_has_actionfinish_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::ActionFinishAck& JunQiPKAckMsg::actionfinish_ack_msg() const {
  return actionfinish_ack_msg_ != NULL ? *actionfinish_ack_msg_ : *default_instance_->actionfinish_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::ActionFinishAck* JunQiPKAckMsg::mutable_actionfinish_ack_msg() {
  set_has_actionfinish_ack_msg();
  if (actionfinish_ack_msg_ == NULL) actionfinish_ack_msg_ = new ::cn::jj::service::msg::protocol::ActionFinishAck;
  return actionfinish_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::ActionFinishAck* JunQiPKAckMsg::release_actionfinish_ack_msg() {
  clear_has_actionfinish_ack_msg();
  ::cn::jj::service::msg::protocol::ActionFinishAck* temp = actionfinish_ack_msg_;
  actionfinish_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.FinishGameAck finishgame_ack_msg = 8;
inline bool JunQiPKAckMsg::has_finishgame_ack_msg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JunQiPKAckMsg::set_has_finishgame_ack_msg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JunQiPKAckMsg::clear_has_finishgame_ack_msg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JunQiPKAckMsg::clear_finishgame_ack_msg() {
  if (finishgame_ack_msg_ != NULL) finishgame_ack_msg_->::cn::jj::service::msg::protocol::FinishGameAck::Clear();
  clear_has_finishgame_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::FinishGameAck& JunQiPKAckMsg::finishgame_ack_msg() const {
  return finishgame_ack_msg_ != NULL ? *finishgame_ack_msg_ : *default_instance_->finishgame_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::FinishGameAck* JunQiPKAckMsg::mutable_finishgame_ack_msg() {
  set_has_finishgame_ack_msg();
  if (finishgame_ack_msg_ == NULL) finishgame_ack_msg_ = new ::cn::jj::service::msg::protocol::FinishGameAck;
  return finishgame_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::FinishGameAck* JunQiPKAckMsg::release_finishgame_ack_msg() {
  clear_has_finishgame_ack_msg();
  ::cn::jj::service::msg::protocol::FinishGameAck* temp = finishgame_ack_msg_;
  finishgame_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.PeaceAck peace_ack_msg = 9;
inline bool JunQiPKAckMsg::has_peace_ack_msg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JunQiPKAckMsg::set_has_peace_ack_msg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JunQiPKAckMsg::clear_has_peace_ack_msg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JunQiPKAckMsg::clear_peace_ack_msg() {
  if (peace_ack_msg_ != NULL) peace_ack_msg_->::cn::jj::service::msg::protocol::PeaceAck::Clear();
  clear_has_peace_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::PeaceAck& JunQiPKAckMsg::peace_ack_msg() const {
  return peace_ack_msg_ != NULL ? *peace_ack_msg_ : *default_instance_->peace_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::PeaceAck* JunQiPKAckMsg::mutable_peace_ack_msg() {
  set_has_peace_ack_msg();
  if (peace_ack_msg_ == NULL) peace_ack_msg_ = new ::cn::jj::service::msg::protocol::PeaceAck;
  return peace_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::PeaceAck* JunQiPKAckMsg::release_peace_ack_msg() {
  clear_has_peace_ack_msg();
  ::cn::jj::service::msg::protocol::PeaceAck* temp = peace_ack_msg_;
  peace_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.ShowChessAck showchess_ack_msg = 10;
inline bool JunQiPKAckMsg::has_showchess_ack_msg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JunQiPKAckMsg::set_has_showchess_ack_msg() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JunQiPKAckMsg::clear_has_showchess_ack_msg() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JunQiPKAckMsg::clear_showchess_ack_msg() {
  if (showchess_ack_msg_ != NULL) showchess_ack_msg_->::cn::jj::service::msg::protocol::ShowChessAck::Clear();
  clear_has_showchess_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::ShowChessAck& JunQiPKAckMsg::showchess_ack_msg() const {
  return showchess_ack_msg_ != NULL ? *showchess_ack_msg_ : *default_instance_->showchess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::ShowChessAck* JunQiPKAckMsg::mutable_showchess_ack_msg() {
  set_has_showchess_ack_msg();
  if (showchess_ack_msg_ == NULL) showchess_ack_msg_ = new ::cn::jj::service::msg::protocol::ShowChessAck;
  return showchess_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::ShowChessAck* JunQiPKAckMsg::release_showchess_ack_msg() {
  clear_has_showchess_ack_msg();
  ::cn::jj::service::msg::protocol::ShowChessAck* temp = showchess_ack_msg_;
  showchess_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.ShowTipsAck showtips_ack_msg = 11;
inline bool JunQiPKAckMsg::has_showtips_ack_msg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JunQiPKAckMsg::set_has_showtips_ack_msg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JunQiPKAckMsg::clear_has_showtips_ack_msg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JunQiPKAckMsg::clear_showtips_ack_msg() {
  if (showtips_ack_msg_ != NULL) showtips_ack_msg_->::cn::jj::service::msg::protocol::ShowTipsAck::Clear();
  clear_has_showtips_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::ShowTipsAck& JunQiPKAckMsg::showtips_ack_msg() const {
  return showtips_ack_msg_ != NULL ? *showtips_ack_msg_ : *default_instance_->showtips_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::ShowTipsAck* JunQiPKAckMsg::mutable_showtips_ack_msg() {
  set_has_showtips_ack_msg();
  if (showtips_ack_msg_ == NULL) showtips_ack_msg_ = new ::cn::jj::service::msg::protocol::ShowTipsAck;
  return showtips_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::ShowTipsAck* JunQiPKAckMsg::release_showtips_ack_msg() {
  clear_has_showtips_ack_msg();
  ::cn::jj::service::msg::protocol::ShowTipsAck* temp = showtips_ack_msg_;
  showtips_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.RefusePeaceAck refusepeace_ack_msg = 12;
inline bool JunQiPKAckMsg::has_refusepeace_ack_msg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JunQiPKAckMsg::set_has_refusepeace_ack_msg() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JunQiPKAckMsg::clear_has_refusepeace_ack_msg() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JunQiPKAckMsg::clear_refusepeace_ack_msg() {
  if (refusepeace_ack_msg_ != NULL) refusepeace_ack_msg_->::cn::jj::service::msg::protocol::RefusePeaceAck::Clear();
  clear_has_refusepeace_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::RefusePeaceAck& JunQiPKAckMsg::refusepeace_ack_msg() const {
  return refusepeace_ack_msg_ != NULL ? *refusepeace_ack_msg_ : *default_instance_->refusepeace_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::RefusePeaceAck* JunQiPKAckMsg::mutable_refusepeace_ack_msg() {
  set_has_refusepeace_ack_msg();
  if (refusepeace_ack_msg_ == NULL) refusepeace_ack_msg_ = new ::cn::jj::service::msg::protocol::RefusePeaceAck;
  return refusepeace_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::RefusePeaceAck* JunQiPKAckMsg::release_refusepeace_ack_msg() {
  clear_has_refusepeace_ack_msg();
  ::cn::jj::service::msg::protocol::RefusePeaceAck* temp = refusepeace_ack_msg_;
  refusepeace_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.RepeatCountAck repeatcount_ack_msg = 13;
inline bool JunQiPKAckMsg::has_repeatcount_ack_msg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JunQiPKAckMsg::set_has_repeatcount_ack_msg() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JunQiPKAckMsg::clear_has_repeatcount_ack_msg() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JunQiPKAckMsg::clear_repeatcount_ack_msg() {
  if (repeatcount_ack_msg_ != NULL) repeatcount_ack_msg_->::cn::jj::service::msg::protocol::RepeatCountAck::Clear();
  clear_has_repeatcount_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::RepeatCountAck& JunQiPKAckMsg::repeatcount_ack_msg() const {
  return repeatcount_ack_msg_ != NULL ? *repeatcount_ack_msg_ : *default_instance_->repeatcount_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::RepeatCountAck* JunQiPKAckMsg::mutable_repeatcount_ack_msg() {
  set_has_repeatcount_ack_msg();
  if (repeatcount_ack_msg_ == NULL) repeatcount_ack_msg_ = new ::cn::jj::service::msg::protocol::RepeatCountAck;
  return repeatcount_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::RepeatCountAck* JunQiPKAckMsg::release_repeatcount_ack_msg() {
  clear_has_repeatcount_ack_msg();
  ::cn::jj::service::msg::protocol::RepeatCountAck* temp = repeatcount_ack_msg_;
  repeatcount_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.InitRuleAck initrule_ack_msg = 14;
inline bool JunQiPKAckMsg::has_initrule_ack_msg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JunQiPKAckMsg::set_has_initrule_ack_msg() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JunQiPKAckMsg::clear_has_initrule_ack_msg() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JunQiPKAckMsg::clear_initrule_ack_msg() {
  if (initrule_ack_msg_ != NULL) initrule_ack_msg_->::cn::jj::service::msg::protocol::InitRuleAck::Clear();
  clear_has_initrule_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::InitRuleAck& JunQiPKAckMsg::initrule_ack_msg() const {
  return initrule_ack_msg_ != NULL ? *initrule_ack_msg_ : *default_instance_->initrule_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::InitRuleAck* JunQiPKAckMsg::mutable_initrule_ack_msg() {
  set_has_initrule_ack_msg();
  if (initrule_ack_msg_ == NULL) initrule_ack_msg_ = new ::cn::jj::service::msg::protocol::InitRuleAck;
  return initrule_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::InitRuleAck* JunQiPKAckMsg::release_initrule_ack_msg() {
  clear_has_initrule_ack_msg();
  ::cn::jj::service::msg::protocol::InitRuleAck* temp = initrule_ack_msg_;
  initrule_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.InitLayoutAck initlayout_ack_msg = 15;
inline bool JunQiPKAckMsg::has_initlayout_ack_msg() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JunQiPKAckMsg::set_has_initlayout_ack_msg() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JunQiPKAckMsg::clear_has_initlayout_ack_msg() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JunQiPKAckMsg::clear_initlayout_ack_msg() {
  if (initlayout_ack_msg_ != NULL) initlayout_ack_msg_->::cn::jj::service::msg::protocol::InitLayoutAck::Clear();
  clear_has_initlayout_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::InitLayoutAck& JunQiPKAckMsg::initlayout_ack_msg() const {
  return initlayout_ack_msg_ != NULL ? *initlayout_ack_msg_ : *default_instance_->initlayout_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::InitLayoutAck* JunQiPKAckMsg::mutable_initlayout_ack_msg() {
  set_has_initlayout_ack_msg();
  if (initlayout_ack_msg_ == NULL) initlayout_ack_msg_ = new ::cn::jj::service::msg::protocol::InitLayoutAck;
  return initlayout_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::InitLayoutAck* JunQiPKAckMsg::release_initlayout_ack_msg() {
  clear_has_initlayout_ack_msg();
  ::cn::jj::service::msg::protocol::InitLayoutAck* temp = initlayout_ack_msg_;
  initlayout_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.TimeOutAck timeout_ack_msg = 16;
inline bool JunQiPKAckMsg::has_timeout_ack_msg() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JunQiPKAckMsg::set_has_timeout_ack_msg() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JunQiPKAckMsg::clear_has_timeout_ack_msg() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JunQiPKAckMsg::clear_timeout_ack_msg() {
  if (timeout_ack_msg_ != NULL) timeout_ack_msg_->::cn::jj::service::msg::protocol::TimeOutAck::Clear();
  clear_has_timeout_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::TimeOutAck& JunQiPKAckMsg::timeout_ack_msg() const {
  return timeout_ack_msg_ != NULL ? *timeout_ack_msg_ : *default_instance_->timeout_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TimeOutAck* JunQiPKAckMsg::mutable_timeout_ack_msg() {
  set_has_timeout_ack_msg();
  if (timeout_ack_msg_ == NULL) timeout_ack_msg_ = new ::cn::jj::service::msg::protocol::TimeOutAck;
  return timeout_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::TimeOutAck* JunQiPKAckMsg::release_timeout_ack_msg() {
  clear_has_timeout_ack_msg();
  ::cn::jj::service::msg::protocol::TimeOutAck* temp = timeout_ack_msg_;
  timeout_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.FeelAck feel_ack_msg = 17;
inline bool JunQiPKAckMsg::has_feel_ack_msg() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JunQiPKAckMsg::set_has_feel_ack_msg() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JunQiPKAckMsg::clear_has_feel_ack_msg() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JunQiPKAckMsg::clear_feel_ack_msg() {
  if (feel_ack_msg_ != NULL) feel_ack_msg_->::cn::jj::service::msg::protocol::FeelAck::Clear();
  clear_has_feel_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::FeelAck& JunQiPKAckMsg::feel_ack_msg() const {
  return feel_ack_msg_ != NULL ? *feel_ack_msg_ : *default_instance_->feel_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::FeelAck* JunQiPKAckMsg::mutable_feel_ack_msg() {
  set_has_feel_ack_msg();
  if (feel_ack_msg_ == NULL) feel_ack_msg_ = new ::cn::jj::service::msg::protocol::FeelAck;
  return feel_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::FeelAck* JunQiPKAckMsg::release_feel_ack_msg() {
  clear_has_feel_ack_msg();
  ::cn::jj::service::msg::protocol::FeelAck* temp = feel_ack_msg_;
  feel_ack_msg_ = NULL;
  return temp;
}

// optional .cn.jj.service.msg.protocol.ConcedeAck concede_ack_msg = 18;
inline bool JunQiPKAckMsg::has_concede_ack_msg() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JunQiPKAckMsg::set_has_concede_ack_msg() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JunQiPKAckMsg::clear_has_concede_ack_msg() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JunQiPKAckMsg::clear_concede_ack_msg() {
  if (concede_ack_msg_ != NULL) concede_ack_msg_->::cn::jj::service::msg::protocol::ConcedeAck::Clear();
  clear_has_concede_ack_msg();
}
inline const ::cn::jj::service::msg::protocol::ConcedeAck& JunQiPKAckMsg::concede_ack_msg() const {
  return concede_ack_msg_ != NULL ? *concede_ack_msg_ : *default_instance_->concede_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::ConcedeAck* JunQiPKAckMsg::mutable_concede_ack_msg() {
  set_has_concede_ack_msg();
  if (concede_ack_msg_ == NULL) concede_ack_msg_ = new ::cn::jj::service::msg::protocol::ConcedeAck;
  return concede_ack_msg_;
}
inline ::cn::jj::service::msg::protocol::ConcedeAck* JunQiPKAckMsg::release_concede_ack_msg() {
  clear_has_concede_ack_msg();
  ::cn::jj::service::msg::protocol::ConcedeAck* temp = concede_ack_msg_;
  concede_ack_msg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Chess

// optional int32 pos = 1;
inline bool Chess::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chess::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chess::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chess::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 Chess::pos() const {
  return pos_;
}
inline void Chess::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 type = 2;
inline bool Chess::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chess::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chess::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chess::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Chess::type() const {
  return type_;
}
inline void Chess::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 color = 3;
inline bool Chess::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chess::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chess::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chess::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Chess::color() const {
  return color_;
}
inline void Chess::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 seat = 4;
inline bool Chess::has_seat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chess::set_has_seat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chess::clear_has_seat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chess::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 Chess::seat() const {
  return seat_;
}
inline void Chess::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ParaInfo

// optional int32 one = 1;
inline bool ParaInfo::has_one() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParaInfo::set_has_one() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParaInfo::clear_has_one() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParaInfo::clear_one() {
  one_ = 0;
  clear_has_one();
}
inline ::google::protobuf::int32 ParaInfo::one() const {
  return one_;
}
inline void ParaInfo::set_one(::google::protobuf::int32 value) {
  set_has_one();
  one_ = value;
}

// optional int32 two = 2;
inline bool ParaInfo::has_two() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParaInfo::set_has_two() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParaInfo::clear_has_two() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParaInfo::clear_two() {
  two_ = 0;
  clear_has_two();
}
inline ::google::protobuf::int32 ParaInfo::two() const {
  return two_;
}
inline void ParaInfo::set_two(::google::protobuf::int32 value) {
  set_has_two();
  two_ = value;
}

// optional int32 three = 3;
inline bool ParaInfo::has_three() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParaInfo::set_has_three() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParaInfo::clear_has_three() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParaInfo::clear_three() {
  three_ = 0;
  clear_has_three();
}
inline ::google::protobuf::int32 ParaInfo::three() const {
  return three_;
}
inline void ParaInfo::set_three(::google::protobuf::int32 value) {
  set_has_three();
  three_ = value;
}

// -------------------------------------------------------------------

// InitLayoutReq

// optional int32 seat = 1;
inline bool InitLayoutReq::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitLayoutReq::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitLayoutReq::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitLayoutReq::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 InitLayoutReq::seat() const {
  return seat_;
}
inline void InitLayoutReq::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional string layout = 2;
inline bool InitLayoutReq::has_layout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitLayoutReq::set_has_layout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitLayoutReq::clear_has_layout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitLayoutReq::clear_layout() {
  if (layout_ != &::google::protobuf::internal::kEmptyString) {
    layout_->clear();
  }
  clear_has_layout();
}
inline const ::std::string& InitLayoutReq::layout() const {
  return *layout_;
}
inline void InitLayoutReq::set_layout(const ::std::string& value) {
  set_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    layout_ = new ::std::string;
  }
  layout_->assign(value);
}
inline void InitLayoutReq::set_layout(const char* value) {
  set_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    layout_ = new ::std::string;
  }
  layout_->assign(value);
}
inline void InitLayoutReq::set_layout(const char* value, size_t size) {
  set_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    layout_ = new ::std::string;
  }
  layout_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitLayoutReq::mutable_layout() {
  set_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    layout_ = new ::std::string;
  }
  return layout_;
}
inline ::std::string* InitLayoutReq::release_layout() {
  clear_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = layout_;
    layout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 3;
inline bool InitLayoutReq::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitLayoutReq::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitLayoutReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitLayoutReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 InitLayoutReq::type() const {
  return type_;
}
inline void InitLayoutReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 headimg = 4;
inline bool InitLayoutReq::has_headimg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitLayoutReq::set_has_headimg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InitLayoutReq::clear_has_headimg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InitLayoutReq::clear_headimg() {
  headimg_ = 0;
  clear_has_headimg();
}
inline ::google::protobuf::int32 InitLayoutReq::headimg() const {
  return headimg_;
}
inline void InitLayoutReq::set_headimg(::google::protobuf::int32 value) {
  set_has_headimg();
  headimg_ = value;
}

// optional int32 param = 5;
inline bool InitLayoutReq::has_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InitLayoutReq::set_has_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InitLayoutReq::clear_has_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InitLayoutReq::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 InitLayoutReq::param() const {
  return param_;
}
inline void InitLayoutReq::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// SelectChessReq

// optional int32 seat = 1;
inline bool SelectChessReq::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectChessReq::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectChessReq::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectChessReq::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 SelectChessReq::seat() const {
  return seat_;
}
inline void SelectChessReq::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 pos = 2;
inline bool SelectChessReq::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectChessReq::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectChessReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectChessReq::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 SelectChessReq::pos() const {
  return pos_;
}
inline void SelectChessReq::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// MoveChessReq

// optional int32 seat = 1;
inline bool MoveChessReq::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveChessReq::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveChessReq::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveChessReq::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 MoveChessReq::seat() const {
  return seat_;
}
inline void MoveChessReq::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 atpos = 2;
inline bool MoveChessReq::has_atpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveChessReq::set_has_atpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveChessReq::clear_has_atpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveChessReq::clear_atpos() {
  atpos_ = 0;
  clear_has_atpos();
}
inline ::google::protobuf::int32 MoveChessReq::atpos() const {
  return atpos_;
}
inline void MoveChessReq::set_atpos(::google::protobuf::int32 value) {
  set_has_atpos();
  atpos_ = value;
}

// optional int32 topos = 3;
inline bool MoveChessReq::has_topos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveChessReq::set_has_topos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveChessReq::clear_has_topos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveChessReq::clear_topos() {
  topos_ = 0;
  clear_has_topos();
}
inline ::google::protobuf::int32 MoveChessReq::topos() const {
  return topos_;
}
inline void MoveChessReq::set_topos(::google::protobuf::int32 value) {
  set_has_topos();
  topos_ = value;
}

// optional int32 isconfirm = 4;
inline bool MoveChessReq::has_isconfirm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoveChessReq::set_has_isconfirm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoveChessReq::clear_has_isconfirm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoveChessReq::clear_isconfirm() {
  isconfirm_ = 0;
  clear_has_isconfirm();
}
inline ::google::protobuf::int32 MoveChessReq::isconfirm() const {
  return isconfirm_;
}
inline void MoveChessReq::set_isconfirm(::google::protobuf::int32 value) {
  set_has_isconfirm();
  isconfirm_ = value;
}

// -------------------------------------------------------------------

// AcotionFinishReq

// optional int32 seat = 1;
inline bool AcotionFinishReq::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcotionFinishReq::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcotionFinishReq::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcotionFinishReq::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 AcotionFinishReq::seat() const {
  return seat_;
}
inline void AcotionFinishReq::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ConcedeReq

// optional int32 seat = 1;
inline bool ConcedeReq::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcedeReq::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcedeReq::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcedeReq::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ConcedeReq::seat() const {
  return seat_;
}
inline void ConcedeReq::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// PeaceReq

// required int32 seat = 1;
inline bool PeaceReq::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeaceReq::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeaceReq::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeaceReq::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 PeaceReq::seat() const {
  return seat_;
}
inline void PeaceReq::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// PeaceResReq

// optional int32 seat = 1;
inline bool PeaceResReq::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeaceResReq::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeaceResReq::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeaceResReq::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 PeaceResReq::seat() const {
  return seat_;
}
inline void PeaceResReq::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 agree = 2;
inline bool PeaceResReq::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeaceResReq::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PeaceResReq::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PeaceResReq::clear_agree() {
  agree_ = 0;
  clear_has_agree();
}
inline ::google::protobuf::int32 PeaceResReq::agree() const {
  return agree_;
}
inline void PeaceResReq::set_agree(::google::protobuf::int32 value) {
  set_has_agree();
  agree_ = value;
}

// -------------------------------------------------------------------

// ShowChessReq

// optional int32 atpos = 1;
inline bool ShowChessReq::has_atpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowChessReq::set_has_atpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowChessReq::clear_has_atpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowChessReq::clear_atpos() {
  atpos_ = 0;
  clear_has_atpos();
}
inline ::google::protobuf::int32 ShowChessReq::atpos() const {
  return atpos_;
}
inline void ShowChessReq::set_atpos(::google::protobuf::int32 value) {
  set_has_atpos();
  atpos_ = value;
}

// -------------------------------------------------------------------

// InitRuleReq

// optional int32 gametype = 1;
inline bool InitRuleReq::has_gametype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitRuleReq::set_has_gametype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitRuleReq::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitRuleReq::clear_gametype() {
  gametype_ = 0;
  clear_has_gametype();
}
inline ::google::protobuf::int32 InitRuleReq::gametype() const {
  return gametype_;
}
inline void InitRuleReq::set_gametype(::google::protobuf::int32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional int32 cleandilei = 2;
inline bool InitRuleReq::has_cleandilei() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitRuleReq::set_has_cleandilei() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitRuleReq::clear_has_cleandilei() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitRuleReq::clear_cleandilei() {
  cleandilei_ = 0;
  clear_has_cleandilei();
}
inline ::google::protobuf::int32 InitRuleReq::cleandilei() const {
  return cleandilei_;
}
inline void InitRuleReq::set_cleandilei(::google::protobuf::int32 value) {
  set_has_cleandilei();
  cleandilei_ = value;
}

// optional int32 carryjunqi = 3;
inline bool InitRuleReq::has_carryjunqi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitRuleReq::set_has_carryjunqi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitRuleReq::clear_has_carryjunqi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitRuleReq::clear_carryjunqi() {
  carryjunqi_ = 0;
  clear_has_carryjunqi();
}
inline ::google::protobuf::int32 InitRuleReq::carryjunqi() const {
  return carryjunqi_;
}
inline void InitRuleReq::set_carryjunqi(::google::protobuf::int32 value) {
  set_has_carryjunqi();
  carryjunqi_ = value;
}

// -------------------------------------------------------------------

// FeelReq

// optional uint32 from = 1;
inline bool FeelReq::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeelReq::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeelReq::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeelReq::clear_from() {
  from_ = 0u;
  clear_has_from();
}
inline ::google::protobuf::uint32 FeelReq::from() const {
  return from_;
}
inline void FeelReq::set_from(::google::protobuf::uint32 value) {
  set_has_from();
  from_ = value;
}

// optional uint32 to = 2;
inline bool FeelReq::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeelReq::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeelReq::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeelReq::clear_to() {
  to_ = 0u;
  clear_has_to();
}
inline ::google::protobuf::uint32 FeelReq::to() const {
  return to_;
}
inline void FeelReq::set_to(::google::protobuf::uint32 value) {
  set_has_to();
  to_ = value;
}

// optional uint32 feel = 3;
inline bool FeelReq::has_feel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeelReq::set_has_feel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeelReq::clear_has_feel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeelReq::clear_feel() {
  feel_ = 0u;
  clear_has_feel();
}
inline ::google::protobuf::uint32 FeelReq::feel() const {
  return feel_;
}
inline void FeelReq::set_feel(::google::protobuf::uint32 value) {
  set_has_feel();
  feel_ = value;
}

// optional string str = 4;
inline bool FeelReq::has_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeelReq::set_has_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeelReq::clear_has_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeelReq::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& FeelReq::str() const {
  return *str_;
}
inline void FeelReq::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void FeelReq::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void FeelReq::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeelReq::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* FeelReq::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// InitChessAck

// repeated int32 pos = 1;
inline int InitChessAck::pos_size() const {
  return pos_.size();
}
inline void InitChessAck::clear_pos() {
  pos_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::pos(int index) const {
  return pos_.Get(index);
}
inline void InitChessAck::set_pos(int index, ::google::protobuf::int32 value) {
  pos_.Set(index, value);
}
inline void InitChessAck::add_pos(::google::protobuf::int32 value) {
  pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_pos() {
  return &pos_;
}

// repeated int32 honor = 2;
inline int InitChessAck::honor_size() const {
  return honor_.size();
}
inline void InitChessAck::clear_honor() {
  honor_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::honor(int index) const {
  return honor_.Get(index);
}
inline void InitChessAck::set_honor(int index, ::google::protobuf::int32 value) {
  honor_.Set(index, value);
}
inline void InitChessAck::add_honor(::google::protobuf::int32 value) {
  honor_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::honor() const {
  return honor_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_honor() {
  return &honor_;
}

// repeated int32 hands = 3;
inline int InitChessAck::hands_size() const {
  return hands_.size();
}
inline void InitChessAck::clear_hands() {
  hands_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::hands(int index) const {
  return hands_.Get(index);
}
inline void InitChessAck::set_hands(int index, ::google::protobuf::int32 value) {
  hands_.Set(index, value);
}
inline void InitChessAck::add_hands(::google::protobuf::int32 value) {
  hands_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::hands() const {
  return hands_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_hands() {
  return &hands_;
}

// repeated int32 wins = 4;
inline int InitChessAck::wins_size() const {
  return wins_.size();
}
inline void InitChessAck::clear_wins() {
  wins_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::wins(int index) const {
  return wins_.Get(index);
}
inline void InitChessAck::set_wins(int index, ::google::protobuf::int32 value) {
  wins_.Set(index, value);
}
inline void InitChessAck::add_wins(::google::protobuf::int32 value) {
  wins_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::wins() const {
  return wins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_wins() {
  return &wins_;
}

// repeated int32 breaks = 5;
inline int InitChessAck::breaks_size() const {
  return breaks_.size();
}
inline void InitChessAck::clear_breaks() {
  breaks_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::breaks(int index) const {
  return breaks_.Get(index);
}
inline void InitChessAck::set_breaks(int index, ::google::protobuf::int32 value) {
  breaks_.Set(index, value);
}
inline void InitChessAck::add_breaks(::google::protobuf::int32 value) {
  breaks_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::breaks() const {
  return breaks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_breaks() {
  return &breaks_;
}

// repeated int32 grade = 6;
inline int InitChessAck::grade_size() const {
  return grade_.size();
}
inline void InitChessAck::clear_grade() {
  grade_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::grade(int index) const {
  return grade_.Get(index);
}
inline void InitChessAck::set_grade(int index, ::google::protobuf::int32 value) {
  grade_.Set(index, value);
}
inline void InitChessAck::add_grade(::google::protobuf::int32 value) {
  grade_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::grade() const {
  return grade_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_grade() {
  return &grade_;
}

// optional int32 gametype = 7;
inline bool InitChessAck::has_gametype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InitChessAck::set_has_gametype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InitChessAck::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InitChessAck::clear_gametype() {
  gametype_ = 0;
  clear_has_gametype();
}
inline ::google::protobuf::int32 InitChessAck::gametype() const {
  return gametype_;
}
inline void InitChessAck::set_gametype(::google::protobuf::int32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional int32 cleandilei = 8;
inline bool InitChessAck::has_cleandilei() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InitChessAck::set_has_cleandilei() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InitChessAck::clear_has_cleandilei() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InitChessAck::clear_cleandilei() {
  cleandilei_ = 0;
  clear_has_cleandilei();
}
inline ::google::protobuf::int32 InitChessAck::cleandilei() const {
  return cleandilei_;
}
inline void InitChessAck::set_cleandilei(::google::protobuf::int32 value) {
  set_has_cleandilei();
  cleandilei_ = value;
}

// optional int32 carryjunqi = 9;
inline bool InitChessAck::has_carryjunqi() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InitChessAck::set_has_carryjunqi() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InitChessAck::clear_has_carryjunqi() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InitChessAck::clear_carryjunqi() {
  carryjunqi_ = 0;
  clear_has_carryjunqi();
}
inline ::google::protobuf::int32 InitChessAck::carryjunqi() const {
  return carryjunqi_;
}
inline void InitChessAck::set_carryjunqi(::google::protobuf::int32 value) {
  set_has_carryjunqi();
  carryjunqi_ = value;
}

// repeated int32 fanhands = 10;
inline int InitChessAck::fanhands_size() const {
  return fanhands_.size();
}
inline void InitChessAck::clear_fanhands() {
  fanhands_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::fanhands(int index) const {
  return fanhands_.Get(index);
}
inline void InitChessAck::set_fanhands(int index, ::google::protobuf::int32 value) {
  fanhands_.Set(index, value);
}
inline void InitChessAck::add_fanhands(::google::protobuf::int32 value) {
  fanhands_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::fanhands() const {
  return fanhands_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_fanhands() {
  return &fanhands_;
}

// repeated int32 fanwins = 11;
inline int InitChessAck::fanwins_size() const {
  return fanwins_.size();
}
inline void InitChessAck::clear_fanwins() {
  fanwins_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::fanwins(int index) const {
  return fanwins_.Get(index);
}
inline void InitChessAck::set_fanwins(int index, ::google::protobuf::int32 value) {
  fanwins_.Set(index, value);
}
inline void InitChessAck::add_fanwins(::google::protobuf::int32 value) {
  fanwins_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::fanwins() const {
  return fanwins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_fanwins() {
  return &fanwins_;
}

// repeated int32 fandraws = 12;
inline int InitChessAck::fandraws_size() const {
  return fandraws_.size();
}
inline void InitChessAck::clear_fandraws() {
  fandraws_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::fandraws(int index) const {
  return fandraws_.Get(index);
}
inline void InitChessAck::set_fandraws(int index, ::google::protobuf::int32 value) {
  fandraws_.Set(index, value);
}
inline void InitChessAck::add_fandraws(::google::protobuf::int32 value) {
  fandraws_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::fandraws() const {
  return fandraws_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_fandraws() {
  return &fandraws_;
}

// repeated int32 fandbreaks = 13;
inline int InitChessAck::fandbreaks_size() const {
  return fandbreaks_.size();
}
inline void InitChessAck::clear_fandbreaks() {
  fandbreaks_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::fandbreaks(int index) const {
  return fandbreaks_.Get(index);
}
inline void InitChessAck::set_fandbreaks(int index, ::google::protobuf::int32 value) {
  fandbreaks_.Set(index, value);
}
inline void InitChessAck::add_fandbreaks(::google::protobuf::int32 value) {
  fandbreaks_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::fandbreaks() const {
  return fandbreaks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_fandbreaks() {
  return &fandbreaks_;
}

// repeated int32 anhands = 14;
inline int InitChessAck::anhands_size() const {
  return anhands_.size();
}
inline void InitChessAck::clear_anhands() {
  anhands_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::anhands(int index) const {
  return anhands_.Get(index);
}
inline void InitChessAck::set_anhands(int index, ::google::protobuf::int32 value) {
  anhands_.Set(index, value);
}
inline void InitChessAck::add_anhands(::google::protobuf::int32 value) {
  anhands_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::anhands() const {
  return anhands_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_anhands() {
  return &anhands_;
}

// repeated int32 anwins = 15;
inline int InitChessAck::anwins_size() const {
  return anwins_.size();
}
inline void InitChessAck::clear_anwins() {
  anwins_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::anwins(int index) const {
  return anwins_.Get(index);
}
inline void InitChessAck::set_anwins(int index, ::google::protobuf::int32 value) {
  anwins_.Set(index, value);
}
inline void InitChessAck::add_anwins(::google::protobuf::int32 value) {
  anwins_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::anwins() const {
  return anwins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_anwins() {
  return &anwins_;
}

// repeated int32 andraws = 16;
inline int InitChessAck::andraws_size() const {
  return andraws_.size();
}
inline void InitChessAck::clear_andraws() {
  andraws_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::andraws(int index) const {
  return andraws_.Get(index);
}
inline void InitChessAck::set_andraws(int index, ::google::protobuf::int32 value) {
  andraws_.Set(index, value);
}
inline void InitChessAck::add_andraws(::google::protobuf::int32 value) {
  andraws_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::andraws() const {
  return andraws_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_andraws() {
  return &andraws_;
}

// repeated int32 andbreaks = 17;
inline int InitChessAck::andbreaks_size() const {
  return andbreaks_.size();
}
inline void InitChessAck::clear_andbreaks() {
  andbreaks_.Clear();
}
inline ::google::protobuf::int32 InitChessAck::andbreaks(int index) const {
  return andbreaks_.Get(index);
}
inline void InitChessAck::set_andbreaks(int index, ::google::protobuf::int32 value) {
  andbreaks_.Set(index, value);
}
inline void InitChessAck::add_andbreaks(::google::protobuf::int32 value) {
  andbreaks_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitChessAck::andbreaks() const {
  return andbreaks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitChessAck::mutable_andbreaks() {
  return &andbreaks_;
}

// optional .cn.jj.service.msg.protocol.ParaInfo paras = 18;
inline bool InitChessAck::has_paras() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void InitChessAck::set_has_paras() {
  _has_bits_[0] |= 0x00020000u;
}
inline void InitChessAck::clear_has_paras() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void InitChessAck::clear_paras() {
  if (paras_ != NULL) paras_->::cn::jj::service::msg::protocol::ParaInfo::Clear();
  clear_has_paras();
}
inline const ::cn::jj::service::msg::protocol::ParaInfo& InitChessAck::paras() const {
  return paras_ != NULL ? *paras_ : *default_instance_->paras_;
}
inline ::cn::jj::service::msg::protocol::ParaInfo* InitChessAck::mutable_paras() {
  set_has_paras();
  if (paras_ == NULL) paras_ = new ::cn::jj::service::msg::protocol::ParaInfo;
  return paras_;
}
inline ::cn::jj::service::msg::protocol::ParaInfo* InitChessAck::release_paras() {
  clear_has_paras();
  ::cn::jj::service::msg::protocol::ParaInfo* temp = paras_;
  paras_ = NULL;
  return temp;
}

// optional string serverversion = 19;
inline bool InitChessAck::has_serverversion() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void InitChessAck::set_has_serverversion() {
  _has_bits_[0] |= 0x00040000u;
}
inline void InitChessAck::clear_has_serverversion() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void InitChessAck::clear_serverversion() {
  if (serverversion_ != &::google::protobuf::internal::kEmptyString) {
    serverversion_->clear();
  }
  clear_has_serverversion();
}
inline const ::std::string& InitChessAck::serverversion() const {
  return *serverversion_;
}
inline void InitChessAck::set_serverversion(const ::std::string& value) {
  set_has_serverversion();
  if (serverversion_ == &::google::protobuf::internal::kEmptyString) {
    serverversion_ = new ::std::string;
  }
  serverversion_->assign(value);
}
inline void InitChessAck::set_serverversion(const char* value) {
  set_has_serverversion();
  if (serverversion_ == &::google::protobuf::internal::kEmptyString) {
    serverversion_ = new ::std::string;
  }
  serverversion_->assign(value);
}
inline void InitChessAck::set_serverversion(const char* value, size_t size) {
  set_has_serverversion();
  if (serverversion_ == &::google::protobuf::internal::kEmptyString) {
    serverversion_ = new ::std::string;
  }
  serverversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitChessAck::mutable_serverversion() {
  set_has_serverversion();
  if (serverversion_ == &::google::protobuf::internal::kEmptyString) {
    serverversion_ = new ::std::string;
  }
  return serverversion_;
}
inline ::std::string* InitChessAck::release_serverversion() {
  clear_has_serverversion();
  if (serverversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverversion_;
    serverversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StartMoveChessAck

// optional int32 seat = 1;
inline bool StartMoveChessAck::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartMoveChessAck::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartMoveChessAck::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartMoveChessAck::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 StartMoveChessAck::seat() const {
  return seat_;
}
inline void StartMoveChessAck::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional string layout = 2;
inline bool StartMoveChessAck::has_layout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartMoveChessAck::set_has_layout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartMoveChessAck::clear_has_layout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartMoveChessAck::clear_layout() {
  if (layout_ != &::google::protobuf::internal::kEmptyString) {
    layout_->clear();
  }
  clear_has_layout();
}
inline const ::std::string& StartMoveChessAck::layout() const {
  return *layout_;
}
inline void StartMoveChessAck::set_layout(const ::std::string& value) {
  set_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    layout_ = new ::std::string;
  }
  layout_->assign(value);
}
inline void StartMoveChessAck::set_layout(const char* value) {
  set_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    layout_ = new ::std::string;
  }
  layout_->assign(value);
}
inline void StartMoveChessAck::set_layout(const char* value, size_t size) {
  set_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    layout_ = new ::std::string;
  }
  layout_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StartMoveChessAck::mutable_layout() {
  set_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    layout_ = new ::std::string;
  }
  return layout_;
}
inline ::std::string* StartMoveChessAck::release_layout() {
  clear_has_layout();
  if (layout_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = layout_;
    layout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 headimg = 3;
inline int StartMoveChessAck::headimg_size() const {
  return headimg_.size();
}
inline void StartMoveChessAck::clear_headimg() {
  headimg_.Clear();
}
inline ::google::protobuf::int32 StartMoveChessAck::headimg(int index) const {
  return headimg_.Get(index);
}
inline void StartMoveChessAck::set_headimg(int index, ::google::protobuf::int32 value) {
  headimg_.Set(index, value);
}
inline void StartMoveChessAck::add_headimg(::google::protobuf::int32 value) {
  headimg_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StartMoveChessAck::headimg() const {
  return headimg_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StartMoveChessAck::mutable_headimg() {
  return &headimg_;
}

// repeated uint32 overseat = 4;
inline int StartMoveChessAck::overseat_size() const {
  return overseat_.size();
}
inline void StartMoveChessAck::clear_overseat() {
  overseat_.Clear();
}
inline ::google::protobuf::uint32 StartMoveChessAck::overseat(int index) const {
  return overseat_.Get(index);
}
inline void StartMoveChessAck::set_overseat(int index, ::google::protobuf::uint32 value) {
  overseat_.Set(index, value);
}
inline void StartMoveChessAck::add_overseat(::google::protobuf::uint32 value) {
  overseat_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StartMoveChessAck::overseat() const {
  return overseat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StartMoveChessAck::mutable_overseat() {
  return &overseat_;
}

// -------------------------------------------------------------------

// SelectChessAck

// optional int32 seat = 1;
inline bool SelectChessAck::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectChessAck::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectChessAck::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectChessAck::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 SelectChessAck::seat() const {
  return seat_;
}
inline void SelectChessAck::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 pos = 2;
inline bool SelectChessAck::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectChessAck::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectChessAck::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectChessAck::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 SelectChessAck::pos() const {
  return pos_;
}
inline void SelectChessAck::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// repeated int32 postions = 3 [packed = true];
inline int SelectChessAck::postions_size() const {
  return postions_.size();
}
inline void SelectChessAck::clear_postions() {
  postions_.Clear();
}
inline ::google::protobuf::int32 SelectChessAck::postions(int index) const {
  return postions_.Get(index);
}
inline void SelectChessAck::set_postions(int index, ::google::protobuf::int32 value) {
  postions_.Set(index, value);
}
inline void SelectChessAck::add_postions(::google::protobuf::int32 value) {
  postions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SelectChessAck::postions() const {
  return postions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SelectChessAck::mutable_postions() {
  return &postions_;
}

// -------------------------------------------------------------------

// MoveChessAck

// optional int32 seat = 1;
inline bool MoveChessAck::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveChessAck::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveChessAck::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveChessAck::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 MoveChessAck::seat() const {
  return seat_;
}
inline void MoveChessAck::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 path = 2 [packed = true];
inline int MoveChessAck::path_size() const {
  return path_.size();
}
inline void MoveChessAck::clear_path() {
  path_.Clear();
}
inline ::google::protobuf::int32 MoveChessAck::path(int index) const {
  return path_.Get(index);
}
inline void MoveChessAck::set_path(int index, ::google::protobuf::int32 value) {
  path_.Set(index, value);
}
inline void MoveChessAck::add_path(::google::protobuf::int32 value) {
  path_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MoveChessAck::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MoveChessAck::mutable_path() {
  return &path_;
}

// optional int32 result = 3;
inline bool MoveChessAck::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveChessAck::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveChessAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveChessAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 MoveChessAck::result() const {
  return result_;
}
inline void MoveChessAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 event = 4;
inline bool MoveChessAck::has_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoveChessAck::set_has_event() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoveChessAck::clear_has_event() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoveChessAck::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::google::protobuf::int32 MoveChessAck::event() const {
  return event_;
}
inline void MoveChessAck::set_event(::google::protobuf::int32 value) {
  set_has_event();
  event_ = value;
}

// optional int32 step = 5;
inline bool MoveChessAck::has_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoveChessAck::set_has_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoveChessAck::clear_has_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoveChessAck::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 MoveChessAck::step() const {
  return step_;
}
inline void MoveChessAck::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
}

// optional int32 chesstype = 6;
inline bool MoveChessAck::has_chesstype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MoveChessAck::set_has_chesstype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MoveChessAck::clear_has_chesstype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MoveChessAck::clear_chesstype() {
  chesstype_ = 0;
  clear_has_chesstype();
}
inline ::google::protobuf::int32 MoveChessAck::chesstype() const {
  return chesstype_;
}
inline void MoveChessAck::set_chesstype(::google::protobuf::int32 value) {
  set_has_chesstype();
  chesstype_ = value;
}

// -------------------------------------------------------------------

// ActionFinishAck

// optional int32 nextseat = 1;
inline bool ActionFinishAck::has_nextseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionFinishAck::set_has_nextseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionFinishAck::clear_has_nextseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionFinishAck::clear_nextseat() {
  nextseat_ = 0;
  clear_has_nextseat();
}
inline ::google::protobuf::int32 ActionFinishAck::nextseat() const {
  return nextseat_;
}
inline void ActionFinishAck::set_nextseat(::google::protobuf::int32 value) {
  set_has_nextseat();
  nextseat_ = value;
}

// repeated .cn.jj.service.msg.protocol.Chess chess = 2;
inline int ActionFinishAck::chess_size() const {
  return chess_.size();
}
inline void ActionFinishAck::clear_chess() {
  chess_.Clear();
}
inline const ::cn::jj::service::msg::protocol::Chess& ActionFinishAck::chess(int index) const {
  return chess_.Get(index);
}
inline ::cn::jj::service::msg::protocol::Chess* ActionFinishAck::mutable_chess(int index) {
  return chess_.Mutable(index);
}
inline ::cn::jj::service::msg::protocol::Chess* ActionFinishAck::add_chess() {
  return chess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::Chess >&
ActionFinishAck::chess() const {
  return chess_;
}
inline ::google::protobuf::RepeatedPtrField< ::cn::jj::service::msg::protocol::Chess >*
ActionFinishAck::mutable_chess() {
  return &chess_;
}

// optional int32 movetime = 3;
inline bool ActionFinishAck::has_movetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionFinishAck::set_has_movetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionFinishAck::clear_has_movetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionFinishAck::clear_movetime() {
  movetime_ = 0;
  clear_has_movetime();
}
inline ::google::protobuf::int32 ActionFinishAck::movetime() const {
  return movetime_;
}
inline void ActionFinishAck::set_movetime(::google::protobuf::int32 value) {
  set_has_movetime();
  movetime_ = value;
}

// repeated int32 overseat = 4;
inline int ActionFinishAck::overseat_size() const {
  return overseat_.size();
}
inline void ActionFinishAck::clear_overseat() {
  overseat_.Clear();
}
inline ::google::protobuf::int32 ActionFinishAck::overseat(int index) const {
  return overseat_.Get(index);
}
inline void ActionFinishAck::set_overseat(int index, ::google::protobuf::int32 value) {
  overseat_.Set(index, value);
}
inline void ActionFinishAck::add_overseat(::google::protobuf::int32 value) {
  overseat_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ActionFinishAck::overseat() const {
  return overseat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ActionFinishAck::mutable_overseat() {
  return &overseat_;
}

// -------------------------------------------------------------------

// FinishGameAck

// repeated int32 result = 1;
inline int FinishGameAck::result_size() const {
  return result_.size();
}
inline void FinishGameAck::clear_result() {
  result_.Clear();
}
inline ::google::protobuf::int32 FinishGameAck::result(int index) const {
  return result_.Get(index);
}
inline void FinishGameAck::set_result(int index, ::google::protobuf::int32 value) {
  result_.Set(index, value);
}
inline void FinishGameAck::add_result(::google::protobuf::int32 value) {
  result_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FinishGameAck::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FinishGameAck::mutable_result() {
  return &result_;
}

// repeated string layout = 2;
inline int FinishGameAck::layout_size() const {
  return layout_.size();
}
inline void FinishGameAck::clear_layout() {
  layout_.Clear();
}
inline const ::std::string& FinishGameAck::layout(int index) const {
  return layout_.Get(index);
}
inline ::std::string* FinishGameAck::mutable_layout(int index) {
  return layout_.Mutable(index);
}
inline void FinishGameAck::set_layout(int index, const ::std::string& value) {
  layout_.Mutable(index)->assign(value);
}
inline void FinishGameAck::set_layout(int index, const char* value) {
  layout_.Mutable(index)->assign(value);
}
inline void FinishGameAck::set_layout(int index, const char* value, size_t size) {
  layout_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinishGameAck::add_layout() {
  return layout_.Add();
}
inline void FinishGameAck::add_layout(const ::std::string& value) {
  layout_.Add()->assign(value);
}
inline void FinishGameAck::add_layout(const char* value) {
  layout_.Add()->assign(value);
}
inline void FinishGameAck::add_layout(const char* value, size_t size) {
  layout_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FinishGameAck::layout() const {
  return layout_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FinishGameAck::mutable_layout() {
  return &layout_;
}

// repeated int32 honor = 3;
inline int FinishGameAck::honor_size() const {
  return honor_.size();
}
inline void FinishGameAck::clear_honor() {
  honor_.Clear();
}
inline ::google::protobuf::int32 FinishGameAck::honor(int index) const {
  return honor_.Get(index);
}
inline void FinishGameAck::set_honor(int index, ::google::protobuf::int32 value) {
  honor_.Set(index, value);
}
inline void FinishGameAck::add_honor(::google::protobuf::int32 value) {
  honor_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FinishGameAck::honor() const {
  return honor_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FinishGameAck::mutable_honor() {
  return &honor_;
}

// repeated int32 grade = 4;
inline int FinishGameAck::grade_size() const {
  return grade_.size();
}
inline void FinishGameAck::clear_grade() {
  grade_.Clear();
}
inline ::google::protobuf::int32 FinishGameAck::grade(int index) const {
  return grade_.Get(index);
}
inline void FinishGameAck::set_grade(int index, ::google::protobuf::int32 value) {
  grade_.Set(index, value);
}
inline void FinishGameAck::add_grade(::google::protobuf::int32 value) {
  grade_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FinishGameAck::grade() const {
  return grade_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FinishGameAck::mutable_grade() {
  return &grade_;
}

// repeated uint32 urlparas = 5;
inline int FinishGameAck::urlparas_size() const {
  return urlparas_.size();
}
inline void FinishGameAck::clear_urlparas() {
  urlparas_.Clear();
}
inline ::google::protobuf::uint32 FinishGameAck::urlparas(int index) const {
  return urlparas_.Get(index);
}
inline void FinishGameAck::set_urlparas(int index, ::google::protobuf::uint32 value) {
  urlparas_.Set(index, value);
}
inline void FinishGameAck::add_urlparas(::google::protobuf::uint32 value) {
  urlparas_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FinishGameAck::urlparas() const {
  return urlparas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FinishGameAck::mutable_urlparas() {
  return &urlparas_;
}

// optional uint32 endtype = 6;
inline bool FinishGameAck::has_endtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FinishGameAck::set_has_endtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FinishGameAck::clear_has_endtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FinishGameAck::clear_endtype() {
  endtype_ = 0u;
  clear_has_endtype();
}
inline ::google::protobuf::uint32 FinishGameAck::endtype() const {
  return endtype_;
}
inline void FinishGameAck::set_endtype(::google::protobuf::uint32 value) {
  set_has_endtype();
  endtype_ = value;
}

// repeated uint32 timeoutcost = 7;
inline int FinishGameAck::timeoutcost_size() const {
  return timeoutcost_.size();
}
inline void FinishGameAck::clear_timeoutcost() {
  timeoutcost_.Clear();
}
inline ::google::protobuf::uint32 FinishGameAck::timeoutcost(int index) const {
  return timeoutcost_.Get(index);
}
inline void FinishGameAck::set_timeoutcost(int index, ::google::protobuf::uint32 value) {
  timeoutcost_.Set(index, value);
}
inline void FinishGameAck::add_timeoutcost(::google::protobuf::uint32 value) {
  timeoutcost_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FinishGameAck::timeoutcost() const {
  return timeoutcost_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FinishGameAck::mutable_timeoutcost() {
  return &timeoutcost_;
}

// repeated uint32 usedware = 8;
inline int FinishGameAck::usedware_size() const {
  return usedware_.size();
}
inline void FinishGameAck::clear_usedware() {
  usedware_.Clear();
}
inline ::google::protobuf::uint32 FinishGameAck::usedware(int index) const {
  return usedware_.Get(index);
}
inline void FinishGameAck::set_usedware(int index, ::google::protobuf::uint32 value) {
  usedware_.Set(index, value);
}
inline void FinishGameAck::add_usedware(::google::protobuf::uint32 value) {
  usedware_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FinishGameAck::usedware() const {
  return usedware_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FinishGameAck::mutable_usedware() {
  return &usedware_;
}

// -------------------------------------------------------------------

// PeaceAck

// required int32 seat = 1;
inline bool PeaceAck::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeaceAck::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeaceAck::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeaceAck::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 PeaceAck::seat() const {
  return seat_;
}
inline void PeaceAck::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ShowChessAck

// optional .cn.jj.service.msg.protocol.Chess chess = 1;
inline bool ShowChessAck::has_chess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowChessAck::set_has_chess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowChessAck::clear_has_chess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowChessAck::clear_chess() {
  if (chess_ != NULL) chess_->::cn::jj::service::msg::protocol::Chess::Clear();
  clear_has_chess();
}
inline const ::cn::jj::service::msg::protocol::Chess& ShowChessAck::chess() const {
  return chess_ != NULL ? *chess_ : *default_instance_->chess_;
}
inline ::cn::jj::service::msg::protocol::Chess* ShowChessAck::mutable_chess() {
  set_has_chess();
  if (chess_ == NULL) chess_ = new ::cn::jj::service::msg::protocol::Chess;
  return chess_;
}
inline ::cn::jj::service::msg::protocol::Chess* ShowChessAck::release_chess() {
  clear_has_chess();
  ::cn::jj::service::msg::protocol::Chess* temp = chess_;
  chess_ = NULL;
  return temp;
}

// optional int32 step = 2;
inline bool ShowChessAck::has_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowChessAck::set_has_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowChessAck::clear_has_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowChessAck::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 ShowChessAck::step() const {
  return step_;
}
inline void ShowChessAck::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
}

// repeated int32 color = 3;
inline int ShowChessAck::color_size() const {
  return color_.size();
}
inline void ShowChessAck::clear_color() {
  color_.Clear();
}
inline ::google::protobuf::int32 ShowChessAck::color(int index) const {
  return color_.Get(index);
}
inline void ShowChessAck::set_color(int index, ::google::protobuf::int32 value) {
  color_.Set(index, value);
}
inline void ShowChessAck::add_color(::google::protobuf::int32 value) {
  color_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ShowChessAck::color() const {
  return color_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ShowChessAck::mutable_color() {
  return &color_;
}

// -------------------------------------------------------------------

// ShowTipsAck

// optional int32 seat = 1;
inline bool ShowTipsAck::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowTipsAck::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowTipsAck::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowTipsAck::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ShowTipsAck::seat() const {
  return seat_;
}
inline void ShowTipsAck::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 tips = 2;
inline bool ShowTipsAck::has_tips() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowTipsAck::set_has_tips() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowTipsAck::clear_has_tips() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowTipsAck::clear_tips() {
  tips_ = 0;
  clear_has_tips();
}
inline ::google::protobuf::int32 ShowTipsAck::tips() const {
  return tips_;
}
inline void ShowTipsAck::set_tips(::google::protobuf::int32 value) {
  set_has_tips();
  tips_ = value;
}

// optional int32 reducetime = 3;
inline bool ShowTipsAck::has_reducetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShowTipsAck::set_has_reducetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShowTipsAck::clear_has_reducetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShowTipsAck::clear_reducetime() {
  reducetime_ = 0;
  clear_has_reducetime();
}
inline ::google::protobuf::int32 ShowTipsAck::reducetime() const {
  return reducetime_;
}
inline void ShowTipsAck::set_reducetime(::google::protobuf::int32 value) {
  set_has_reducetime();
  reducetime_ = value;
}

// -------------------------------------------------------------------

// RefusePeaceAck

// optional int32 count = 1;
inline bool RefusePeaceAck::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefusePeaceAck::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefusePeaceAck::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefusePeaceAck::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 RefusePeaceAck::count() const {
  return count_;
}
inline void RefusePeaceAck::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 disseat = 2;
inline bool RefusePeaceAck::has_disseat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefusePeaceAck::set_has_disseat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefusePeaceAck::clear_has_disseat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefusePeaceAck::clear_disseat() {
  disseat_ = 0;
  clear_has_disseat();
}
inline ::google::protobuf::int32 RefusePeaceAck::disseat() const {
  return disseat_;
}
inline void RefusePeaceAck::set_disseat(::google::protobuf::int32 value) {
  set_has_disseat();
  disseat_ = value;
}

// optional int32 seat = 3;
inline bool RefusePeaceAck::has_seat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefusePeaceAck::set_has_seat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefusePeaceAck::clear_has_seat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefusePeaceAck::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 RefusePeaceAck::seat() const {
  return seat_;
}
inline void RefusePeaceAck::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// RepeatCountAck

// optional int32 seat = 1;
inline bool RepeatCountAck::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepeatCountAck::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepeatCountAck::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepeatCountAck::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 RepeatCountAck::seat() const {
  return seat_;
}
inline void RepeatCountAck::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 count = 2;
inline bool RepeatCountAck::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RepeatCountAck::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RepeatCountAck::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RepeatCountAck::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 RepeatCountAck::count() const {
  return count_;
}
inline void RepeatCountAck::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// InitRuleAck

// optional int32 reserve = 1;
inline bool InitRuleAck::has_reserve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitRuleAck::set_has_reserve() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitRuleAck::clear_has_reserve() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitRuleAck::clear_reserve() {
  reserve_ = 0;
  clear_has_reserve();
}
inline ::google::protobuf::int32 InitRuleAck::reserve() const {
  return reserve_;
}
inline void InitRuleAck::set_reserve(::google::protobuf::int32 value) {
  set_has_reserve();
  reserve_ = value;
}

// -------------------------------------------------------------------

// InitLayoutAck

// repeated int32 layoutstate = 5;
inline int InitLayoutAck::layoutstate_size() const {
  return layoutstate_.size();
}
inline void InitLayoutAck::clear_layoutstate() {
  layoutstate_.Clear();
}
inline ::google::protobuf::int32 InitLayoutAck::layoutstate(int index) const {
  return layoutstate_.Get(index);
}
inline void InitLayoutAck::set_layoutstate(int index, ::google::protobuf::int32 value) {
  layoutstate_.Set(index, value);
}
inline void InitLayoutAck::add_layoutstate(::google::protobuf::int32 value) {
  layoutstate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InitLayoutAck::layoutstate() const {
  return layoutstate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InitLayoutAck::mutable_layoutstate() {
  return &layoutstate_;
}

// -------------------------------------------------------------------

// TimeOutAck

// optional int32 seat = 1;
inline bool TimeOutAck::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeOutAck::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeOutAck::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeOutAck::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 TimeOutAck::seat() const {
  return seat_;
}
inline void TimeOutAck::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 count = 2;
inline bool TimeOutAck::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeOutAck::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeOutAck::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeOutAck::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 TimeOutAck::count() const {
  return count_;
}
inline void TimeOutAck::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 reducetime = 3;
inline bool TimeOutAck::has_reducetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeOutAck::set_has_reducetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeOutAck::clear_has_reducetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeOutAck::clear_reducetime() {
  reducetime_ = 0;
  clear_has_reducetime();
}
inline ::google::protobuf::int32 TimeOutAck::reducetime() const {
  return reducetime_;
}
inline void TimeOutAck::set_reducetime(::google::protobuf::int32 value) {
  set_has_reducetime();
  reducetime_ = value;
}

// -------------------------------------------------------------------

// FeelAck

// optional uint32 from = 1;
inline bool FeelAck::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeelAck::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeelAck::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeelAck::clear_from() {
  from_ = 0u;
  clear_has_from();
}
inline ::google::protobuf::uint32 FeelAck::from() const {
  return from_;
}
inline void FeelAck::set_from(::google::protobuf::uint32 value) {
  set_has_from();
  from_ = value;
}

// optional uint32 to = 2;
inline bool FeelAck::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeelAck::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeelAck::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeelAck::clear_to() {
  to_ = 0u;
  clear_has_to();
}
inline ::google::protobuf::uint32 FeelAck::to() const {
  return to_;
}
inline void FeelAck::set_to(::google::protobuf::uint32 value) {
  set_has_to();
  to_ = value;
}

// optional uint32 feel = 3;
inline bool FeelAck::has_feel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeelAck::set_has_feel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeelAck::clear_has_feel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeelAck::clear_feel() {
  feel_ = 0u;
  clear_has_feel();
}
inline ::google::protobuf::uint32 FeelAck::feel() const {
  return feel_;
}
inline void FeelAck::set_feel(::google::protobuf::uint32 value) {
  set_has_feel();
  feel_ = value;
}

// optional string str = 4;
inline bool FeelAck::has_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeelAck::set_has_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeelAck::clear_has_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeelAck::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& FeelAck::str() const {
  return *str_;
}
inline void FeelAck::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void FeelAck::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void FeelAck::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeelAck::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* FeelAck::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ConcedeAck

// optional int32 seat = 1;
inline bool ConcedeAck::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcedeAck::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcedeAck::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcedeAck::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ConcedeAck::seat() const {
  return seat_;
}
inline void ConcedeAck::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace msg
}  // namespace service
}  // namespace jj
}  // namespace cn

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TKJunQiPK_2eproto__INCLUDED
