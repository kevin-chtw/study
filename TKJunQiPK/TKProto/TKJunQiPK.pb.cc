// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TKJunQiPK.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cn {
namespace jj {
namespace service {
namespace msg {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TKMobileReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMobileReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKMobileAckMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKMobileAckMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* JunQiPKReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JunQiPKReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* JunQiPKAckMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JunQiPKAckMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chess_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitLayoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitLayoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectChessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectChessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveChessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveChessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcotionFinishReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcotionFinishReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcedeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcedeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeaceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeaceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeaceResReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeaceResReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowChessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowChessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitRuleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitRuleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitChessAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitChessAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartMoveChessAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartMoveChessAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectChessAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectChessAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveChessAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveChessAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionFinishAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionFinishAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishGameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishGameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeaceAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeaceAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowChessAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowChessAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowTipsAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowTipsAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefusePeaceAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefusePeaceAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RepeatCountAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepeatCountAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitRuleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitRuleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitLayoutAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitLayoutAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeOutAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeOutAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeelAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeelAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcedeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcedeAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TKJunQiPK_2eproto() {
  protobuf_AddDesc_TKJunQiPK_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TKJunQiPK.proto");
  GOOGLE_CHECK(file != NULL);
  TKMobileReqMsg_descriptor_ = file->message_type(0);
  static const int TKMobileReqMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileReqMsg, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileReqMsg, junqipk_req_msg_),
  };
  TKMobileReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMobileReqMsg_descriptor_,
      TKMobileReqMsg::default_instance_,
      TKMobileReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMobileReqMsg));
  TKMobileAckMsg_descriptor_ = file->message_type(1);
  static const int TKMobileAckMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileAckMsg, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileAckMsg, junqipk_ack_msg_),
  };
  TKMobileAckMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKMobileAckMsg_descriptor_,
      TKMobileAckMsg::default_instance_,
      TKMobileAckMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileAckMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKMobileAckMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKMobileAckMsg));
  JunQiPKReqMsg_descriptor_ = file->message_type(2);
  static const int JunQiPKReqMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, initlayout_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, selectchess_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, movechess_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, actionfinish_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, concede_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, peace_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, peaceres_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, showchess_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, initrule_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, cancellayout_req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, feel_req_msg_),
  };
  JunQiPKReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JunQiPKReqMsg_descriptor_,
      JunQiPKReqMsg::default_instance_,
      JunQiPKReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JunQiPKReqMsg));
  JunQiPKAckMsg_descriptor_ = file->message_type(3);
  static const int JunQiPKAckMsg_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, severtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, initchess_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, startmovechess_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, selectchess_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, movechess_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, actionfinish_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, finishgame_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, peace_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, showchess_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, showtips_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, refusepeace_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, repeatcount_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, initrule_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, initlayout_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, timeout_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, feel_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, concede_ack_msg_),
  };
  JunQiPKAckMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JunQiPKAckMsg_descriptor_,
      JunQiPKAckMsg::default_instance_,
      JunQiPKAckMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunQiPKAckMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JunQiPKAckMsg));
  Chess_descriptor_ = file->message_type(4);
  static const int Chess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chess, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chess, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chess, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chess, seat_),
  };
  Chess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chess_descriptor_,
      Chess::default_instance_,
      Chess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chess));
  ParaInfo_descriptor_ = file->message_type(5);
  static const int ParaInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaInfo, one_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaInfo, two_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaInfo, three_),
  };
  ParaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParaInfo_descriptor_,
      ParaInfo::default_instance_,
      ParaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParaInfo));
  InitLayoutReq_descriptor_ = file->message_type(6);
  static const int InitLayoutReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutReq, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutReq, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutReq, headimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutReq, param_),
  };
  InitLayoutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitLayoutReq_descriptor_,
      InitLayoutReq::default_instance_,
      InitLayoutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitLayoutReq));
  SelectChessReq_descriptor_ = file->message_type(7);
  static const int SelectChessReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectChessReq, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectChessReq, pos_),
  };
  SelectChessReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectChessReq_descriptor_,
      SelectChessReq::default_instance_,
      SelectChessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectChessReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectChessReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectChessReq));
  MoveChessReq_descriptor_ = file->message_type(8);
  static const int MoveChessReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessReq, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessReq, atpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessReq, topos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessReq, isconfirm_),
  };
  MoveChessReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveChessReq_descriptor_,
      MoveChessReq::default_instance_,
      MoveChessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveChessReq));
  AcotionFinishReq_descriptor_ = file->message_type(9);
  static const int AcotionFinishReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcotionFinishReq, seat_),
  };
  AcotionFinishReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcotionFinishReq_descriptor_,
      AcotionFinishReq::default_instance_,
      AcotionFinishReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcotionFinishReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcotionFinishReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcotionFinishReq));
  ConcedeReq_descriptor_ = file->message_type(10);
  static const int ConcedeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcedeReq, seat_),
  };
  ConcedeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcedeReq_descriptor_,
      ConcedeReq::default_instance_,
      ConcedeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcedeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcedeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcedeReq));
  PeaceReq_descriptor_ = file->message_type(11);
  static const int PeaceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceReq, seat_),
  };
  PeaceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeaceReq_descriptor_,
      PeaceReq::default_instance_,
      PeaceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeaceReq));
  PeaceResReq_descriptor_ = file->message_type(12);
  static const int PeaceResReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceResReq, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceResReq, agree_),
  };
  PeaceResReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeaceResReq_descriptor_,
      PeaceResReq::default_instance_,
      PeaceResReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceResReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceResReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeaceResReq));
  ShowChessReq_descriptor_ = file->message_type(13);
  static const int ShowChessReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowChessReq, atpos_),
  };
  ShowChessReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowChessReq_descriptor_,
      ShowChessReq::default_instance_,
      ShowChessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowChessReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowChessReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowChessReq));
  InitRuleReq_descriptor_ = file->message_type(14);
  static const int InitRuleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRuleReq, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRuleReq, cleandilei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRuleReq, carryjunqi_),
  };
  InitRuleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitRuleReq_descriptor_,
      InitRuleReq::default_instance_,
      InitRuleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRuleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRuleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitRuleReq));
  FeelReq_descriptor_ = file->message_type(15);
  static const int FeelReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelReq, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelReq, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelReq, feel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelReq, str_),
  };
  FeelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeelReq_descriptor_,
      FeelReq::default_instance_,
      FeelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeelReq));
  InitChessAck_descriptor_ = file->message_type(16);
  static const int InitChessAck_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, hands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, breaks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, cleandilei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, carryjunqi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, fanhands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, fanwins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, fandraws_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, fandbreaks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, anhands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, anwins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, andraws_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, andbreaks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, paras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, serverversion_),
  };
  InitChessAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitChessAck_descriptor_,
      InitChessAck::default_instance_,
      InitChessAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitChessAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitChessAck));
  StartMoveChessAck_descriptor_ = file->message_type(17);
  static const int StartMoveChessAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartMoveChessAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartMoveChessAck, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartMoveChessAck, headimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartMoveChessAck, overseat_),
  };
  StartMoveChessAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartMoveChessAck_descriptor_,
      StartMoveChessAck::default_instance_,
      StartMoveChessAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartMoveChessAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartMoveChessAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartMoveChessAck));
  SelectChessAck_descriptor_ = file->message_type(18);
  static const int SelectChessAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectChessAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectChessAck, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectChessAck, postions_),
  };
  SelectChessAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectChessAck_descriptor_,
      SelectChessAck::default_instance_,
      SelectChessAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectChessAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectChessAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectChessAck));
  MoveChessAck_descriptor_ = file->message_type(19);
  static const int MoveChessAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessAck, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessAck, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessAck, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessAck, chesstype_),
  };
  MoveChessAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveChessAck_descriptor_,
      MoveChessAck::default_instance_,
      MoveChessAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChessAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveChessAck));
  ActionFinishAck_descriptor_ = file->message_type(20);
  static const int ActionFinishAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFinishAck, nextseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFinishAck, chess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFinishAck, movetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFinishAck, overseat_),
  };
  ActionFinishAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionFinishAck_descriptor_,
      ActionFinishAck::default_instance_,
      ActionFinishAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFinishAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionFinishAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionFinishAck));
  FinishGameAck_descriptor_ = file->message_type(21);
  static const int FinishGameAck_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, urlparas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, endtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, timeoutcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, usedware_),
  };
  FinishGameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishGameAck_descriptor_,
      FinishGameAck::default_instance_,
      FinishGameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishGameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishGameAck));
  PeaceAck_descriptor_ = file->message_type(22);
  static const int PeaceAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceAck, seat_),
  };
  PeaceAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeaceAck_descriptor_,
      PeaceAck::default_instance_,
      PeaceAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeaceAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeaceAck));
  ShowChessAck_descriptor_ = file->message_type(23);
  static const int ShowChessAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowChessAck, chess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowChessAck, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowChessAck, color_),
  };
  ShowChessAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowChessAck_descriptor_,
      ShowChessAck::default_instance_,
      ShowChessAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowChessAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowChessAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowChessAck));
  ShowTipsAck_descriptor_ = file->message_type(24);
  static const int ShowTipsAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowTipsAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowTipsAck, tips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowTipsAck, reducetime_),
  };
  ShowTipsAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowTipsAck_descriptor_,
      ShowTipsAck::default_instance_,
      ShowTipsAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowTipsAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowTipsAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowTipsAck));
  RefusePeaceAck_descriptor_ = file->message_type(25);
  static const int RefusePeaceAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefusePeaceAck, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefusePeaceAck, disseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefusePeaceAck, seat_),
  };
  RefusePeaceAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefusePeaceAck_descriptor_,
      RefusePeaceAck::default_instance_,
      RefusePeaceAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefusePeaceAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefusePeaceAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefusePeaceAck));
  RepeatCountAck_descriptor_ = file->message_type(26);
  static const int RepeatCountAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatCountAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatCountAck, count_),
  };
  RepeatCountAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepeatCountAck_descriptor_,
      RepeatCountAck::default_instance_,
      RepeatCountAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatCountAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatCountAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepeatCountAck));
  InitRuleAck_descriptor_ = file->message_type(27);
  static const int InitRuleAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRuleAck, reserve_),
  };
  InitRuleAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitRuleAck_descriptor_,
      InitRuleAck::default_instance_,
      InitRuleAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRuleAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRuleAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitRuleAck));
  InitLayoutAck_descriptor_ = file->message_type(28);
  static const int InitLayoutAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutAck, layoutstate_),
  };
  InitLayoutAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitLayoutAck_descriptor_,
      InitLayoutAck::default_instance_,
      InitLayoutAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLayoutAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitLayoutAck));
  TimeOutAck_descriptor_ = file->message_type(29);
  static const int TimeOutAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOutAck, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOutAck, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOutAck, reducetime_),
  };
  TimeOutAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeOutAck_descriptor_,
      TimeOutAck::default_instance_,
      TimeOutAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOutAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeOutAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeOutAck));
  FeelAck_descriptor_ = file->message_type(30);
  static const int FeelAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelAck, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelAck, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelAck, feel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelAck, str_),
  };
  FeelAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeelAck_descriptor_,
      FeelAck::default_instance_,
      FeelAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeelAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeelAck));
  ConcedeAck_descriptor_ = file->message_type(31);
  static const int ConcedeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcedeAck, seat_),
  };
  ConcedeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcedeAck_descriptor_,
      ConcedeAck::default_instance_,
      ConcedeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcedeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcedeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcedeAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TKJunQiPK_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMobileReqMsg_descriptor_, &TKMobileReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKMobileAckMsg_descriptor_, &TKMobileAckMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JunQiPKReqMsg_descriptor_, &JunQiPKReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JunQiPKAckMsg_descriptor_, &JunQiPKAckMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chess_descriptor_, &Chess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParaInfo_descriptor_, &ParaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitLayoutReq_descriptor_, &InitLayoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectChessReq_descriptor_, &SelectChessReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveChessReq_descriptor_, &MoveChessReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcotionFinishReq_descriptor_, &AcotionFinishReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcedeReq_descriptor_, &ConcedeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeaceReq_descriptor_, &PeaceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeaceResReq_descriptor_, &PeaceResReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowChessReq_descriptor_, &ShowChessReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitRuleReq_descriptor_, &InitRuleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeelReq_descriptor_, &FeelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitChessAck_descriptor_, &InitChessAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartMoveChessAck_descriptor_, &StartMoveChessAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectChessAck_descriptor_, &SelectChessAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveChessAck_descriptor_, &MoveChessAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionFinishAck_descriptor_, &ActionFinishAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishGameAck_descriptor_, &FinishGameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeaceAck_descriptor_, &PeaceAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowChessAck_descriptor_, &ShowChessAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowTipsAck_descriptor_, &ShowTipsAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefusePeaceAck_descriptor_, &RefusePeaceAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepeatCountAck_descriptor_, &RepeatCountAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitRuleAck_descriptor_, &InitRuleAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitLayoutAck_descriptor_, &InitLayoutAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeOutAck_descriptor_, &TimeOutAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeelAck_descriptor_, &FeelAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcedeAck_descriptor_, &ConcedeAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TKJunQiPK_2eproto() {
  delete TKMobileReqMsg::default_instance_;
  delete TKMobileReqMsg_reflection_;
  delete TKMobileAckMsg::default_instance_;
  delete TKMobileAckMsg_reflection_;
  delete JunQiPKReqMsg::default_instance_;
  delete JunQiPKReqMsg_reflection_;
  delete JunQiPKAckMsg::default_instance_;
  delete JunQiPKAckMsg_reflection_;
  delete Chess::default_instance_;
  delete Chess_reflection_;
  delete ParaInfo::default_instance_;
  delete ParaInfo_reflection_;
  delete InitLayoutReq::default_instance_;
  delete InitLayoutReq_reflection_;
  delete SelectChessReq::default_instance_;
  delete SelectChessReq_reflection_;
  delete MoveChessReq::default_instance_;
  delete MoveChessReq_reflection_;
  delete AcotionFinishReq::default_instance_;
  delete AcotionFinishReq_reflection_;
  delete ConcedeReq::default_instance_;
  delete ConcedeReq_reflection_;
  delete PeaceReq::default_instance_;
  delete PeaceReq_reflection_;
  delete PeaceResReq::default_instance_;
  delete PeaceResReq_reflection_;
  delete ShowChessReq::default_instance_;
  delete ShowChessReq_reflection_;
  delete InitRuleReq::default_instance_;
  delete InitRuleReq_reflection_;
  delete FeelReq::default_instance_;
  delete FeelReq_reflection_;
  delete InitChessAck::default_instance_;
  delete InitChessAck_reflection_;
  delete StartMoveChessAck::default_instance_;
  delete StartMoveChessAck_reflection_;
  delete SelectChessAck::default_instance_;
  delete SelectChessAck_reflection_;
  delete MoveChessAck::default_instance_;
  delete MoveChessAck_reflection_;
  delete ActionFinishAck::default_instance_;
  delete ActionFinishAck_reflection_;
  delete FinishGameAck::default_instance_;
  delete FinishGameAck_reflection_;
  delete PeaceAck::default_instance_;
  delete PeaceAck_reflection_;
  delete ShowChessAck::default_instance_;
  delete ShowChessAck_reflection_;
  delete ShowTipsAck::default_instance_;
  delete ShowTipsAck_reflection_;
  delete RefusePeaceAck::default_instance_;
  delete RefusePeaceAck_reflection_;
  delete RepeatCountAck::default_instance_;
  delete RepeatCountAck_reflection_;
  delete InitRuleAck::default_instance_;
  delete InitRuleAck_reflection_;
  delete InitLayoutAck::default_instance_;
  delete InitLayoutAck_reflection_;
  delete TimeOutAck::default_instance_;
  delete TimeOutAck_reflection_;
  delete FeelAck::default_instance_;
  delete FeelAck_reflection_;
  delete ConcedeAck::default_instance_;
  delete ConcedeAck_reflection_;
}

void protobuf_AddDesc_TKJunQiPK_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017TKJunQiPK.proto\022\032cn.jj.service.msg.pro"
    "tocol\"c\n\016TKMobileReqMsg\022\r\n\005param\030\001 \001(\r\022B"
    "\n\017junqipk_req_msg\030B \001(\0132).cn.jj.service."
    "msg.protocol.JunQiPKReqMsg\"c\n\016TKMobileAc"
    "kMsg\022\r\n\005param\030\001 \001(\r\022B\n\017junqipk_ack_msg\030B"
    " \001(\0132).cn.jj.service.msg.protocol.JunQiP"
    "KAckMsg\"\343\005\n\rJunQiPKReqMsg\022\017\n\007matchid\030\001 \002"
    "(\r\022E\n\022initlayout_req_msg\030\002 \001(\0132).cn.jj.s"
    "ervice.msg.protocol.InitLayoutReq\022G\n\023sel"
    "ectchess_req_msg\030\003 \001(\0132*.cn.jj.service.m"
    "sg.protocol.SelectChessReq\022C\n\021movechess_"
    "req_msg\030\004 \001(\0132(.cn.jj.service.msg.protoc"
    "ol.MoveChessReq\022J\n\024actionfinish_req_msg\030"
    "\005 \001(\0132,.cn.jj.service.msg.protocol.Acoti"
    "onFinishReq\022\?\n\017concede_req_msg\030\006 \001(\0132&.c"
    "n.jj.service.msg.protocol.ConcedeReq\022;\n\r"
    "peace_req_msg\030\007 \001(\0132$.cn.jj.service.msg."
    "protocol.PeaceReq\022A\n\020peaceres_req_msg\030\010 "
    "\001(\0132\'.cn.jj.service.msg.protocol.PeaceRe"
    "sReq\022C\n\021showchess_req_msg\030\t \001(\0132(.cn.jj."
    "service.msg.protocol.ShowChessReq\022A\n\020ini"
    "trule_req_msg\030\n \001(\0132\'.cn.jj.service.msg."
    "protocol.InitRuleReq\022\034\n\024cancellayout_req"
    "_msg\030\013 \001(\r\0229\n\014feel_req_msg\030\014 \001(\0132#.cn.jj"
    ".service.msg.protocol.FeelReq\"\205\t\n\rJunQiP"
    "KAckMsg\022\017\n\007matchid\030\001 \002(\r\022\021\n\tsevertime\030\002 "
    "\002(\r\022C\n\021initchess_ack_msg\030\003 \001(\0132(.cn.jj.s"
    "ervice.msg.protocol.InitChessAck\022M\n\026star"
    "tmovechess_ack_msg\030\004 \001(\0132-.cn.jj.service"
    ".msg.protocol.StartMoveChessAck\022G\n\023selec"
    "tchess_ack_msg\030\005 \001(\0132*.cn.jj.service.msg"
    ".protocol.SelectChessAck\022C\n\021movechess_ac"
    "k_msg\030\006 \001(\0132(.cn.jj.service.msg.protocol"
    ".MoveChessAck\022I\n\024actionfinish_ack_msg\030\007 "
    "\001(\0132+.cn.jj.service.msg.protocol.ActionF"
    "inishAck\022E\n\022finishgame_ack_msg\030\010 \001(\0132).c"
    "n.jj.service.msg.protocol.FinishGameAck\022"
    ";\n\rpeace_ack_msg\030\t \001(\0132$.cn.jj.service.m"
    "sg.protocol.PeaceAck\022C\n\021showchess_ack_ms"
    "g\030\n \001(\0132(.cn.jj.service.msg.protocol.Sho"
    "wChessAck\022A\n\020showtips_ack_msg\030\013 \001(\0132\'.cn"
    ".jj.service.msg.protocol.ShowTipsAck\022G\n\023"
    "refusepeace_ack_msg\030\014 \001(\0132*.cn.jj.servic"
    "e.msg.protocol.RefusePeaceAck\022G\n\023repeatc"
    "ount_ack_msg\030\r \001(\0132*.cn.jj.service.msg.p"
    "rotocol.RepeatCountAck\022A\n\020initrule_ack_m"
    "sg\030\016 \001(\0132\'.cn.jj.service.msg.protocol.In"
    "itRuleAck\022E\n\022initlayout_ack_msg\030\017 \001(\0132)."
    "cn.jj.service.msg.protocol.InitLayoutAck"
    "\022\?\n\017timeout_ack_msg\030\020 \001(\0132&.cn.jj.servic"
    "e.msg.protocol.TimeOutAck\0229\n\014feel_ack_ms"
    "g\030\021 \001(\0132#.cn.jj.service.msg.protocol.Fee"
    "lAck\022\?\n\017concede_ack_msg\030\022 \001(\0132&.cn.jj.se"
    "rvice.msg.protocol.ConcedeAck\"\?\n\005Chess\022\013"
    "\n\003pos\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\r\n\005color\030\003 \001(\005"
    "\022\014\n\004seat\030\004 \001(\005\"3\n\010ParaInfo\022\013\n\003one\030\001 \001(\005\022"
    "\013\n\003two\030\002 \001(\005\022\r\n\005three\030\003 \001(\005\"[\n\rInitLayou"
    "tReq\022\014\n\004seat\030\001 \001(\005\022\016\n\006layout\030\002 \001(\t\022\014\n\004ty"
    "pe\030\003 \001(\005\022\017\n\007headimg\030\004 \001(\005\022\r\n\005param\030\005 \001(\005"
    "\"+\n\016SelectChessReq\022\014\n\004seat\030\001 \001(\005\022\013\n\003pos\030"
    "\002 \001(\005\"M\n\014MoveChessReq\022\014\n\004seat\030\001 \001(\005\022\r\n\005a"
    "tpos\030\002 \001(\005\022\r\n\005topos\030\003 \001(\005\022\021\n\tisconfirm\030\004"
    " \001(\005\" \n\020AcotionFinishReq\022\014\n\004seat\030\001 \001(\005\"\032"
    "\n\nConcedeReq\022\014\n\004seat\030\001 \001(\005\"\030\n\010PeaceReq\022\014"
    "\n\004seat\030\001 \002(\005\"*\n\013PeaceResReq\022\014\n\004seat\030\001 \001("
    "\005\022\r\n\005agree\030\002 \001(\005\"\035\n\014ShowChessReq\022\r\n\005atpo"
    "s\030\001 \001(\005\"G\n\013InitRuleReq\022\020\n\010gametype\030\001 \001(\005"
    "\022\022\n\ncleandilei\030\002 \001(\005\022\022\n\ncarryjunqi\030\003 \001(\005"
    "\">\n\007FeelReq\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\014\n"
    "\004feel\030\003 \001(\r\022\013\n\003str\030\004 \001(\t\"\372\002\n\014InitChessAc"
    "k\022\013\n\003pos\030\001 \003(\005\022\r\n\005honor\030\002 \003(\005\022\r\n\005hands\030\003"
    " \003(\005\022\014\n\004wins\030\004 \003(\005\022\016\n\006breaks\030\005 \003(\005\022\r\n\005gr"
    "ade\030\006 \003(\005\022\020\n\010gametype\030\007 \001(\005\022\022\n\ncleandile"
    "i\030\010 \001(\005\022\022\n\ncarryjunqi\030\t \001(\005\022\020\n\010fanhands\030"
    "\n \003(\005\022\017\n\007fanwins\030\013 \003(\005\022\020\n\010fandraws\030\014 \003(\005"
    "\022\022\n\nfandbreaks\030\r \003(\005\022\017\n\007anhands\030\016 \003(\005\022\016\n"
    "\006anwins\030\017 \003(\005\022\017\n\007andraws\030\020 \003(\005\022\021\n\tandbre"
    "aks\030\021 \003(\005\0223\n\005paras\030\022 \001(\0132$.cn.jj.service"
    ".msg.protocol.ParaInfo\022\025\n\rserverversion\030"
    "\023 \001(\t\"T\n\021StartMoveChessAck\022\014\n\004seat\030\001 \001(\005"
    "\022\016\n\006layout\030\002 \001(\t\022\017\n\007headimg\030\003 \003(\005\022\020\n\010ove"
    "rseat\030\004 \003(\r\"A\n\016SelectChessAck\022\014\n\004seat\030\001 "
    "\001(\005\022\013\n\003pos\030\002 \001(\005\022\024\n\010postions\030\003 \003(\005B\002\020\001\"n"
    "\n\014MoveChessAck\022\014\n\004seat\030\001 \001(\005\022\020\n\004path\030\002 \003"
    "(\005B\002\020\001\022\016\n\006result\030\003 \001(\005\022\r\n\005event\030\004 \001(\005\022\014\n"
    "\004step\030\005 \001(\005\022\021\n\tchesstype\030\006 \001(\005\"y\n\017Action"
    "FinishAck\022\020\n\010nextseat\030\001 \001(\005\0220\n\005chess\030\002 \003"
    "(\0132!.cn.jj.service.msg.protocol.Chess\022\020\n"
    "\010movetime\030\003 \001(\005\022\020\n\010overseat\030\004 \003(\005\"\227\001\n\rFi"
    "nishGameAck\022\016\n\006result\030\001 \003(\005\022\016\n\006layout\030\002 "
    "\003(\t\022\r\n\005honor\030\003 \003(\005\022\r\n\005grade\030\004 \003(\005\022\020\n\010url"
    "paras\030\005 \003(\r\022\017\n\007endtype\030\006 \001(\r\022\023\n\013timeoutc"
    "ost\030\007 \003(\r\022\020\n\010usedware\030\010 \003(\r\"\030\n\010PeaceAck\022"
    "\014\n\004seat\030\001 \002(\005\"]\n\014ShowChessAck\0220\n\005chess\030\001"
    " \001(\0132!.cn.jj.service.msg.protocol.Chess\022"
    "\014\n\004step\030\002 \001(\005\022\r\n\005color\030\003 \003(\005\"=\n\013ShowTips"
    "Ack\022\014\n\004seat\030\001 \001(\005\022\014\n\004tips\030\002 \001(\005\022\022\n\nreduc"
    "etime\030\003 \001(\005\">\n\016RefusePeaceAck\022\r\n\005count\030\001"
    " \001(\005\022\017\n\007disseat\030\002 \001(\005\022\014\n\004seat\030\003 \001(\005\"-\n\016R"
    "epeatCountAck\022\014\n\004seat\030\001 \001(\005\022\r\n\005count\030\002 \001"
    "(\005\"\036\n\013InitRuleAck\022\017\n\007reserve\030\001 \001(\005\"$\n\rIn"
    "itLayoutAck\022\023\n\013layoutstate\030\005 \003(\005\"=\n\nTime"
    "OutAck\022\014\n\004seat\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\022\022\n\nr"
    "educetime\030\003 \001(\005\">\n\007FeelAck\022\014\n\004from\030\001 \001(\r"
    "\022\n\n\002to\030\002 \001(\r\022\014\n\004feel\030\003 \001(\r\022\013\n\003str\030\004 \001(\t\""
    "\032\n\nConcedeAck\022\014\n\004seat\030\001 \001(\005", 4227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TKJunQiPK.proto", &protobuf_RegisterTypes);
  TKMobileReqMsg::default_instance_ = new TKMobileReqMsg();
  TKMobileAckMsg::default_instance_ = new TKMobileAckMsg();
  JunQiPKReqMsg::default_instance_ = new JunQiPKReqMsg();
  JunQiPKAckMsg::default_instance_ = new JunQiPKAckMsg();
  Chess::default_instance_ = new Chess();
  ParaInfo::default_instance_ = new ParaInfo();
  InitLayoutReq::default_instance_ = new InitLayoutReq();
  SelectChessReq::default_instance_ = new SelectChessReq();
  MoveChessReq::default_instance_ = new MoveChessReq();
  AcotionFinishReq::default_instance_ = new AcotionFinishReq();
  ConcedeReq::default_instance_ = new ConcedeReq();
  PeaceReq::default_instance_ = new PeaceReq();
  PeaceResReq::default_instance_ = new PeaceResReq();
  ShowChessReq::default_instance_ = new ShowChessReq();
  InitRuleReq::default_instance_ = new InitRuleReq();
  FeelReq::default_instance_ = new FeelReq();
  InitChessAck::default_instance_ = new InitChessAck();
  StartMoveChessAck::default_instance_ = new StartMoveChessAck();
  SelectChessAck::default_instance_ = new SelectChessAck();
  MoveChessAck::default_instance_ = new MoveChessAck();
  ActionFinishAck::default_instance_ = new ActionFinishAck();
  FinishGameAck::default_instance_ = new FinishGameAck();
  PeaceAck::default_instance_ = new PeaceAck();
  ShowChessAck::default_instance_ = new ShowChessAck();
  ShowTipsAck::default_instance_ = new ShowTipsAck();
  RefusePeaceAck::default_instance_ = new RefusePeaceAck();
  RepeatCountAck::default_instance_ = new RepeatCountAck();
  InitRuleAck::default_instance_ = new InitRuleAck();
  InitLayoutAck::default_instance_ = new InitLayoutAck();
  TimeOutAck::default_instance_ = new TimeOutAck();
  FeelAck::default_instance_ = new FeelAck();
  ConcedeAck::default_instance_ = new ConcedeAck();
  TKMobileReqMsg::default_instance_->InitAsDefaultInstance();
  TKMobileAckMsg::default_instance_->InitAsDefaultInstance();
  JunQiPKReqMsg::default_instance_->InitAsDefaultInstance();
  JunQiPKAckMsg::default_instance_->InitAsDefaultInstance();
  Chess::default_instance_->InitAsDefaultInstance();
  ParaInfo::default_instance_->InitAsDefaultInstance();
  InitLayoutReq::default_instance_->InitAsDefaultInstance();
  SelectChessReq::default_instance_->InitAsDefaultInstance();
  MoveChessReq::default_instance_->InitAsDefaultInstance();
  AcotionFinishReq::default_instance_->InitAsDefaultInstance();
  ConcedeReq::default_instance_->InitAsDefaultInstance();
  PeaceReq::default_instance_->InitAsDefaultInstance();
  PeaceResReq::default_instance_->InitAsDefaultInstance();
  ShowChessReq::default_instance_->InitAsDefaultInstance();
  InitRuleReq::default_instance_->InitAsDefaultInstance();
  FeelReq::default_instance_->InitAsDefaultInstance();
  InitChessAck::default_instance_->InitAsDefaultInstance();
  StartMoveChessAck::default_instance_->InitAsDefaultInstance();
  SelectChessAck::default_instance_->InitAsDefaultInstance();
  MoveChessAck::default_instance_->InitAsDefaultInstance();
  ActionFinishAck::default_instance_->InitAsDefaultInstance();
  FinishGameAck::default_instance_->InitAsDefaultInstance();
  PeaceAck::default_instance_->InitAsDefaultInstance();
  ShowChessAck::default_instance_->InitAsDefaultInstance();
  ShowTipsAck::default_instance_->InitAsDefaultInstance();
  RefusePeaceAck::default_instance_->InitAsDefaultInstance();
  RepeatCountAck::default_instance_->InitAsDefaultInstance();
  InitRuleAck::default_instance_->InitAsDefaultInstance();
  InitLayoutAck::default_instance_->InitAsDefaultInstance();
  TimeOutAck::default_instance_->InitAsDefaultInstance();
  FeelAck::default_instance_->InitAsDefaultInstance();
  ConcedeAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TKJunQiPK_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TKJunQiPK_2eproto {
  StaticDescriptorInitializer_TKJunQiPK_2eproto() {
    protobuf_AddDesc_TKJunQiPK_2eproto();
  }
} static_descriptor_initializer_TKJunQiPK_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TKMobileReqMsg::kParamFieldNumber;
const int TKMobileReqMsg::kJunqipkReqMsgFieldNumber;
#endif  // !_MSC_VER

TKMobileReqMsg::TKMobileReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMobileReqMsg::InitAsDefaultInstance() {
  junqipk_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::JunQiPKReqMsg*>(&::cn::jj::service::msg::protocol::JunQiPKReqMsg::default_instance());
}

TKMobileReqMsg::TKMobileReqMsg(const TKMobileReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMobileReqMsg::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0u;
  junqipk_req_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMobileReqMsg::~TKMobileReqMsg() {
  SharedDtor();
}

void TKMobileReqMsg::SharedDtor() {
  if (this != default_instance_) {
    delete junqipk_req_msg_;
  }
}

void TKMobileReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMobileReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMobileReqMsg_descriptor_;
}

const TKMobileReqMsg& TKMobileReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

TKMobileReqMsg* TKMobileReqMsg::default_instance_ = NULL;

TKMobileReqMsg* TKMobileReqMsg::New() const {
  return new TKMobileReqMsg;
}

void TKMobileReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0u;
    if (has_junqipk_req_msg()) {
      if (junqipk_req_msg_ != NULL) junqipk_req_msg_->::cn::jj::service::msg::protocol::JunQiPKReqMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMobileReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_junqipk_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.JunQiPKReqMsg junqipk_req_msg = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_junqipk_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_junqipk_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMobileReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->param(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.JunQiPKReqMsg junqipk_req_msg = 66;
  if (has_junqipk_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->junqipk_req_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMobileReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->param(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.JunQiPKReqMsg junqipk_req_msg = 66;
  if (has_junqipk_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->junqipk_req_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMobileReqMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }
    
    // optional .cn.jj.service.msg.protocol.JunQiPKReqMsg junqipk_req_msg = 66;
    if (has_junqipk_req_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->junqipk_req_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMobileReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMobileReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMobileReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMobileReqMsg::MergeFrom(const TKMobileReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_junqipk_req_msg()) {
      mutable_junqipk_req_msg()->::cn::jj::service::msg::protocol::JunQiPKReqMsg::MergeFrom(from.junqipk_req_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMobileReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMobileReqMsg::CopyFrom(const TKMobileReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMobileReqMsg::IsInitialized() const {
  
  if (has_junqipk_req_msg()) {
    if (!this->junqipk_req_msg().IsInitialized()) return false;
  }
  return true;
}

void TKMobileReqMsg::Swap(TKMobileReqMsg* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(junqipk_req_msg_, other->junqipk_req_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMobileReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMobileReqMsg_descriptor_;
  metadata.reflection = TKMobileReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKMobileAckMsg::kParamFieldNumber;
const int TKMobileAckMsg::kJunqipkAckMsgFieldNumber;
#endif  // !_MSC_VER

TKMobileAckMsg::TKMobileAckMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TKMobileAckMsg::InitAsDefaultInstance() {
  junqipk_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::JunQiPKAckMsg*>(&::cn::jj::service::msg::protocol::JunQiPKAckMsg::default_instance());
}

TKMobileAckMsg::TKMobileAckMsg(const TKMobileAckMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TKMobileAckMsg::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0u;
  junqipk_ack_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKMobileAckMsg::~TKMobileAckMsg() {
  SharedDtor();
}

void TKMobileAckMsg::SharedDtor() {
  if (this != default_instance_) {
    delete junqipk_ack_msg_;
  }
}

void TKMobileAckMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKMobileAckMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKMobileAckMsg_descriptor_;
}

const TKMobileAckMsg& TKMobileAckMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

TKMobileAckMsg* TKMobileAckMsg::default_instance_ = NULL;

TKMobileAckMsg* TKMobileAckMsg::New() const {
  return new TKMobileAckMsg;
}

void TKMobileAckMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0u;
    if (has_junqipk_ack_msg()) {
      if (junqipk_ack_msg_ != NULL) junqipk_ack_msg_->::cn::jj::service::msg::protocol::JunQiPKAckMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKMobileAckMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_junqipk_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.JunQiPKAckMsg junqipk_ack_msg = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_junqipk_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_junqipk_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TKMobileAckMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->param(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.JunQiPKAckMsg junqipk_ack_msg = 66;
  if (has_junqipk_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->junqipk_ack_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TKMobileAckMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->param(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.JunQiPKAckMsg junqipk_ack_msg = 66;
  if (has_junqipk_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->junqipk_ack_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TKMobileAckMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }
    
    // optional .cn.jj.service.msg.protocol.JunQiPKAckMsg junqipk_ack_msg = 66;
    if (has_junqipk_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->junqipk_ack_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKMobileAckMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKMobileAckMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKMobileAckMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKMobileAckMsg::MergeFrom(const TKMobileAckMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_junqipk_ack_msg()) {
      mutable_junqipk_ack_msg()->::cn::jj::service::msg::protocol::JunQiPKAckMsg::MergeFrom(from.junqipk_ack_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKMobileAckMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKMobileAckMsg::CopyFrom(const TKMobileAckMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKMobileAckMsg::IsInitialized() const {
  
  if (has_junqipk_ack_msg()) {
    if (!this->junqipk_ack_msg().IsInitialized()) return false;
  }
  return true;
}

void TKMobileAckMsg::Swap(TKMobileAckMsg* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(junqipk_ack_msg_, other->junqipk_ack_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKMobileAckMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKMobileAckMsg_descriptor_;
  metadata.reflection = TKMobileAckMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JunQiPKReqMsg::kMatchidFieldNumber;
const int JunQiPKReqMsg::kInitlayoutReqMsgFieldNumber;
const int JunQiPKReqMsg::kSelectchessReqMsgFieldNumber;
const int JunQiPKReqMsg::kMovechessReqMsgFieldNumber;
const int JunQiPKReqMsg::kActionfinishReqMsgFieldNumber;
const int JunQiPKReqMsg::kConcedeReqMsgFieldNumber;
const int JunQiPKReqMsg::kPeaceReqMsgFieldNumber;
const int JunQiPKReqMsg::kPeaceresReqMsgFieldNumber;
const int JunQiPKReqMsg::kShowchessReqMsgFieldNumber;
const int JunQiPKReqMsg::kInitruleReqMsgFieldNumber;
const int JunQiPKReqMsg::kCancellayoutReqMsgFieldNumber;
const int JunQiPKReqMsg::kFeelReqMsgFieldNumber;
#endif  // !_MSC_VER

JunQiPKReqMsg::JunQiPKReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JunQiPKReqMsg::InitAsDefaultInstance() {
  initlayout_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::InitLayoutReq*>(&::cn::jj::service::msg::protocol::InitLayoutReq::default_instance());
  selectchess_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::SelectChessReq*>(&::cn::jj::service::msg::protocol::SelectChessReq::default_instance());
  movechess_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::MoveChessReq*>(&::cn::jj::service::msg::protocol::MoveChessReq::default_instance());
  actionfinish_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::AcotionFinishReq*>(&::cn::jj::service::msg::protocol::AcotionFinishReq::default_instance());
  concede_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::ConcedeReq*>(&::cn::jj::service::msg::protocol::ConcedeReq::default_instance());
  peace_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::PeaceReq*>(&::cn::jj::service::msg::protocol::PeaceReq::default_instance());
  peaceres_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::PeaceResReq*>(&::cn::jj::service::msg::protocol::PeaceResReq::default_instance());
  showchess_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::ShowChessReq*>(&::cn::jj::service::msg::protocol::ShowChessReq::default_instance());
  initrule_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::InitRuleReq*>(&::cn::jj::service::msg::protocol::InitRuleReq::default_instance());
  feel_req_msg_ = const_cast< ::cn::jj::service::msg::protocol::FeelReq*>(&::cn::jj::service::msg::protocol::FeelReq::default_instance());
}

JunQiPKReqMsg::JunQiPKReqMsg(const JunQiPKReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JunQiPKReqMsg::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  initlayout_req_msg_ = NULL;
  selectchess_req_msg_ = NULL;
  movechess_req_msg_ = NULL;
  actionfinish_req_msg_ = NULL;
  concede_req_msg_ = NULL;
  peace_req_msg_ = NULL;
  peaceres_req_msg_ = NULL;
  showchess_req_msg_ = NULL;
  initrule_req_msg_ = NULL;
  cancellayout_req_msg_ = 0u;
  feel_req_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunQiPKReqMsg::~JunQiPKReqMsg() {
  SharedDtor();
}

void JunQiPKReqMsg::SharedDtor() {
  if (this != default_instance_) {
    delete initlayout_req_msg_;
    delete selectchess_req_msg_;
    delete movechess_req_msg_;
    delete actionfinish_req_msg_;
    delete concede_req_msg_;
    delete peace_req_msg_;
    delete peaceres_req_msg_;
    delete showchess_req_msg_;
    delete initrule_req_msg_;
    delete feel_req_msg_;
  }
}

void JunQiPKReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JunQiPKReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JunQiPKReqMsg_descriptor_;
}

const JunQiPKReqMsg& JunQiPKReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

JunQiPKReqMsg* JunQiPKReqMsg::default_instance_ = NULL;

JunQiPKReqMsg* JunQiPKReqMsg::New() const {
  return new JunQiPKReqMsg;
}

void JunQiPKReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    if (has_initlayout_req_msg()) {
      if (initlayout_req_msg_ != NULL) initlayout_req_msg_->::cn::jj::service::msg::protocol::InitLayoutReq::Clear();
    }
    if (has_selectchess_req_msg()) {
      if (selectchess_req_msg_ != NULL) selectchess_req_msg_->::cn::jj::service::msg::protocol::SelectChessReq::Clear();
    }
    if (has_movechess_req_msg()) {
      if (movechess_req_msg_ != NULL) movechess_req_msg_->::cn::jj::service::msg::protocol::MoveChessReq::Clear();
    }
    if (has_actionfinish_req_msg()) {
      if (actionfinish_req_msg_ != NULL) actionfinish_req_msg_->::cn::jj::service::msg::protocol::AcotionFinishReq::Clear();
    }
    if (has_concede_req_msg()) {
      if (concede_req_msg_ != NULL) concede_req_msg_->::cn::jj::service::msg::protocol::ConcedeReq::Clear();
    }
    if (has_peace_req_msg()) {
      if (peace_req_msg_ != NULL) peace_req_msg_->::cn::jj::service::msg::protocol::PeaceReq::Clear();
    }
    if (has_peaceres_req_msg()) {
      if (peaceres_req_msg_ != NULL) peaceres_req_msg_->::cn::jj::service::msg::protocol::PeaceResReq::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_showchess_req_msg()) {
      if (showchess_req_msg_ != NULL) showchess_req_msg_->::cn::jj::service::msg::protocol::ShowChessReq::Clear();
    }
    if (has_initrule_req_msg()) {
      if (initrule_req_msg_ != NULL) initrule_req_msg_->::cn::jj::service::msg::protocol::InitRuleReq::Clear();
    }
    cancellayout_req_msg_ = 0u;
    if (has_feel_req_msg()) {
      if (feel_req_msg_ != NULL) feel_req_msg_->::cn::jj::service::msg::protocol::FeelReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JunQiPKReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_initlayout_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.InitLayoutReq initlayout_req_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initlayout_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initlayout_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selectchess_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.SelectChessReq selectchess_req_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectchess_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selectchess_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_movechess_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.MoveChessReq movechess_req_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movechess_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movechess_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_actionfinish_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.AcotionFinishReq actionfinish_req_msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionfinish_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionfinish_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_concede_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.ConcedeReq concede_req_msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_concede_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concede_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_peace_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.PeaceReq peace_req_msg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peace_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peace_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_peaceres_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.PeaceResReq peaceres_req_msg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peaceres_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peaceres_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_showchess_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.ShowChessReq showchess_req_msg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showchess_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showchess_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_initrule_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.InitRuleReq initrule_req_msg = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initrule_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initrule_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cancellayout_req_msg;
        break;
      }
      
      // optional uint32 cancellayout_req_msg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancellayout_req_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cancellayout_req_msg_)));
          set_has_cancellayout_req_msg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_feel_req_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.FeelReq feel_req_msg = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feel_req_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feel_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JunQiPKReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.InitLayoutReq initlayout_req_msg = 2;
  if (has_initlayout_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->initlayout_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.SelectChessReq selectchess_req_msg = 3;
  if (has_selectchess_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selectchess_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.MoveChessReq movechess_req_msg = 4;
  if (has_movechess_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->movechess_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.AcotionFinishReq actionfinish_req_msg = 5;
  if (has_actionfinish_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->actionfinish_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.ConcedeReq concede_req_msg = 6;
  if (has_concede_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->concede_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.PeaceReq peace_req_msg = 7;
  if (has_peace_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->peace_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.PeaceResReq peaceres_req_msg = 8;
  if (has_peaceres_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->peaceres_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.ShowChessReq showchess_req_msg = 9;
  if (has_showchess_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->showchess_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.InitRuleReq initrule_req_msg = 10;
  if (has_initrule_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->initrule_req_msg(), output);
  }
  
  // optional uint32 cancellayout_req_msg = 11;
  if (has_cancellayout_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cancellayout_req_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.FeelReq feel_req_msg = 12;
  if (has_feel_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->feel_req_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JunQiPKReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.InitLayoutReq initlayout_req_msg = 2;
  if (has_initlayout_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->initlayout_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.SelectChessReq selectchess_req_msg = 3;
  if (has_selectchess_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selectchess_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.MoveChessReq movechess_req_msg = 4;
  if (has_movechess_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->movechess_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.AcotionFinishReq actionfinish_req_msg = 5;
  if (has_actionfinish_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->actionfinish_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.ConcedeReq concede_req_msg = 6;
  if (has_concede_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->concede_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.PeaceReq peace_req_msg = 7;
  if (has_peace_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->peace_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.PeaceResReq peaceres_req_msg = 8;
  if (has_peaceres_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->peaceres_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.ShowChessReq showchess_req_msg = 9;
  if (has_showchess_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->showchess_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.InitRuleReq initrule_req_msg = 10;
  if (has_initrule_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->initrule_req_msg(), target);
  }
  
  // optional uint32 cancellayout_req_msg = 11;
  if (has_cancellayout_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cancellayout_req_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.FeelReq feel_req_msg = 12;
  if (has_feel_req_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->feel_req_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JunQiPKReqMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }
    
    // optional .cn.jj.service.msg.protocol.InitLayoutReq initlayout_req_msg = 2;
    if (has_initlayout_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initlayout_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.SelectChessReq selectchess_req_msg = 3;
    if (has_selectchess_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selectchess_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.MoveChessReq movechess_req_msg = 4;
    if (has_movechess_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movechess_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.AcotionFinishReq actionfinish_req_msg = 5;
    if (has_actionfinish_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionfinish_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.ConcedeReq concede_req_msg = 6;
    if (has_concede_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concede_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.PeaceReq peace_req_msg = 7;
    if (has_peace_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peace_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.PeaceResReq peaceres_req_msg = 8;
    if (has_peaceres_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peaceres_req_msg());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cn.jj.service.msg.protocol.ShowChessReq showchess_req_msg = 9;
    if (has_showchess_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showchess_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.InitRuleReq initrule_req_msg = 10;
    if (has_initrule_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initrule_req_msg());
    }
    
    // optional uint32 cancellayout_req_msg = 11;
    if (has_cancellayout_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cancellayout_req_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.FeelReq feel_req_msg = 12;
    if (has_feel_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feel_req_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunQiPKReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JunQiPKReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JunQiPKReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JunQiPKReqMsg::MergeFrom(const JunQiPKReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_initlayout_req_msg()) {
      mutable_initlayout_req_msg()->::cn::jj::service::msg::protocol::InitLayoutReq::MergeFrom(from.initlayout_req_msg());
    }
    if (from.has_selectchess_req_msg()) {
      mutable_selectchess_req_msg()->::cn::jj::service::msg::protocol::SelectChessReq::MergeFrom(from.selectchess_req_msg());
    }
    if (from.has_movechess_req_msg()) {
      mutable_movechess_req_msg()->::cn::jj::service::msg::protocol::MoveChessReq::MergeFrom(from.movechess_req_msg());
    }
    if (from.has_actionfinish_req_msg()) {
      mutable_actionfinish_req_msg()->::cn::jj::service::msg::protocol::AcotionFinishReq::MergeFrom(from.actionfinish_req_msg());
    }
    if (from.has_concede_req_msg()) {
      mutable_concede_req_msg()->::cn::jj::service::msg::protocol::ConcedeReq::MergeFrom(from.concede_req_msg());
    }
    if (from.has_peace_req_msg()) {
      mutable_peace_req_msg()->::cn::jj::service::msg::protocol::PeaceReq::MergeFrom(from.peace_req_msg());
    }
    if (from.has_peaceres_req_msg()) {
      mutable_peaceres_req_msg()->::cn::jj::service::msg::protocol::PeaceResReq::MergeFrom(from.peaceres_req_msg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showchess_req_msg()) {
      mutable_showchess_req_msg()->::cn::jj::service::msg::protocol::ShowChessReq::MergeFrom(from.showchess_req_msg());
    }
    if (from.has_initrule_req_msg()) {
      mutable_initrule_req_msg()->::cn::jj::service::msg::protocol::InitRuleReq::MergeFrom(from.initrule_req_msg());
    }
    if (from.has_cancellayout_req_msg()) {
      set_cancellayout_req_msg(from.cancellayout_req_msg());
    }
    if (from.has_feel_req_msg()) {
      mutable_feel_req_msg()->::cn::jj::service::msg::protocol::FeelReq::MergeFrom(from.feel_req_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JunQiPKReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunQiPKReqMsg::CopyFrom(const JunQiPKReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunQiPKReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_peace_req_msg()) {
    if (!this->peace_req_msg().IsInitialized()) return false;
  }
  return true;
}

void JunQiPKReqMsg::Swap(JunQiPKReqMsg* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(initlayout_req_msg_, other->initlayout_req_msg_);
    std::swap(selectchess_req_msg_, other->selectchess_req_msg_);
    std::swap(movechess_req_msg_, other->movechess_req_msg_);
    std::swap(actionfinish_req_msg_, other->actionfinish_req_msg_);
    std::swap(concede_req_msg_, other->concede_req_msg_);
    std::swap(peace_req_msg_, other->peace_req_msg_);
    std::swap(peaceres_req_msg_, other->peaceres_req_msg_);
    std::swap(showchess_req_msg_, other->showchess_req_msg_);
    std::swap(initrule_req_msg_, other->initrule_req_msg_);
    std::swap(cancellayout_req_msg_, other->cancellayout_req_msg_);
    std::swap(feel_req_msg_, other->feel_req_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JunQiPKReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JunQiPKReqMsg_descriptor_;
  metadata.reflection = JunQiPKReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JunQiPKAckMsg::kMatchidFieldNumber;
const int JunQiPKAckMsg::kSevertimeFieldNumber;
const int JunQiPKAckMsg::kInitchessAckMsgFieldNumber;
const int JunQiPKAckMsg::kStartmovechessAckMsgFieldNumber;
const int JunQiPKAckMsg::kSelectchessAckMsgFieldNumber;
const int JunQiPKAckMsg::kMovechessAckMsgFieldNumber;
const int JunQiPKAckMsg::kActionfinishAckMsgFieldNumber;
const int JunQiPKAckMsg::kFinishgameAckMsgFieldNumber;
const int JunQiPKAckMsg::kPeaceAckMsgFieldNumber;
const int JunQiPKAckMsg::kShowchessAckMsgFieldNumber;
const int JunQiPKAckMsg::kShowtipsAckMsgFieldNumber;
const int JunQiPKAckMsg::kRefusepeaceAckMsgFieldNumber;
const int JunQiPKAckMsg::kRepeatcountAckMsgFieldNumber;
const int JunQiPKAckMsg::kInitruleAckMsgFieldNumber;
const int JunQiPKAckMsg::kInitlayoutAckMsgFieldNumber;
const int JunQiPKAckMsg::kTimeoutAckMsgFieldNumber;
const int JunQiPKAckMsg::kFeelAckMsgFieldNumber;
const int JunQiPKAckMsg::kConcedeAckMsgFieldNumber;
#endif  // !_MSC_VER

JunQiPKAckMsg::JunQiPKAckMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JunQiPKAckMsg::InitAsDefaultInstance() {
  initchess_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::InitChessAck*>(&::cn::jj::service::msg::protocol::InitChessAck::default_instance());
  startmovechess_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::StartMoveChessAck*>(&::cn::jj::service::msg::protocol::StartMoveChessAck::default_instance());
  selectchess_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::SelectChessAck*>(&::cn::jj::service::msg::protocol::SelectChessAck::default_instance());
  movechess_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::MoveChessAck*>(&::cn::jj::service::msg::protocol::MoveChessAck::default_instance());
  actionfinish_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::ActionFinishAck*>(&::cn::jj::service::msg::protocol::ActionFinishAck::default_instance());
  finishgame_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::FinishGameAck*>(&::cn::jj::service::msg::protocol::FinishGameAck::default_instance());
  peace_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::PeaceAck*>(&::cn::jj::service::msg::protocol::PeaceAck::default_instance());
  showchess_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::ShowChessAck*>(&::cn::jj::service::msg::protocol::ShowChessAck::default_instance());
  showtips_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::ShowTipsAck*>(&::cn::jj::service::msg::protocol::ShowTipsAck::default_instance());
  refusepeace_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::RefusePeaceAck*>(&::cn::jj::service::msg::protocol::RefusePeaceAck::default_instance());
  repeatcount_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::RepeatCountAck*>(&::cn::jj::service::msg::protocol::RepeatCountAck::default_instance());
  initrule_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::InitRuleAck*>(&::cn::jj::service::msg::protocol::InitRuleAck::default_instance());
  initlayout_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::InitLayoutAck*>(&::cn::jj::service::msg::protocol::InitLayoutAck::default_instance());
  timeout_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::TimeOutAck*>(&::cn::jj::service::msg::protocol::TimeOutAck::default_instance());
  feel_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::FeelAck*>(&::cn::jj::service::msg::protocol::FeelAck::default_instance());
  concede_ack_msg_ = const_cast< ::cn::jj::service::msg::protocol::ConcedeAck*>(&::cn::jj::service::msg::protocol::ConcedeAck::default_instance());
}

JunQiPKAckMsg::JunQiPKAckMsg(const JunQiPKAckMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JunQiPKAckMsg::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  severtime_ = 0u;
  initchess_ack_msg_ = NULL;
  startmovechess_ack_msg_ = NULL;
  selectchess_ack_msg_ = NULL;
  movechess_ack_msg_ = NULL;
  actionfinish_ack_msg_ = NULL;
  finishgame_ack_msg_ = NULL;
  peace_ack_msg_ = NULL;
  showchess_ack_msg_ = NULL;
  showtips_ack_msg_ = NULL;
  refusepeace_ack_msg_ = NULL;
  repeatcount_ack_msg_ = NULL;
  initrule_ack_msg_ = NULL;
  initlayout_ack_msg_ = NULL;
  timeout_ack_msg_ = NULL;
  feel_ack_msg_ = NULL;
  concede_ack_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunQiPKAckMsg::~JunQiPKAckMsg() {
  SharedDtor();
}

void JunQiPKAckMsg::SharedDtor() {
  if (this != default_instance_) {
    delete initchess_ack_msg_;
    delete startmovechess_ack_msg_;
    delete selectchess_ack_msg_;
    delete movechess_ack_msg_;
    delete actionfinish_ack_msg_;
    delete finishgame_ack_msg_;
    delete peace_ack_msg_;
    delete showchess_ack_msg_;
    delete showtips_ack_msg_;
    delete refusepeace_ack_msg_;
    delete repeatcount_ack_msg_;
    delete initrule_ack_msg_;
    delete initlayout_ack_msg_;
    delete timeout_ack_msg_;
    delete feel_ack_msg_;
    delete concede_ack_msg_;
  }
}

void JunQiPKAckMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JunQiPKAckMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JunQiPKAckMsg_descriptor_;
}

const JunQiPKAckMsg& JunQiPKAckMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

JunQiPKAckMsg* JunQiPKAckMsg::default_instance_ = NULL;

JunQiPKAckMsg* JunQiPKAckMsg::New() const {
  return new JunQiPKAckMsg;
}

void JunQiPKAckMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    severtime_ = 0u;
    if (has_initchess_ack_msg()) {
      if (initchess_ack_msg_ != NULL) initchess_ack_msg_->::cn::jj::service::msg::protocol::InitChessAck::Clear();
    }
    if (has_startmovechess_ack_msg()) {
      if (startmovechess_ack_msg_ != NULL) startmovechess_ack_msg_->::cn::jj::service::msg::protocol::StartMoveChessAck::Clear();
    }
    if (has_selectchess_ack_msg()) {
      if (selectchess_ack_msg_ != NULL) selectchess_ack_msg_->::cn::jj::service::msg::protocol::SelectChessAck::Clear();
    }
    if (has_movechess_ack_msg()) {
      if (movechess_ack_msg_ != NULL) movechess_ack_msg_->::cn::jj::service::msg::protocol::MoveChessAck::Clear();
    }
    if (has_actionfinish_ack_msg()) {
      if (actionfinish_ack_msg_ != NULL) actionfinish_ack_msg_->::cn::jj::service::msg::protocol::ActionFinishAck::Clear();
    }
    if (has_finishgame_ack_msg()) {
      if (finishgame_ack_msg_ != NULL) finishgame_ack_msg_->::cn::jj::service::msg::protocol::FinishGameAck::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_peace_ack_msg()) {
      if (peace_ack_msg_ != NULL) peace_ack_msg_->::cn::jj::service::msg::protocol::PeaceAck::Clear();
    }
    if (has_showchess_ack_msg()) {
      if (showchess_ack_msg_ != NULL) showchess_ack_msg_->::cn::jj::service::msg::protocol::ShowChessAck::Clear();
    }
    if (has_showtips_ack_msg()) {
      if (showtips_ack_msg_ != NULL) showtips_ack_msg_->::cn::jj::service::msg::protocol::ShowTipsAck::Clear();
    }
    if (has_refusepeace_ack_msg()) {
      if (refusepeace_ack_msg_ != NULL) refusepeace_ack_msg_->::cn::jj::service::msg::protocol::RefusePeaceAck::Clear();
    }
    if (has_repeatcount_ack_msg()) {
      if (repeatcount_ack_msg_ != NULL) repeatcount_ack_msg_->::cn::jj::service::msg::protocol::RepeatCountAck::Clear();
    }
    if (has_initrule_ack_msg()) {
      if (initrule_ack_msg_ != NULL) initrule_ack_msg_->::cn::jj::service::msg::protocol::InitRuleAck::Clear();
    }
    if (has_initlayout_ack_msg()) {
      if (initlayout_ack_msg_ != NULL) initlayout_ack_msg_->::cn::jj::service::msg::protocol::InitLayoutAck::Clear();
    }
    if (has_timeout_ack_msg()) {
      if (timeout_ack_msg_ != NULL) timeout_ack_msg_->::cn::jj::service::msg::protocol::TimeOutAck::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_feel_ack_msg()) {
      if (feel_ack_msg_ != NULL) feel_ack_msg_->::cn::jj::service::msg::protocol::FeelAck::Clear();
    }
    if (has_concede_ack_msg()) {
      if (concede_ack_msg_ != NULL) concede_ack_msg_->::cn::jj::service::msg::protocol::ConcedeAck::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JunQiPKAckMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_severtime;
        break;
      }
      
      // required uint32 severtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severtime_)));
          set_has_severtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_initchess_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.InitChessAck initchess_ack_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initchess_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initchess_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_startmovechess_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.StartMoveChessAck startmovechess_ack_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startmovechess_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startmovechess_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selectchess_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.SelectChessAck selectchess_ack_msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectchess_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selectchess_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_movechess_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.MoveChessAck movechess_ack_msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movechess_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movechess_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_actionfinish_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.ActionFinishAck actionfinish_ack_msg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionfinish_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionfinish_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_finishgame_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.FinishGameAck finishgame_ack_msg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finishgame_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finishgame_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_peace_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.PeaceAck peace_ack_msg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peace_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peace_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_showchess_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.ShowChessAck showchess_ack_msg = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showchess_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showchess_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_showtips_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.ShowTipsAck showtips_ack_msg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showtips_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showtips_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_refusepeace_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.RefusePeaceAck refusepeace_ack_msg = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refusepeace_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refusepeace_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_repeatcount_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.RepeatCountAck repeatcount_ack_msg = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeatcount_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repeatcount_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_initrule_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.InitRuleAck initrule_ack_msg = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initrule_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initrule_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_initlayout_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.InitLayoutAck initlayout_ack_msg = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initlayout_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initlayout_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_timeout_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.TimeOutAck timeout_ack_msg = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeout_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeout_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_feel_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.FeelAck feel_ack_msg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feel_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feel_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_concede_ack_msg;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.ConcedeAck concede_ack_msg = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_concede_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concede_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JunQiPKAckMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }
  
  // required uint32 severtime = 2;
  if (has_severtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->severtime(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.InitChessAck initchess_ack_msg = 3;
  if (has_initchess_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->initchess_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.StartMoveChessAck startmovechess_ack_msg = 4;
  if (has_startmovechess_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->startmovechess_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.SelectChessAck selectchess_ack_msg = 5;
  if (has_selectchess_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->selectchess_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.MoveChessAck movechess_ack_msg = 6;
  if (has_movechess_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->movechess_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.ActionFinishAck actionfinish_ack_msg = 7;
  if (has_actionfinish_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->actionfinish_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.FinishGameAck finishgame_ack_msg = 8;
  if (has_finishgame_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->finishgame_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.PeaceAck peace_ack_msg = 9;
  if (has_peace_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->peace_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.ShowChessAck showchess_ack_msg = 10;
  if (has_showchess_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->showchess_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.ShowTipsAck showtips_ack_msg = 11;
  if (has_showtips_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->showtips_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.RefusePeaceAck refusepeace_ack_msg = 12;
  if (has_refusepeace_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->refusepeace_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.RepeatCountAck repeatcount_ack_msg = 13;
  if (has_repeatcount_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->repeatcount_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.InitRuleAck initrule_ack_msg = 14;
  if (has_initrule_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->initrule_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.InitLayoutAck initlayout_ack_msg = 15;
  if (has_initlayout_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->initlayout_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.TimeOutAck timeout_ack_msg = 16;
  if (has_timeout_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->timeout_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.FeelAck feel_ack_msg = 17;
  if (has_feel_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->feel_ack_msg(), output);
  }
  
  // optional .cn.jj.service.msg.protocol.ConcedeAck concede_ack_msg = 18;
  if (has_concede_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->concede_ack_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JunQiPKAckMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }
  
  // required uint32 severtime = 2;
  if (has_severtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->severtime(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.InitChessAck initchess_ack_msg = 3;
  if (has_initchess_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->initchess_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.StartMoveChessAck startmovechess_ack_msg = 4;
  if (has_startmovechess_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->startmovechess_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.SelectChessAck selectchess_ack_msg = 5;
  if (has_selectchess_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->selectchess_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.MoveChessAck movechess_ack_msg = 6;
  if (has_movechess_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->movechess_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.ActionFinishAck actionfinish_ack_msg = 7;
  if (has_actionfinish_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->actionfinish_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.FinishGameAck finishgame_ack_msg = 8;
  if (has_finishgame_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->finishgame_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.PeaceAck peace_ack_msg = 9;
  if (has_peace_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->peace_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.ShowChessAck showchess_ack_msg = 10;
  if (has_showchess_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->showchess_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.ShowTipsAck showtips_ack_msg = 11;
  if (has_showtips_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->showtips_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.RefusePeaceAck refusepeace_ack_msg = 12;
  if (has_refusepeace_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->refusepeace_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.RepeatCountAck repeatcount_ack_msg = 13;
  if (has_repeatcount_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->repeatcount_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.InitRuleAck initrule_ack_msg = 14;
  if (has_initrule_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->initrule_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.InitLayoutAck initlayout_ack_msg = 15;
  if (has_initlayout_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->initlayout_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.TimeOutAck timeout_ack_msg = 16;
  if (has_timeout_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->timeout_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.FeelAck feel_ack_msg = 17;
  if (has_feel_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->feel_ack_msg(), target);
  }
  
  // optional .cn.jj.service.msg.protocol.ConcedeAck concede_ack_msg = 18;
  if (has_concede_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->concede_ack_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JunQiPKAckMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }
    
    // required uint32 severtime = 2;
    if (has_severtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severtime());
    }
    
    // optional .cn.jj.service.msg.protocol.InitChessAck initchess_ack_msg = 3;
    if (has_initchess_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initchess_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.StartMoveChessAck startmovechess_ack_msg = 4;
    if (has_startmovechess_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startmovechess_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.SelectChessAck selectchess_ack_msg = 5;
    if (has_selectchess_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selectchess_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.MoveChessAck movechess_ack_msg = 6;
    if (has_movechess_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movechess_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.ActionFinishAck actionfinish_ack_msg = 7;
    if (has_actionfinish_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionfinish_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.FinishGameAck finishgame_ack_msg = 8;
    if (has_finishgame_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finishgame_ack_msg());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cn.jj.service.msg.protocol.PeaceAck peace_ack_msg = 9;
    if (has_peace_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peace_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.ShowChessAck showchess_ack_msg = 10;
    if (has_showchess_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showchess_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.ShowTipsAck showtips_ack_msg = 11;
    if (has_showtips_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showtips_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.RefusePeaceAck refusepeace_ack_msg = 12;
    if (has_refusepeace_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refusepeace_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.RepeatCountAck repeatcount_ack_msg = 13;
    if (has_repeatcount_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->repeatcount_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.InitRuleAck initrule_ack_msg = 14;
    if (has_initrule_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initrule_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.InitLayoutAck initlayout_ack_msg = 15;
    if (has_initlayout_ack_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initlayout_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.TimeOutAck timeout_ack_msg = 16;
    if (has_timeout_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timeout_ack_msg());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .cn.jj.service.msg.protocol.FeelAck feel_ack_msg = 17;
    if (has_feel_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feel_ack_msg());
    }
    
    // optional .cn.jj.service.msg.protocol.ConcedeAck concede_ack_msg = 18;
    if (has_concede_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concede_ack_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunQiPKAckMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JunQiPKAckMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JunQiPKAckMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JunQiPKAckMsg::MergeFrom(const JunQiPKAckMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_severtime()) {
      set_severtime(from.severtime());
    }
    if (from.has_initchess_ack_msg()) {
      mutable_initchess_ack_msg()->::cn::jj::service::msg::protocol::InitChessAck::MergeFrom(from.initchess_ack_msg());
    }
    if (from.has_startmovechess_ack_msg()) {
      mutable_startmovechess_ack_msg()->::cn::jj::service::msg::protocol::StartMoveChessAck::MergeFrom(from.startmovechess_ack_msg());
    }
    if (from.has_selectchess_ack_msg()) {
      mutable_selectchess_ack_msg()->::cn::jj::service::msg::protocol::SelectChessAck::MergeFrom(from.selectchess_ack_msg());
    }
    if (from.has_movechess_ack_msg()) {
      mutable_movechess_ack_msg()->::cn::jj::service::msg::protocol::MoveChessAck::MergeFrom(from.movechess_ack_msg());
    }
    if (from.has_actionfinish_ack_msg()) {
      mutable_actionfinish_ack_msg()->::cn::jj::service::msg::protocol::ActionFinishAck::MergeFrom(from.actionfinish_ack_msg());
    }
    if (from.has_finishgame_ack_msg()) {
      mutable_finishgame_ack_msg()->::cn::jj::service::msg::protocol::FinishGameAck::MergeFrom(from.finishgame_ack_msg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_peace_ack_msg()) {
      mutable_peace_ack_msg()->::cn::jj::service::msg::protocol::PeaceAck::MergeFrom(from.peace_ack_msg());
    }
    if (from.has_showchess_ack_msg()) {
      mutable_showchess_ack_msg()->::cn::jj::service::msg::protocol::ShowChessAck::MergeFrom(from.showchess_ack_msg());
    }
    if (from.has_showtips_ack_msg()) {
      mutable_showtips_ack_msg()->::cn::jj::service::msg::protocol::ShowTipsAck::MergeFrom(from.showtips_ack_msg());
    }
    if (from.has_refusepeace_ack_msg()) {
      mutable_refusepeace_ack_msg()->::cn::jj::service::msg::protocol::RefusePeaceAck::MergeFrom(from.refusepeace_ack_msg());
    }
    if (from.has_repeatcount_ack_msg()) {
      mutable_repeatcount_ack_msg()->::cn::jj::service::msg::protocol::RepeatCountAck::MergeFrom(from.repeatcount_ack_msg());
    }
    if (from.has_initrule_ack_msg()) {
      mutable_initrule_ack_msg()->::cn::jj::service::msg::protocol::InitRuleAck::MergeFrom(from.initrule_ack_msg());
    }
    if (from.has_initlayout_ack_msg()) {
      mutable_initlayout_ack_msg()->::cn::jj::service::msg::protocol::InitLayoutAck::MergeFrom(from.initlayout_ack_msg());
    }
    if (from.has_timeout_ack_msg()) {
      mutable_timeout_ack_msg()->::cn::jj::service::msg::protocol::TimeOutAck::MergeFrom(from.timeout_ack_msg());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_feel_ack_msg()) {
      mutable_feel_ack_msg()->::cn::jj::service::msg::protocol::FeelAck::MergeFrom(from.feel_ack_msg());
    }
    if (from.has_concede_ack_msg()) {
      mutable_concede_ack_msg()->::cn::jj::service::msg::protocol::ConcedeAck::MergeFrom(from.concede_ack_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JunQiPKAckMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunQiPKAckMsg::CopyFrom(const JunQiPKAckMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunQiPKAckMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_peace_ack_msg()) {
    if (!this->peace_ack_msg().IsInitialized()) return false;
  }
  return true;
}

void JunQiPKAckMsg::Swap(JunQiPKAckMsg* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(severtime_, other->severtime_);
    std::swap(initchess_ack_msg_, other->initchess_ack_msg_);
    std::swap(startmovechess_ack_msg_, other->startmovechess_ack_msg_);
    std::swap(selectchess_ack_msg_, other->selectchess_ack_msg_);
    std::swap(movechess_ack_msg_, other->movechess_ack_msg_);
    std::swap(actionfinish_ack_msg_, other->actionfinish_ack_msg_);
    std::swap(finishgame_ack_msg_, other->finishgame_ack_msg_);
    std::swap(peace_ack_msg_, other->peace_ack_msg_);
    std::swap(showchess_ack_msg_, other->showchess_ack_msg_);
    std::swap(showtips_ack_msg_, other->showtips_ack_msg_);
    std::swap(refusepeace_ack_msg_, other->refusepeace_ack_msg_);
    std::swap(repeatcount_ack_msg_, other->repeatcount_ack_msg_);
    std::swap(initrule_ack_msg_, other->initrule_ack_msg_);
    std::swap(initlayout_ack_msg_, other->initlayout_ack_msg_);
    std::swap(timeout_ack_msg_, other->timeout_ack_msg_);
    std::swap(feel_ack_msg_, other->feel_ack_msg_);
    std::swap(concede_ack_msg_, other->concede_ack_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JunQiPKAckMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JunQiPKAckMsg_descriptor_;
  metadata.reflection = JunQiPKAckMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chess::kPosFieldNumber;
const int Chess::kTypeFieldNumber;
const int Chess::kColorFieldNumber;
const int Chess::kSeatFieldNumber;
#endif  // !_MSC_VER

Chess::Chess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chess::InitAsDefaultInstance() {
}

Chess::Chess(const Chess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chess::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  type_ = 0;
  color_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chess::~Chess() {
  SharedDtor();
}

void Chess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Chess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chess_descriptor_;
}

const Chess& Chess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

Chess* Chess::default_instance_ = NULL;

Chess* Chess::New() const {
  return new Chess;
}

void Chess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    type_ = 0;
    color_ = 0;
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }
      
      // optional int32 color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seat;
        break;
      }
      
      // optional int32 seat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->color(), output);
  }
  
  // optional int32 seat = 4;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->color(), target);
  }
  
  // optional int32 seat = 4;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 seat = 4;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chess::MergeFrom(const Chess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chess::CopyFrom(const Chess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chess::IsInitialized() const {
  
  return true;
}

void Chess::Swap(Chess* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(type_, other->type_);
    std::swap(color_, other->color_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chess_descriptor_;
  metadata.reflection = Chess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParaInfo::kOneFieldNumber;
const int ParaInfo::kTwoFieldNumber;
const int ParaInfo::kThreeFieldNumber;
#endif  // !_MSC_VER

ParaInfo::ParaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParaInfo::InitAsDefaultInstance() {
}

ParaInfo::ParaInfo(const ParaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParaInfo::SharedCtor() {
  _cached_size_ = 0;
  one_ = 0;
  two_ = 0;
  three_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParaInfo::~ParaInfo() {
  SharedDtor();
}

void ParaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParaInfo_descriptor_;
}

const ParaInfo& ParaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

ParaInfo* ParaInfo::default_instance_ = NULL;

ParaInfo* ParaInfo::New() const {
  return new ParaInfo;
}

void ParaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    one_ = 0;
    two_ = 0;
    three_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 one = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &one_)));
          set_has_one();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_two;
        break;
      }
      
      // optional int32 two = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_two:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &two_)));
          set_has_two();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_three;
        break;
      }
      
      // optional int32 three = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_)));
          set_has_three();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 one = 1;
  if (has_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->one(), output);
  }
  
  // optional int32 two = 2;
  if (has_two()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->two(), output);
  }
  
  // optional int32 three = 3;
  if (has_three()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->three(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 one = 1;
  if (has_one()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->one(), target);
  }
  
  // optional int32 two = 2;
  if (has_two()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->two(), target);
  }
  
  // optional int32 three = 3;
  if (has_three()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->three(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParaInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 one = 1;
    if (has_one()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->one());
    }
    
    // optional int32 two = 2;
    if (has_two()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->two());
    }
    
    // optional int32 three = 3;
    if (has_three()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParaInfo::MergeFrom(const ParaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_one()) {
      set_one(from.one());
    }
    if (from.has_two()) {
      set_two(from.two());
    }
    if (from.has_three()) {
      set_three(from.three());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaInfo::CopyFrom(const ParaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaInfo::IsInitialized() const {
  
  return true;
}

void ParaInfo::Swap(ParaInfo* other) {
  if (other != this) {
    std::swap(one_, other->one_);
    std::swap(two_, other->two_);
    std::swap(three_, other->three_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParaInfo_descriptor_;
  metadata.reflection = ParaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitLayoutReq::kSeatFieldNumber;
const int InitLayoutReq::kLayoutFieldNumber;
const int InitLayoutReq::kTypeFieldNumber;
const int InitLayoutReq::kHeadimgFieldNumber;
const int InitLayoutReq::kParamFieldNumber;
#endif  // !_MSC_VER

InitLayoutReq::InitLayoutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitLayoutReq::InitAsDefaultInstance() {
}

InitLayoutReq::InitLayoutReq(const InitLayoutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitLayoutReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  layout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  headimg_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitLayoutReq::~InitLayoutReq() {
  SharedDtor();
}

void InitLayoutReq::SharedDtor() {
  if (layout_ != &::google::protobuf::internal::kEmptyString) {
    delete layout_;
  }
  if (this != default_instance_) {
  }
}

void InitLayoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitLayoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitLayoutReq_descriptor_;
}

const InitLayoutReq& InitLayoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

InitLayoutReq* InitLayoutReq::default_instance_ = NULL;

InitLayoutReq* InitLayoutReq::New() const {
  return new InitLayoutReq;
}

void InitLayoutReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    if (has_layout()) {
      if (layout_ != &::google::protobuf::internal::kEmptyString) {
        layout_->clear();
      }
    }
    type_ = 0;
    headimg_ = 0;
    param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitLayoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layout;
        break;
      }
      
      // optional string layout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layout().data(), this->layout().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headimg;
        break;
      }
      
      // optional int32 headimg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headimg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headimg_)));
          set_has_headimg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }
      
      // optional int32 param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitLayoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional string layout = 2;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layout().data(), this->layout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->layout(), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional int32 headimg = 4;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headimg(), output);
  }
  
  // optional int32 param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitLayoutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional string layout = 2;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layout().data(), this->layout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layout(), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional int32 headimg = 4;
  if (has_headimg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->headimg(), target);
  }
  
  // optional int32 param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitLayoutReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional string layout = 2;
    if (has_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layout());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 headimg = 4;
    if (has_headimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headimg());
    }
    
    // optional int32 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitLayoutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitLayoutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitLayoutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitLayoutReq::MergeFrom(const InitLayoutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_layout()) {
      set_layout(from.layout());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_headimg()) {
      set_headimg(from.headimg());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitLayoutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitLayoutReq::CopyFrom(const InitLayoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitLayoutReq::IsInitialized() const {
  
  return true;
}

void InitLayoutReq::Swap(InitLayoutReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(layout_, other->layout_);
    std::swap(type_, other->type_);
    std::swap(headimg_, other->headimg_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitLayoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitLayoutReq_descriptor_;
  metadata.reflection = InitLayoutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectChessReq::kSeatFieldNumber;
const int SelectChessReq::kPosFieldNumber;
#endif  // !_MSC_VER

SelectChessReq::SelectChessReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectChessReq::InitAsDefaultInstance() {
}

SelectChessReq::SelectChessReq(const SelectChessReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectChessReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectChessReq::~SelectChessReq() {
  SharedDtor();
}

void SelectChessReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectChessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectChessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectChessReq_descriptor_;
}

const SelectChessReq& SelectChessReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

SelectChessReq* SelectChessReq::default_instance_ = NULL;

SelectChessReq* SelectChessReq::New() const {
  return new SelectChessReq;
}

void SelectChessReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectChessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectChessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectChessReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectChessReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectChessReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectChessReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectChessReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectChessReq::MergeFrom(const SelectChessReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectChessReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectChessReq::CopyFrom(const SelectChessReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectChessReq::IsInitialized() const {
  
  return true;
}

void SelectChessReq::Swap(SelectChessReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectChessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectChessReq_descriptor_;
  metadata.reflection = SelectChessReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveChessReq::kSeatFieldNumber;
const int MoveChessReq::kAtposFieldNumber;
const int MoveChessReq::kToposFieldNumber;
const int MoveChessReq::kIsconfirmFieldNumber;
#endif  // !_MSC_VER

MoveChessReq::MoveChessReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveChessReq::InitAsDefaultInstance() {
}

MoveChessReq::MoveChessReq(const MoveChessReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveChessReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  atpos_ = 0;
  topos_ = 0;
  isconfirm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveChessReq::~MoveChessReq() {
  SharedDtor();
}

void MoveChessReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveChessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveChessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveChessReq_descriptor_;
}

const MoveChessReq& MoveChessReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

MoveChessReq* MoveChessReq::default_instance_ = NULL;

MoveChessReq* MoveChessReq::New() const {
  return new MoveChessReq;
}

void MoveChessReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    atpos_ = 0;
    topos_ = 0;
    isconfirm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveChessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atpos;
        break;
      }
      
      // optional int32 atpos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atpos_)));
          set_has_atpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_topos;
        break;
      }
      
      // optional int32 topos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topos_)));
          set_has_topos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isconfirm;
        break;
      }
      
      // optional int32 isconfirm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isconfirm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isconfirm_)));
          set_has_isconfirm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveChessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional int32 atpos = 2;
  if (has_atpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atpos(), output);
  }
  
  // optional int32 topos = 3;
  if (has_topos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->topos(), output);
  }
  
  // optional int32 isconfirm = 4;
  if (has_isconfirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isconfirm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveChessReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional int32 atpos = 2;
  if (has_atpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atpos(), target);
  }
  
  // optional int32 topos = 3;
  if (has_topos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->topos(), target);
  }
  
  // optional int32 isconfirm = 4;
  if (has_isconfirm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isconfirm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveChessReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional int32 atpos = 2;
    if (has_atpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atpos());
    }
    
    // optional int32 topos = 3;
    if (has_topos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topos());
    }
    
    // optional int32 isconfirm = 4;
    if (has_isconfirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isconfirm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveChessReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveChessReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveChessReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveChessReq::MergeFrom(const MoveChessReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_atpos()) {
      set_atpos(from.atpos());
    }
    if (from.has_topos()) {
      set_topos(from.topos());
    }
    if (from.has_isconfirm()) {
      set_isconfirm(from.isconfirm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveChessReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveChessReq::CopyFrom(const MoveChessReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveChessReq::IsInitialized() const {
  
  return true;
}

void MoveChessReq::Swap(MoveChessReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(atpos_, other->atpos_);
    std::swap(topos_, other->topos_);
    std::swap(isconfirm_, other->isconfirm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveChessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveChessReq_descriptor_;
  metadata.reflection = MoveChessReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcotionFinishReq::kSeatFieldNumber;
#endif  // !_MSC_VER

AcotionFinishReq::AcotionFinishReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcotionFinishReq::InitAsDefaultInstance() {
}

AcotionFinishReq::AcotionFinishReq(const AcotionFinishReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcotionFinishReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcotionFinishReq::~AcotionFinishReq() {
  SharedDtor();
}

void AcotionFinishReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcotionFinishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcotionFinishReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcotionFinishReq_descriptor_;
}

const AcotionFinishReq& AcotionFinishReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

AcotionFinishReq* AcotionFinishReq::default_instance_ = NULL;

AcotionFinishReq* AcotionFinishReq::New() const {
  return new AcotionFinishReq;
}

void AcotionFinishReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcotionFinishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcotionFinishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcotionFinishReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcotionFinishReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcotionFinishReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcotionFinishReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcotionFinishReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcotionFinishReq::MergeFrom(const AcotionFinishReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcotionFinishReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcotionFinishReq::CopyFrom(const AcotionFinishReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcotionFinishReq::IsInitialized() const {
  
  return true;
}

void AcotionFinishReq::Swap(AcotionFinishReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcotionFinishReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcotionFinishReq_descriptor_;
  metadata.reflection = AcotionFinishReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConcedeReq::kSeatFieldNumber;
#endif  // !_MSC_VER

ConcedeReq::ConcedeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConcedeReq::InitAsDefaultInstance() {
}

ConcedeReq::ConcedeReq(const ConcedeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConcedeReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcedeReq::~ConcedeReq() {
  SharedDtor();
}

void ConcedeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConcedeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcedeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcedeReq_descriptor_;
}

const ConcedeReq& ConcedeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

ConcedeReq* ConcedeReq::default_instance_ = NULL;

ConcedeReq* ConcedeReq::New() const {
  return new ConcedeReq;
}

void ConcedeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcedeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConcedeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConcedeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConcedeReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcedeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcedeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcedeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcedeReq::MergeFrom(const ConcedeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcedeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcedeReq::CopyFrom(const ConcedeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcedeReq::IsInitialized() const {
  
  return true;
}

void ConcedeReq::Swap(ConcedeReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcedeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcedeReq_descriptor_;
  metadata.reflection = ConcedeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeaceReq::kSeatFieldNumber;
#endif  // !_MSC_VER

PeaceReq::PeaceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeaceReq::InitAsDefaultInstance() {
}

PeaceReq::PeaceReq(const PeaceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeaceReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeaceReq::~PeaceReq() {
  SharedDtor();
}

void PeaceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeaceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeaceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeaceReq_descriptor_;
}

const PeaceReq& PeaceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

PeaceReq* PeaceReq::default_instance_ = NULL;

PeaceReq* PeaceReq::New() const {
  return new PeaceReq;
}

void PeaceReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeaceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeaceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeaceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeaceReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeaceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeaceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeaceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeaceReq::MergeFrom(const PeaceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeaceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeaceReq::CopyFrom(const PeaceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeaceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PeaceReq::Swap(PeaceReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeaceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeaceReq_descriptor_;
  metadata.reflection = PeaceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeaceResReq::kSeatFieldNumber;
const int PeaceResReq::kAgreeFieldNumber;
#endif  // !_MSC_VER

PeaceResReq::PeaceResReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeaceResReq::InitAsDefaultInstance() {
}

PeaceResReq::PeaceResReq(const PeaceResReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeaceResReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  agree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeaceResReq::~PeaceResReq() {
  SharedDtor();
}

void PeaceResReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeaceResReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeaceResReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeaceResReq_descriptor_;
}

const PeaceResReq& PeaceResReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

PeaceResReq* PeaceResReq::default_instance_ = NULL;

PeaceResReq* PeaceResReq::New() const {
  return new PeaceResReq;
}

void PeaceResReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    agree_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeaceResReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }
      
      // optional int32 agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeaceResReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional int32 agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->agree(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeaceResReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional int32 agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->agree(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeaceResReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional int32 agree = 2;
    if (has_agree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agree());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeaceResReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeaceResReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeaceResReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeaceResReq::MergeFrom(const PeaceResReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeaceResReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeaceResReq::CopyFrom(const PeaceResReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeaceResReq::IsInitialized() const {
  
  return true;
}

void PeaceResReq::Swap(PeaceResReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeaceResReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeaceResReq_descriptor_;
  metadata.reflection = PeaceResReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowChessReq::kAtposFieldNumber;
#endif  // !_MSC_VER

ShowChessReq::ShowChessReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShowChessReq::InitAsDefaultInstance() {
}

ShowChessReq::ShowChessReq(const ShowChessReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShowChessReq::SharedCtor() {
  _cached_size_ = 0;
  atpos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowChessReq::~ShowChessReq() {
  SharedDtor();
}

void ShowChessReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowChessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowChessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowChessReq_descriptor_;
}

const ShowChessReq& ShowChessReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

ShowChessReq* ShowChessReq::default_instance_ = NULL;

ShowChessReq* ShowChessReq::New() const {
  return new ShowChessReq;
}

void ShowChessReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atpos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowChessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 atpos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atpos_)));
          set_has_atpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShowChessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 atpos = 1;
  if (has_atpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->atpos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShowChessReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 atpos = 1;
  if (has_atpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->atpos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShowChessReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 atpos = 1;
    if (has_atpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atpos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowChessReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowChessReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowChessReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowChessReq::MergeFrom(const ShowChessReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atpos()) {
      set_atpos(from.atpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowChessReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowChessReq::CopyFrom(const ShowChessReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowChessReq::IsInitialized() const {
  
  return true;
}

void ShowChessReq::Swap(ShowChessReq* other) {
  if (other != this) {
    std::swap(atpos_, other->atpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowChessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowChessReq_descriptor_;
  metadata.reflection = ShowChessReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitRuleReq::kGametypeFieldNumber;
const int InitRuleReq::kCleandileiFieldNumber;
const int InitRuleReq::kCarryjunqiFieldNumber;
#endif  // !_MSC_VER

InitRuleReq::InitRuleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitRuleReq::InitAsDefaultInstance() {
}

InitRuleReq::InitRuleReq(const InitRuleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitRuleReq::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0;
  cleandilei_ = 0;
  carryjunqi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitRuleReq::~InitRuleReq() {
  SharedDtor();
}

void InitRuleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitRuleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRuleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitRuleReq_descriptor_;
}

const InitRuleReq& InitRuleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

InitRuleReq* InitRuleReq::default_instance_ = NULL;

InitRuleReq* InitRuleReq::New() const {
  return new InitRuleReq;
}

void InitRuleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0;
    cleandilei_ = 0;
    carryjunqi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitRuleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cleandilei;
        break;
      }
      
      // optional int32 cleandilei = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleandilei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleandilei_)));
          set_has_cleandilei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_carryjunqi;
        break;
      }
      
      // optional int32 carryjunqi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryjunqi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carryjunqi_)));
          set_has_carryjunqi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitRuleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gametype(), output);
  }
  
  // optional int32 cleandilei = 2;
  if (has_cleandilei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cleandilei(), output);
  }
  
  // optional int32 carryjunqi = 3;
  if (has_carryjunqi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->carryjunqi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitRuleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gametype(), target);
  }
  
  // optional int32 cleandilei = 2;
  if (has_cleandilei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cleandilei(), target);
  }
  
  // optional int32 carryjunqi = 3;
  if (has_carryjunqi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->carryjunqi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitRuleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }
    
    // optional int32 cleandilei = 2;
    if (has_cleandilei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleandilei());
    }
    
    // optional int32 carryjunqi = 3;
    if (has_carryjunqi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carryjunqi());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRuleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitRuleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitRuleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitRuleReq::MergeFrom(const InitRuleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_cleandilei()) {
      set_cleandilei(from.cleandilei());
    }
    if (from.has_carryjunqi()) {
      set_carryjunqi(from.carryjunqi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitRuleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRuleReq::CopyFrom(const InitRuleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRuleReq::IsInitialized() const {
  
  return true;
}

void InitRuleReq::Swap(InitRuleReq* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(cleandilei_, other->cleandilei_);
    std::swap(carryjunqi_, other->carryjunqi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitRuleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitRuleReq_descriptor_;
  metadata.reflection = InitRuleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeelReq::kFromFieldNumber;
const int FeelReq::kToFieldNumber;
const int FeelReq::kFeelFieldNumber;
const int FeelReq::kStrFieldNumber;
#endif  // !_MSC_VER

FeelReq::FeelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeelReq::InitAsDefaultInstance() {
}

FeelReq::FeelReq(const FeelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeelReq::SharedCtor() {
  _cached_size_ = 0;
  from_ = 0u;
  to_ = 0u;
  feel_ = 0u;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeelReq::~FeelReq() {
  SharedDtor();
}

void FeelReq::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void FeelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeelReq_descriptor_;
}

const FeelReq& FeelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

FeelReq* FeelReq::default_instance_ = NULL;

FeelReq* FeelReq::New() const {
  return new FeelReq;
}

void FeelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_ = 0u;
    to_ = 0u;
    feel_ = 0u;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }
      
      // optional uint32 to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_feel;
        break;
      }
      
      // optional uint32 feel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feel_)));
          set_has_feel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str;
        break;
      }
      
      // optional string str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from(), output);
  }
  
  // optional uint32 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to(), output);
  }
  
  // optional uint32 feel = 3;
  if (has_feel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->feel(), output);
  }
  
  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from(), target);
  }
  
  // optional uint32 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to(), target);
  }
  
  // optional uint32 feel = 3;
  if (has_feel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->feel(), target);
  }
  
  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeelReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from());
    }
    
    // optional uint32 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to());
    }
    
    // optional uint32 feel = 3;
    if (has_feel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feel());
    }
    
    // optional string str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeelReq::MergeFrom(const FeelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_feel()) {
      set_feel(from.feel());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeelReq::CopyFrom(const FeelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeelReq::IsInitialized() const {
  
  return true;
}

void FeelReq::Swap(FeelReq* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(feel_, other->feel_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeelReq_descriptor_;
  metadata.reflection = FeelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitChessAck::kPosFieldNumber;
const int InitChessAck::kHonorFieldNumber;
const int InitChessAck::kHandsFieldNumber;
const int InitChessAck::kWinsFieldNumber;
const int InitChessAck::kBreaksFieldNumber;
const int InitChessAck::kGradeFieldNumber;
const int InitChessAck::kGametypeFieldNumber;
const int InitChessAck::kCleandileiFieldNumber;
const int InitChessAck::kCarryjunqiFieldNumber;
const int InitChessAck::kFanhandsFieldNumber;
const int InitChessAck::kFanwinsFieldNumber;
const int InitChessAck::kFandrawsFieldNumber;
const int InitChessAck::kFandbreaksFieldNumber;
const int InitChessAck::kAnhandsFieldNumber;
const int InitChessAck::kAnwinsFieldNumber;
const int InitChessAck::kAndrawsFieldNumber;
const int InitChessAck::kAndbreaksFieldNumber;
const int InitChessAck::kParasFieldNumber;
const int InitChessAck::kServerversionFieldNumber;
#endif  // !_MSC_VER

InitChessAck::InitChessAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitChessAck::InitAsDefaultInstance() {
  paras_ = const_cast< ::cn::jj::service::msg::protocol::ParaInfo*>(&::cn::jj::service::msg::protocol::ParaInfo::default_instance());
}

InitChessAck::InitChessAck(const InitChessAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitChessAck::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0;
  cleandilei_ = 0;
  carryjunqi_ = 0;
  paras_ = NULL;
  serverversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitChessAck::~InitChessAck() {
  SharedDtor();
}

void InitChessAck::SharedDtor() {
  if (serverversion_ != &::google::protobuf::internal::kEmptyString) {
    delete serverversion_;
  }
  if (this != default_instance_) {
    delete paras_;
  }
}

void InitChessAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitChessAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitChessAck_descriptor_;
}

const InitChessAck& InitChessAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

InitChessAck* InitChessAck::default_instance_ = NULL;

InitChessAck* InitChessAck::New() const {
  return new InitChessAck;
}

void InitChessAck::Clear() {
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    gametype_ = 0;
    cleandilei_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    carryjunqi_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_paras()) {
      if (paras_ != NULL) paras_->::cn::jj::service::msg::protocol::ParaInfo::Clear();
    }
    if (has_serverversion()) {
      if (serverversion_ != &::google::protobuf::internal::kEmptyString) {
        serverversion_->clear();
      }
    }
  }
  pos_.Clear();
  honor_.Clear();
  hands_.Clear();
  wins_.Clear();
  breaks_.Clear();
  grade_.Clear();
  fanhands_.Clear();
  fanwins_.Clear();
  fandraws_.Clear();
  fandbreaks_.Clear();
  anhands_.Clear();
  anwins_.Clear();
  andraws_.Clear();
  andbreaks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitChessAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pos;
        if (input->ExpectTag(16)) goto parse_honor;
        break;
      }
      
      // repeated int32 honor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_honor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_honor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_honor;
        if (input->ExpectTag(24)) goto parse_hands;
        break;
      }
      
      // repeated int32 hands = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_hands())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hands())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hands;
        if (input->ExpectTag(32)) goto parse_wins;
        break;
      }
      
      // repeated int32 wins = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_wins())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wins())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wins;
        if (input->ExpectTag(40)) goto parse_breaks;
        break;
      }
      
      // repeated int32 breaks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breaks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_breaks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_breaks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_breaks;
        if (input->ExpectTag(48)) goto parse_grade;
        break;
      }
      
      // repeated int32 grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_grade())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_grade())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_grade;
        if (input->ExpectTag(56)) goto parse_gametype;
        break;
      }
      
      // optional int32 gametype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cleandilei;
        break;
      }
      
      // optional int32 cleandilei = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleandilei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleandilei_)));
          set_has_cleandilei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_carryjunqi;
        break;
      }
      
      // optional int32 carryjunqi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryjunqi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carryjunqi_)));
          set_has_carryjunqi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fanhands;
        break;
      }
      
      // repeated int32 fanhands = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fanhands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_fanhands())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fanhands())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fanhands;
        if (input->ExpectTag(88)) goto parse_fanwins;
        break;
      }
      
      // repeated int32 fanwins = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fanwins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_fanwins())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fanwins())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fanwins;
        if (input->ExpectTag(96)) goto parse_fandraws;
        break;
      }
      
      // repeated int32 fandraws = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fandraws:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_fandraws())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fandraws())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fandraws;
        if (input->ExpectTag(104)) goto parse_fandbreaks;
        break;
      }
      
      // repeated int32 fandbreaks = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fandbreaks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_fandbreaks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fandbreaks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fandbreaks;
        if (input->ExpectTag(112)) goto parse_anhands;
        break;
      }
      
      // repeated int32 anhands = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anhands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_anhands())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_anhands())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_anhands;
        if (input->ExpectTag(120)) goto parse_anwins;
        break;
      }
      
      // repeated int32 anwins = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anwins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_anwins())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_anwins())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_anwins;
        if (input->ExpectTag(128)) goto parse_andraws;
        break;
      }
      
      // repeated int32 andraws = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_andraws:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_andraws())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_andraws())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_andraws;
        if (input->ExpectTag(136)) goto parse_andbreaks;
        break;
      }
      
      // repeated int32 andbreaks = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_andbreaks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_andbreaks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_andbreaks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_andbreaks;
        if (input->ExpectTag(146)) goto parse_paras;
        break;
      }
      
      // optional .cn.jj.service.msg.protocol.ParaInfo paras = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paras()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_serverversion;
        break;
      }
      
      // optional string serverversion = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverversion().data(), this->serverversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitChessAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pos(i), output);
  }
  
  // repeated int32 honor = 2;
  for (int i = 0; i < this->honor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->honor(i), output);
  }
  
  // repeated int32 hands = 3;
  for (int i = 0; i < this->hands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->hands(i), output);
  }
  
  // repeated int32 wins = 4;
  for (int i = 0; i < this->wins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->wins(i), output);
  }
  
  // repeated int32 breaks = 5;
  for (int i = 0; i < this->breaks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->breaks(i), output);
  }
  
  // repeated int32 grade = 6;
  for (int i = 0; i < this->grade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->grade(i), output);
  }
  
  // optional int32 gametype = 7;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gametype(), output);
  }
  
  // optional int32 cleandilei = 8;
  if (has_cleandilei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cleandilei(), output);
  }
  
  // optional int32 carryjunqi = 9;
  if (has_carryjunqi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->carryjunqi(), output);
  }
  
  // repeated int32 fanhands = 10;
  for (int i = 0; i < this->fanhands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->fanhands(i), output);
  }
  
  // repeated int32 fanwins = 11;
  for (int i = 0; i < this->fanwins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->fanwins(i), output);
  }
  
  // repeated int32 fandraws = 12;
  for (int i = 0; i < this->fandraws_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->fandraws(i), output);
  }
  
  // repeated int32 fandbreaks = 13;
  for (int i = 0; i < this->fandbreaks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->fandbreaks(i), output);
  }
  
  // repeated int32 anhands = 14;
  for (int i = 0; i < this->anhands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->anhands(i), output);
  }
  
  // repeated int32 anwins = 15;
  for (int i = 0; i < this->anwins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->anwins(i), output);
  }
  
  // repeated int32 andraws = 16;
  for (int i = 0; i < this->andraws_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->andraws(i), output);
  }
  
  // repeated int32 andbreaks = 17;
  for (int i = 0; i < this->andbreaks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->andbreaks(i), output);
  }
  
  // optional .cn.jj.service.msg.protocol.ParaInfo paras = 18;
  if (has_paras()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->paras(), output);
  }
  
  // optional string serverversion = 19;
  if (has_serverversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverversion().data(), this->serverversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->serverversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitChessAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->pos(i), target);
  }
  
  // repeated int32 honor = 2;
  for (int i = 0; i < this->honor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->honor(i), target);
  }
  
  // repeated int32 hands = 3;
  for (int i = 0; i < this->hands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->hands(i), target);
  }
  
  // repeated int32 wins = 4;
  for (int i = 0; i < this->wins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->wins(i), target);
  }
  
  // repeated int32 breaks = 5;
  for (int i = 0; i < this->breaks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->breaks(i), target);
  }
  
  // repeated int32 grade = 6;
  for (int i = 0; i < this->grade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->grade(i), target);
  }
  
  // optional int32 gametype = 7;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gametype(), target);
  }
  
  // optional int32 cleandilei = 8;
  if (has_cleandilei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cleandilei(), target);
  }
  
  // optional int32 carryjunqi = 9;
  if (has_carryjunqi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->carryjunqi(), target);
  }
  
  // repeated int32 fanhands = 10;
  for (int i = 0; i < this->fanhands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->fanhands(i), target);
  }
  
  // repeated int32 fanwins = 11;
  for (int i = 0; i < this->fanwins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->fanwins(i), target);
  }
  
  // repeated int32 fandraws = 12;
  for (int i = 0; i < this->fandraws_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->fandraws(i), target);
  }
  
  // repeated int32 fandbreaks = 13;
  for (int i = 0; i < this->fandbreaks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->fandbreaks(i), target);
  }
  
  // repeated int32 anhands = 14;
  for (int i = 0; i < this->anhands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->anhands(i), target);
  }
  
  // repeated int32 anwins = 15;
  for (int i = 0; i < this->anwins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->anwins(i), target);
  }
  
  // repeated int32 andraws = 16;
  for (int i = 0; i < this->andraws_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->andraws(i), target);
  }
  
  // repeated int32 andbreaks = 17;
  for (int i = 0; i < this->andbreaks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->andbreaks(i), target);
  }
  
  // optional .cn.jj.service.msg.protocol.ParaInfo paras = 18;
  if (has_paras()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->paras(), target);
  }
  
  // optional string serverversion = 19;
  if (has_serverversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverversion().data(), this->serverversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->serverversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitChessAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    // optional int32 gametype = 7;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }
    
    // optional int32 cleandilei = 8;
    if (has_cleandilei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleandilei());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 carryjunqi = 9;
    if (has_carryjunqi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carryjunqi());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .cn.jj.service.msg.protocol.ParaInfo paras = 18;
    if (has_paras()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paras());
    }
    
    // optional string serverversion = 19;
    if (has_serverversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverversion());
    }
    
  }
  // repeated int32 pos = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }
  
  // repeated int32 honor = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->honor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->honor(i));
    }
    total_size += 1 * this->honor_size() + data_size;
  }
  
  // repeated int32 hands = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hands(i));
    }
    total_size += 1 * this->hands_size() + data_size;
  }
  
  // repeated int32 wins = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->wins_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wins(i));
    }
    total_size += 1 * this->wins_size() + data_size;
  }
  
  // repeated int32 breaks = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->breaks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->breaks(i));
    }
    total_size += 1 * this->breaks_size() + data_size;
  }
  
  // repeated int32 grade = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->grade_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->grade(i));
    }
    total_size += 1 * this->grade_size() + data_size;
  }
  
  // repeated int32 fanhands = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->fanhands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fanhands(i));
    }
    total_size += 1 * this->fanhands_size() + data_size;
  }
  
  // repeated int32 fanwins = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->fanwins_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fanwins(i));
    }
    total_size += 1 * this->fanwins_size() + data_size;
  }
  
  // repeated int32 fandraws = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->fandraws_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fandraws(i));
    }
    total_size += 1 * this->fandraws_size() + data_size;
  }
  
  // repeated int32 fandbreaks = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->fandbreaks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fandbreaks(i));
    }
    total_size += 1 * this->fandbreaks_size() + data_size;
  }
  
  // repeated int32 anhands = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->anhands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->anhands(i));
    }
    total_size += 1 * this->anhands_size() + data_size;
  }
  
  // repeated int32 anwins = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->anwins_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->anwins(i));
    }
    total_size += 1 * this->anwins_size() + data_size;
  }
  
  // repeated int32 andraws = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->andraws_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->andraws(i));
    }
    total_size += 2 * this->andraws_size() + data_size;
  }
  
  // repeated int32 andbreaks = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->andbreaks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->andbreaks(i));
    }
    total_size += 2 * this->andbreaks_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitChessAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitChessAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitChessAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitChessAck::MergeFrom(const InitChessAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  honor_.MergeFrom(from.honor_);
  hands_.MergeFrom(from.hands_);
  wins_.MergeFrom(from.wins_);
  breaks_.MergeFrom(from.breaks_);
  grade_.MergeFrom(from.grade_);
  fanhands_.MergeFrom(from.fanhands_);
  fanwins_.MergeFrom(from.fanwins_);
  fandraws_.MergeFrom(from.fandraws_);
  fandbreaks_.MergeFrom(from.fandbreaks_);
  anhands_.MergeFrom(from.anhands_);
  anwins_.MergeFrom(from.anwins_);
  andraws_.MergeFrom(from.andraws_);
  andbreaks_.MergeFrom(from.andbreaks_);
  if (from._has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_cleandilei()) {
      set_cleandilei(from.cleandilei());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_carryjunqi()) {
      set_carryjunqi(from.carryjunqi());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_paras()) {
      mutable_paras()->::cn::jj::service::msg::protocol::ParaInfo::MergeFrom(from.paras());
    }
    if (from.has_serverversion()) {
      set_serverversion(from.serverversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitChessAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitChessAck::CopyFrom(const InitChessAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitChessAck::IsInitialized() const {
  
  return true;
}

void InitChessAck::Swap(InitChessAck* other) {
  if (other != this) {
    pos_.Swap(&other->pos_);
    honor_.Swap(&other->honor_);
    hands_.Swap(&other->hands_);
    wins_.Swap(&other->wins_);
    breaks_.Swap(&other->breaks_);
    grade_.Swap(&other->grade_);
    std::swap(gametype_, other->gametype_);
    std::swap(cleandilei_, other->cleandilei_);
    std::swap(carryjunqi_, other->carryjunqi_);
    fanhands_.Swap(&other->fanhands_);
    fanwins_.Swap(&other->fanwins_);
    fandraws_.Swap(&other->fandraws_);
    fandbreaks_.Swap(&other->fandbreaks_);
    anhands_.Swap(&other->anhands_);
    anwins_.Swap(&other->anwins_);
    andraws_.Swap(&other->andraws_);
    andbreaks_.Swap(&other->andbreaks_);
    std::swap(paras_, other->paras_);
    std::swap(serverversion_, other->serverversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitChessAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitChessAck_descriptor_;
  metadata.reflection = InitChessAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartMoveChessAck::kSeatFieldNumber;
const int StartMoveChessAck::kLayoutFieldNumber;
const int StartMoveChessAck::kHeadimgFieldNumber;
const int StartMoveChessAck::kOverseatFieldNumber;
#endif  // !_MSC_VER

StartMoveChessAck::StartMoveChessAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartMoveChessAck::InitAsDefaultInstance() {
}

StartMoveChessAck::StartMoveChessAck(const StartMoveChessAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartMoveChessAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  layout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartMoveChessAck::~StartMoveChessAck() {
  SharedDtor();
}

void StartMoveChessAck::SharedDtor() {
  if (layout_ != &::google::protobuf::internal::kEmptyString) {
    delete layout_;
  }
  if (this != default_instance_) {
  }
}

void StartMoveChessAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartMoveChessAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartMoveChessAck_descriptor_;
}

const StartMoveChessAck& StartMoveChessAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

StartMoveChessAck* StartMoveChessAck::default_instance_ = NULL;

StartMoveChessAck* StartMoveChessAck::New() const {
  return new StartMoveChessAck;
}

void StartMoveChessAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    if (has_layout()) {
      if (layout_ != &::google::protobuf::internal::kEmptyString) {
        layout_->clear();
      }
    }
  }
  headimg_.Clear();
  overseat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartMoveChessAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layout;
        break;
      }
      
      // optional string layout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layout().data(), this->layout().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headimg;
        break;
      }
      
      // repeated int32 headimg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headimg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_headimg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_headimg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headimg;
        if (input->ExpectTag(32)) goto parse_overseat;
        break;
      }
      
      // repeated uint32 overseat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_overseat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_overseat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_overseat;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartMoveChessAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional string layout = 2;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layout().data(), this->layout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->layout(), output);
  }
  
  // repeated int32 headimg = 3;
  for (int i = 0; i < this->headimg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->headimg(i), output);
  }
  
  // repeated uint32 overseat = 4;
  for (int i = 0; i < this->overseat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->overseat(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartMoveChessAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional string layout = 2;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layout().data(), this->layout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layout(), target);
  }
  
  // repeated int32 headimg = 3;
  for (int i = 0; i < this->headimg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->headimg(i), target);
  }
  
  // repeated uint32 overseat = 4;
  for (int i = 0; i < this->overseat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->overseat(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartMoveChessAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional string layout = 2;
    if (has_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layout());
    }
    
  }
  // repeated int32 headimg = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->headimg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->headimg(i));
    }
    total_size += 1 * this->headimg_size() + data_size;
  }
  
  // repeated uint32 overseat = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->overseat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->overseat(i));
    }
    total_size += 1 * this->overseat_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartMoveChessAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartMoveChessAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartMoveChessAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartMoveChessAck::MergeFrom(const StartMoveChessAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  headimg_.MergeFrom(from.headimg_);
  overseat_.MergeFrom(from.overseat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_layout()) {
      set_layout(from.layout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartMoveChessAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartMoveChessAck::CopyFrom(const StartMoveChessAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMoveChessAck::IsInitialized() const {
  
  return true;
}

void StartMoveChessAck::Swap(StartMoveChessAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(layout_, other->layout_);
    headimg_.Swap(&other->headimg_);
    overseat_.Swap(&other->overseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartMoveChessAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartMoveChessAck_descriptor_;
  metadata.reflection = StartMoveChessAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectChessAck::kSeatFieldNumber;
const int SelectChessAck::kPosFieldNumber;
const int SelectChessAck::kPostionsFieldNumber;
#endif  // !_MSC_VER

SelectChessAck::SelectChessAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectChessAck::InitAsDefaultInstance() {
}

SelectChessAck::SelectChessAck(const SelectChessAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectChessAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectChessAck::~SelectChessAck() {
  SharedDtor();
}

void SelectChessAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectChessAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectChessAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectChessAck_descriptor_;
}

const SelectChessAck& SelectChessAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

SelectChessAck* SelectChessAck::default_instance_ = NULL;

SelectChessAck* SelectChessAck::New() const {
  return new SelectChessAck;
}

void SelectChessAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    pos_ = 0;
  }
  postions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectChessAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_postions;
        break;
      }
      
      // repeated int32 postions = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_postions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_postions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectChessAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }
  
  // repeated int32 postions = 3 [packed = true];
  if (this->postions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_postions_cached_byte_size_);
  }
  for (int i = 0; i < this->postions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->postions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectChessAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }
  
  // repeated int32 postions = 3 [packed = true];
  if (this->postions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _postions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->postions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->postions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectChessAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  // repeated int32 postions = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->postions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->postions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _postions_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectChessAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectChessAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectChessAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectChessAck::MergeFrom(const SelectChessAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  postions_.MergeFrom(from.postions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectChessAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectChessAck::CopyFrom(const SelectChessAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectChessAck::IsInitialized() const {
  
  return true;
}

void SelectChessAck::Swap(SelectChessAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(pos_, other->pos_);
    postions_.Swap(&other->postions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectChessAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectChessAck_descriptor_;
  metadata.reflection = SelectChessAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveChessAck::kSeatFieldNumber;
const int MoveChessAck::kPathFieldNumber;
const int MoveChessAck::kResultFieldNumber;
const int MoveChessAck::kEventFieldNumber;
const int MoveChessAck::kStepFieldNumber;
const int MoveChessAck::kChesstypeFieldNumber;
#endif  // !_MSC_VER

MoveChessAck::MoveChessAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveChessAck::InitAsDefaultInstance() {
}

MoveChessAck::MoveChessAck(const MoveChessAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveChessAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  result_ = 0;
  event_ = 0;
  step_ = 0;
  chesstype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveChessAck::~MoveChessAck() {
  SharedDtor();
}

void MoveChessAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveChessAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveChessAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveChessAck_descriptor_;
}

const MoveChessAck& MoveChessAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

MoveChessAck* MoveChessAck::default_instance_ = NULL;

MoveChessAck* MoveChessAck::New() const {
  return new MoveChessAck;
}

void MoveChessAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    result_ = 0;
    event_ = 0;
    step_ = 0;
    chesstype_ = 0;
  }
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveChessAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // repeated int32 path = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_path())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_path())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event;
        break;
      }
      
      // optional int32 event = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_step;
        break;
      }
      
      // optional int32 step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chesstype;
        break;
      }
      
      // optional int32 chesstype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chesstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chesstype_)));
          set_has_chesstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveChessAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // repeated int32 path = 2 [packed = true];
  if (this->path_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_path_cached_byte_size_);
  }
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->path(i), output);
  }
  
  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }
  
  // optional int32 event = 4;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event(), output);
  }
  
  // optional int32 step = 5;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->step(), output);
  }
  
  // optional int32 chesstype = 6;
  if (has_chesstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->chesstype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveChessAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // repeated int32 path = 2 [packed = true];
  if (this->path_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _path_cached_byte_size_, target);
  }
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->path(i), target);
  }
  
  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }
  
  // optional int32 event = 4;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event(), target);
  }
  
  // optional int32 step = 5;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->step(), target);
  }
  
  // optional int32 chesstype = 6;
  if (has_chesstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->chesstype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveChessAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 event = 4;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event());
    }
    
    // optional int32 step = 5;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }
    
    // optional int32 chesstype = 6;
    if (has_chesstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chesstype());
    }
    
  }
  // repeated int32 path = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->path_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->path(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _path_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveChessAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveChessAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveChessAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveChessAck::MergeFrom(const MoveChessAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_chesstype()) {
      set_chesstype(from.chesstype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveChessAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveChessAck::CopyFrom(const MoveChessAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveChessAck::IsInitialized() const {
  
  return true;
}

void MoveChessAck::Swap(MoveChessAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    path_.Swap(&other->path_);
    std::swap(result_, other->result_);
    std::swap(event_, other->event_);
    std::swap(step_, other->step_);
    std::swap(chesstype_, other->chesstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveChessAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveChessAck_descriptor_;
  metadata.reflection = MoveChessAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionFinishAck::kNextseatFieldNumber;
const int ActionFinishAck::kChessFieldNumber;
const int ActionFinishAck::kMovetimeFieldNumber;
const int ActionFinishAck::kOverseatFieldNumber;
#endif  // !_MSC_VER

ActionFinishAck::ActionFinishAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionFinishAck::InitAsDefaultInstance() {
}

ActionFinishAck::ActionFinishAck(const ActionFinishAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionFinishAck::SharedCtor() {
  _cached_size_ = 0;
  nextseat_ = 0;
  movetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionFinishAck::~ActionFinishAck() {
  SharedDtor();
}

void ActionFinishAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionFinishAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionFinishAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionFinishAck_descriptor_;
}

const ActionFinishAck& ActionFinishAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

ActionFinishAck* ActionFinishAck::default_instance_ = NULL;

ActionFinishAck* ActionFinishAck::New() const {
  return new ActionFinishAck;
}

void ActionFinishAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nextseat_ = 0;
    movetime_ = 0;
  }
  chess_.Clear();
  overseat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionFinishAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nextseat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextseat_)));
          set_has_nextseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chess;
        break;
      }
      
      // repeated .cn.jj.service.msg.protocol.Chess chess = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chess;
        if (input->ExpectTag(24)) goto parse_movetime;
        break;
      }
      
      // optional int32 movetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetime_)));
          set_has_movetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_overseat;
        break;
      }
      
      // repeated int32 overseat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_overseat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_overseat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_overseat;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionFinishAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nextseat = 1;
  if (has_nextseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nextseat(), output);
  }
  
  // repeated .cn.jj.service.msg.protocol.Chess chess = 2;
  for (int i = 0; i < this->chess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chess(i), output);
  }
  
  // optional int32 movetime = 3;
  if (has_movetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->movetime(), output);
  }
  
  // repeated int32 overseat = 4;
  for (int i = 0; i < this->overseat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->overseat(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionFinishAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nextseat = 1;
  if (has_nextseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nextseat(), target);
  }
  
  // repeated .cn.jj.service.msg.protocol.Chess chess = 2;
  for (int i = 0; i < this->chess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chess(i), target);
  }
  
  // optional int32 movetime = 3;
  if (has_movetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->movetime(), target);
  }
  
  // repeated int32 overseat = 4;
  for (int i = 0; i < this->overseat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->overseat(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionFinishAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nextseat = 1;
    if (has_nextseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextseat());
    }
    
    // optional int32 movetime = 3;
    if (has_movetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movetime());
    }
    
  }
  // repeated .cn.jj.service.msg.protocol.Chess chess = 2;
  total_size += 1 * this->chess_size();
  for (int i = 0; i < this->chess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chess(i));
  }
  
  // repeated int32 overseat = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->overseat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->overseat(i));
    }
    total_size += 1 * this->overseat_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionFinishAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionFinishAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionFinishAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionFinishAck::MergeFrom(const ActionFinishAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  chess_.MergeFrom(from.chess_);
  overseat_.MergeFrom(from.overseat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nextseat()) {
      set_nextseat(from.nextseat());
    }
    if (from.has_movetime()) {
      set_movetime(from.movetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionFinishAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionFinishAck::CopyFrom(const ActionFinishAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionFinishAck::IsInitialized() const {
  
  return true;
}

void ActionFinishAck::Swap(ActionFinishAck* other) {
  if (other != this) {
    std::swap(nextseat_, other->nextseat_);
    chess_.Swap(&other->chess_);
    std::swap(movetime_, other->movetime_);
    overseat_.Swap(&other->overseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionFinishAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionFinishAck_descriptor_;
  metadata.reflection = ActionFinishAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishGameAck::kResultFieldNumber;
const int FinishGameAck::kLayoutFieldNumber;
const int FinishGameAck::kHonorFieldNumber;
const int FinishGameAck::kGradeFieldNumber;
const int FinishGameAck::kUrlparasFieldNumber;
const int FinishGameAck::kEndtypeFieldNumber;
const int FinishGameAck::kTimeoutcostFieldNumber;
const int FinishGameAck::kUsedwareFieldNumber;
#endif  // !_MSC_VER

FinishGameAck::FinishGameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishGameAck::InitAsDefaultInstance() {
}

FinishGameAck::FinishGameAck(const FinishGameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishGameAck::SharedCtor() {
  _cached_size_ = 0;
  endtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishGameAck::~FinishGameAck() {
  SharedDtor();
}

void FinishGameAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishGameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishGameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishGameAck_descriptor_;
}

const FinishGameAck& FinishGameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

FinishGameAck* FinishGameAck::default_instance_ = NULL;

FinishGameAck* FinishGameAck::New() const {
  return new FinishGameAck;
}

void FinishGameAck::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    endtype_ = 0u;
  }
  result_.Clear();
  layout_.Clear();
  honor_.Clear();
  grade_.Clear();
  urlparas_.Clear();
  timeoutcost_.Clear();
  usedware_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_result;
        if (input->ExpectTag(18)) goto parse_layout;
        break;
      }
      
      // repeated string layout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_layout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layout(0).data(), this->layout(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layout;
        if (input->ExpectTag(24)) goto parse_honor;
        break;
      }
      
      // repeated int32 honor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_honor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_honor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_honor;
        if (input->ExpectTag(32)) goto parse_grade;
        break;
      }
      
      // repeated int32 grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_grade())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_grade())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_grade;
        if (input->ExpectTag(40)) goto parse_urlparas;
        break;
      }
      
      // repeated uint32 urlparas = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_urlparas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_urlparas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_urlparas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_urlparas;
        if (input->ExpectTag(48)) goto parse_endtype;
        break;
      }
      
      // optional uint32 endtype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtype_)));
          set_has_endtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timeoutcost;
        break;
      }
      
      // repeated uint32 timeoutcost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeoutcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_timeoutcost())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_timeoutcost())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timeoutcost;
        if (input->ExpectTag(64)) goto parse_usedware;
        break;
      }
      
      // repeated uint32 usedware = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usedware:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_usedware())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_usedware())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_usedware;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->result(i), output);
  }
  
  // repeated string layout = 2;
  for (int i = 0; i < this->layout_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->layout(i).data(), this->layout(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->layout(i), output);
  }
  
  // repeated int32 honor = 3;
  for (int i = 0; i < this->honor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->honor(i), output);
  }
  
  // repeated int32 grade = 4;
  for (int i = 0; i < this->grade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->grade(i), output);
  }
  
  // repeated uint32 urlparas = 5;
  for (int i = 0; i < this->urlparas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->urlparas(i), output);
  }
  
  // optional uint32 endtype = 6;
  if (has_endtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endtype(), output);
  }
  
  // repeated uint32 timeoutcost = 7;
  for (int i = 0; i < this->timeoutcost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->timeoutcost(i), output);
  }
  
  // repeated uint32 usedware = 8;
  for (int i = 0; i < this->usedware_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->usedware(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishGameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->result(i), target);
  }
  
  // repeated string layout = 2;
  for (int i = 0; i < this->layout_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layout(i).data(), this->layout(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->layout(i), target);
  }
  
  // repeated int32 honor = 3;
  for (int i = 0; i < this->honor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->honor(i), target);
  }
  
  // repeated int32 grade = 4;
  for (int i = 0; i < this->grade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->grade(i), target);
  }
  
  // repeated uint32 urlparas = 5;
  for (int i = 0; i < this->urlparas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->urlparas(i), target);
  }
  
  // optional uint32 endtype = 6;
  if (has_endtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endtype(), target);
  }
  
  // repeated uint32 timeoutcost = 7;
  for (int i = 0; i < this->timeoutcost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->timeoutcost(i), target);
  }
  
  // repeated uint32 usedware = 8;
  for (int i = 0; i < this->usedware_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->usedware(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishGameAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional uint32 endtype = 6;
    if (has_endtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtype());
    }
    
  }
  // repeated int32 result = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }
  
  // repeated string layout = 2;
  total_size += 1 * this->layout_size();
  for (int i = 0; i < this->layout_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->layout(i));
  }
  
  // repeated int32 honor = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->honor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->honor(i));
    }
    total_size += 1 * this->honor_size() + data_size;
  }
  
  // repeated int32 grade = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->grade_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->grade(i));
    }
    total_size += 1 * this->grade_size() + data_size;
  }
  
  // repeated uint32 urlparas = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->urlparas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->urlparas(i));
    }
    total_size += 1 * this->urlparas_size() + data_size;
  }
  
  // repeated uint32 timeoutcost = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->timeoutcost_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->timeoutcost(i));
    }
    total_size += 1 * this->timeoutcost_size() + data_size;
  }
  
  // repeated uint32 usedware = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->usedware_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->usedware(i));
    }
    total_size += 1 * this->usedware_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishGameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishGameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishGameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishGameAck::MergeFrom(const FinishGameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  layout_.MergeFrom(from.layout_);
  honor_.MergeFrom(from.honor_);
  grade_.MergeFrom(from.grade_);
  urlparas_.MergeFrom(from.urlparas_);
  timeoutcost_.MergeFrom(from.timeoutcost_);
  usedware_.MergeFrom(from.usedware_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_endtype()) {
      set_endtype(from.endtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishGameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishGameAck::CopyFrom(const FinishGameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishGameAck::IsInitialized() const {
  
  return true;
}

void FinishGameAck::Swap(FinishGameAck* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    layout_.Swap(&other->layout_);
    honor_.Swap(&other->honor_);
    grade_.Swap(&other->grade_);
    urlparas_.Swap(&other->urlparas_);
    std::swap(endtype_, other->endtype_);
    timeoutcost_.Swap(&other->timeoutcost_);
    usedware_.Swap(&other->usedware_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishGameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishGameAck_descriptor_;
  metadata.reflection = FinishGameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeaceAck::kSeatFieldNumber;
#endif  // !_MSC_VER

PeaceAck::PeaceAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeaceAck::InitAsDefaultInstance() {
}

PeaceAck::PeaceAck(const PeaceAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeaceAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeaceAck::~PeaceAck() {
  SharedDtor();
}

void PeaceAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeaceAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeaceAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeaceAck_descriptor_;
}

const PeaceAck& PeaceAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

PeaceAck* PeaceAck::default_instance_ = NULL;

PeaceAck* PeaceAck::New() const {
  return new PeaceAck;
}

void PeaceAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeaceAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeaceAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeaceAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeaceAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeaceAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeaceAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeaceAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeaceAck::MergeFrom(const PeaceAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeaceAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeaceAck::CopyFrom(const PeaceAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeaceAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PeaceAck::Swap(PeaceAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeaceAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeaceAck_descriptor_;
  metadata.reflection = PeaceAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowChessAck::kChessFieldNumber;
const int ShowChessAck::kStepFieldNumber;
const int ShowChessAck::kColorFieldNumber;
#endif  // !_MSC_VER

ShowChessAck::ShowChessAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShowChessAck::InitAsDefaultInstance() {
  chess_ = const_cast< ::cn::jj::service::msg::protocol::Chess*>(&::cn::jj::service::msg::protocol::Chess::default_instance());
}

ShowChessAck::ShowChessAck(const ShowChessAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShowChessAck::SharedCtor() {
  _cached_size_ = 0;
  chess_ = NULL;
  step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowChessAck::~ShowChessAck() {
  SharedDtor();
}

void ShowChessAck::SharedDtor() {
  if (this != default_instance_) {
    delete chess_;
  }
}

void ShowChessAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowChessAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowChessAck_descriptor_;
}

const ShowChessAck& ShowChessAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

ShowChessAck* ShowChessAck::default_instance_ = NULL;

ShowChessAck* ShowChessAck::New() const {
  return new ShowChessAck;
}

void ShowChessAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chess()) {
      if (chess_ != NULL) chess_->::cn::jj::service::msg::protocol::Chess::Clear();
    }
    step_ = 0;
  }
  color_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowChessAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cn.jj.service.msg.protocol.Chess chess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }
      
      // optional int32 step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }
      
      // repeated int32 color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShowChessAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cn.jj.service.msg.protocol.Chess chess = 1;
  if (has_chess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chess(), output);
  }
  
  // optional int32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }
  
  // repeated int32 color = 3;
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->color(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShowChessAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cn.jj.service.msg.protocol.Chess chess = 1;
  if (has_chess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chess(), target);
  }
  
  // optional int32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }
  
  // repeated int32 color = 3;
  for (int i = 0; i < this->color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->color(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShowChessAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cn.jj.service.msg.protocol.Chess chess = 1;
    if (has_chess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chess());
    }
    
    // optional int32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }
    
  }
  // repeated int32 color = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->color_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->color(i));
    }
    total_size += 1 * this->color_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowChessAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowChessAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowChessAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowChessAck::MergeFrom(const ShowChessAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  color_.MergeFrom(from.color_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chess()) {
      mutable_chess()->::cn::jj::service::msg::protocol::Chess::MergeFrom(from.chess());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowChessAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowChessAck::CopyFrom(const ShowChessAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowChessAck::IsInitialized() const {
  
  return true;
}

void ShowChessAck::Swap(ShowChessAck* other) {
  if (other != this) {
    std::swap(chess_, other->chess_);
    std::swap(step_, other->step_);
    color_.Swap(&other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowChessAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowChessAck_descriptor_;
  metadata.reflection = ShowChessAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowTipsAck::kSeatFieldNumber;
const int ShowTipsAck::kTipsFieldNumber;
const int ShowTipsAck::kReducetimeFieldNumber;
#endif  // !_MSC_VER

ShowTipsAck::ShowTipsAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShowTipsAck::InitAsDefaultInstance() {
}

ShowTipsAck::ShowTipsAck(const ShowTipsAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShowTipsAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  tips_ = 0;
  reducetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowTipsAck::~ShowTipsAck() {
  SharedDtor();
}

void ShowTipsAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowTipsAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowTipsAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowTipsAck_descriptor_;
}

const ShowTipsAck& ShowTipsAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

ShowTipsAck* ShowTipsAck::default_instance_ = NULL;

ShowTipsAck* ShowTipsAck::New() const {
  return new ShowTipsAck;
}

void ShowTipsAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    tips_ = 0;
    reducetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowTipsAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tips;
        break;
      }
      
      // optional int32 tips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tips_)));
          set_has_tips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reducetime;
        break;
      }
      
      // optional int32 reducetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reducetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reducetime_)));
          set_has_reducetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShowTipsAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional int32 tips = 2;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tips(), output);
  }
  
  // optional int32 reducetime = 3;
  if (has_reducetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reducetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShowTipsAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional int32 tips = 2;
  if (has_tips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tips(), target);
  }
  
  // optional int32 reducetime = 3;
  if (has_reducetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reducetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShowTipsAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional int32 tips = 2;
    if (has_tips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tips());
    }
    
    // optional int32 reducetime = 3;
    if (has_reducetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reducetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowTipsAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowTipsAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowTipsAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowTipsAck::MergeFrom(const ShowTipsAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_tips()) {
      set_tips(from.tips());
    }
    if (from.has_reducetime()) {
      set_reducetime(from.reducetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowTipsAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowTipsAck::CopyFrom(const ShowTipsAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowTipsAck::IsInitialized() const {
  
  return true;
}

void ShowTipsAck::Swap(ShowTipsAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(tips_, other->tips_);
    std::swap(reducetime_, other->reducetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowTipsAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowTipsAck_descriptor_;
  metadata.reflection = ShowTipsAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefusePeaceAck::kCountFieldNumber;
const int RefusePeaceAck::kDisseatFieldNumber;
const int RefusePeaceAck::kSeatFieldNumber;
#endif  // !_MSC_VER

RefusePeaceAck::RefusePeaceAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefusePeaceAck::InitAsDefaultInstance() {
}

RefusePeaceAck::RefusePeaceAck(const RefusePeaceAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefusePeaceAck::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  disseat_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefusePeaceAck::~RefusePeaceAck() {
  SharedDtor();
}

void RefusePeaceAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefusePeaceAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefusePeaceAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefusePeaceAck_descriptor_;
}

const RefusePeaceAck& RefusePeaceAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

RefusePeaceAck* RefusePeaceAck::default_instance_ = NULL;

RefusePeaceAck* RefusePeaceAck::New() const {
  return new RefusePeaceAck;
}

void RefusePeaceAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    disseat_ = 0;
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefusePeaceAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_disseat;
        break;
      }
      
      // optional int32 disseat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disseat_)));
          set_has_disseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat;
        break;
      }
      
      // optional int32 seat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefusePeaceAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  // optional int32 disseat = 2;
  if (has_disseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->disseat(), output);
  }
  
  // optional int32 seat = 3;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefusePeaceAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  // optional int32 disseat = 2;
  if (has_disseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->disseat(), target);
  }
  
  // optional int32 seat = 3;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefusePeaceAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 disseat = 2;
    if (has_disseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disseat());
    }
    
    // optional int32 seat = 3;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefusePeaceAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefusePeaceAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefusePeaceAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefusePeaceAck::MergeFrom(const RefusePeaceAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_disseat()) {
      set_disseat(from.disseat());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefusePeaceAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefusePeaceAck::CopyFrom(const RefusePeaceAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefusePeaceAck::IsInitialized() const {
  
  return true;
}

void RefusePeaceAck::Swap(RefusePeaceAck* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(disseat_, other->disseat_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefusePeaceAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefusePeaceAck_descriptor_;
  metadata.reflection = RefusePeaceAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RepeatCountAck::kSeatFieldNumber;
const int RepeatCountAck::kCountFieldNumber;
#endif  // !_MSC_VER

RepeatCountAck::RepeatCountAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RepeatCountAck::InitAsDefaultInstance() {
}

RepeatCountAck::RepeatCountAck(const RepeatCountAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RepeatCountAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepeatCountAck::~RepeatCountAck() {
  SharedDtor();
}

void RepeatCountAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepeatCountAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepeatCountAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepeatCountAck_descriptor_;
}

const RepeatCountAck& RepeatCountAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

RepeatCountAck* RepeatCountAck::default_instance_ = NULL;

RepeatCountAck* RepeatCountAck::New() const {
  return new RepeatCountAck;
}

void RepeatCountAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RepeatCountAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RepeatCountAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RepeatCountAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RepeatCountAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatCountAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepeatCountAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepeatCountAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RepeatCountAck::MergeFrom(const RepeatCountAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RepeatCountAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatCountAck::CopyFrom(const RepeatCountAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatCountAck::IsInitialized() const {
  
  return true;
}

void RepeatCountAck::Swap(RepeatCountAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RepeatCountAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepeatCountAck_descriptor_;
  metadata.reflection = RepeatCountAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitRuleAck::kReserveFieldNumber;
#endif  // !_MSC_VER

InitRuleAck::InitRuleAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitRuleAck::InitAsDefaultInstance() {
}

InitRuleAck::InitRuleAck(const InitRuleAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitRuleAck::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitRuleAck::~InitRuleAck() {
  SharedDtor();
}

void InitRuleAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitRuleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRuleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitRuleAck_descriptor_;
}

const InitRuleAck& InitRuleAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

InitRuleAck* InitRuleAck::default_instance_ = NULL;

InitRuleAck* InitRuleAck::New() const {
  return new InitRuleAck;
}

void InitRuleAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitRuleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitRuleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitRuleAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reserve(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitRuleAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRuleAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitRuleAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitRuleAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitRuleAck::MergeFrom(const InitRuleAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitRuleAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRuleAck::CopyFrom(const InitRuleAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRuleAck::IsInitialized() const {
  
  return true;
}

void InitRuleAck::Swap(InitRuleAck* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitRuleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitRuleAck_descriptor_;
  metadata.reflection = InitRuleAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitLayoutAck::kLayoutstateFieldNumber;
#endif  // !_MSC_VER

InitLayoutAck::InitLayoutAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitLayoutAck::InitAsDefaultInstance() {
}

InitLayoutAck::InitLayoutAck(const InitLayoutAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitLayoutAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitLayoutAck::~InitLayoutAck() {
  SharedDtor();
}

void InitLayoutAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitLayoutAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitLayoutAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitLayoutAck_descriptor_;
}

const InitLayoutAck& InitLayoutAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

InitLayoutAck* InitLayoutAck::default_instance_ = NULL;

InitLayoutAck* InitLayoutAck::New() const {
  return new InitLayoutAck;
}

void InitLayoutAck::Clear() {
  layoutstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitLayoutAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 layoutstate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layoutstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_layoutstate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_layoutstate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_layoutstate;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitLayoutAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 layoutstate = 5;
  for (int i = 0; i < this->layoutstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->layoutstate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitLayoutAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 layoutstate = 5;
  for (int i = 0; i < this->layoutstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->layoutstate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitLayoutAck::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 layoutstate = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->layoutstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->layoutstate(i));
    }
    total_size += 1 * this->layoutstate_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitLayoutAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitLayoutAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitLayoutAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitLayoutAck::MergeFrom(const InitLayoutAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  layoutstate_.MergeFrom(from.layoutstate_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitLayoutAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitLayoutAck::CopyFrom(const InitLayoutAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitLayoutAck::IsInitialized() const {
  
  return true;
}

void InitLayoutAck::Swap(InitLayoutAck* other) {
  if (other != this) {
    layoutstate_.Swap(&other->layoutstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitLayoutAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitLayoutAck_descriptor_;
  metadata.reflection = InitLayoutAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeOutAck::kSeatFieldNumber;
const int TimeOutAck::kCountFieldNumber;
const int TimeOutAck::kReducetimeFieldNumber;
#endif  // !_MSC_VER

TimeOutAck::TimeOutAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeOutAck::InitAsDefaultInstance() {
}

TimeOutAck::TimeOutAck(const TimeOutAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeOutAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  count_ = 0;
  reducetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeOutAck::~TimeOutAck() {
  SharedDtor();
}

void TimeOutAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeOutAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeOutAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeOutAck_descriptor_;
}

const TimeOutAck& TimeOutAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

TimeOutAck* TimeOutAck::default_instance_ = NULL;

TimeOutAck* TimeOutAck::New() const {
  return new TimeOutAck;
}

void TimeOutAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    count_ = 0;
    reducetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeOutAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reducetime;
        break;
      }
      
      // optional int32 reducetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reducetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reducetime_)));
          set_has_reducetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeOutAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 reducetime = 3;
  if (has_reducetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reducetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeOutAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // optional int32 reducetime = 3;
  if (has_reducetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reducetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeOutAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 reducetime = 3;
    if (has_reducetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reducetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeOutAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeOutAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeOutAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeOutAck::MergeFrom(const TimeOutAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_reducetime()) {
      set_reducetime(from.reducetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeOutAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeOutAck::CopyFrom(const TimeOutAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeOutAck::IsInitialized() const {
  
  return true;
}

void TimeOutAck::Swap(TimeOutAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(count_, other->count_);
    std::swap(reducetime_, other->reducetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeOutAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeOutAck_descriptor_;
  metadata.reflection = TimeOutAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeelAck::kFromFieldNumber;
const int FeelAck::kToFieldNumber;
const int FeelAck::kFeelFieldNumber;
const int FeelAck::kStrFieldNumber;
#endif  // !_MSC_VER

FeelAck::FeelAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeelAck::InitAsDefaultInstance() {
}

FeelAck::FeelAck(const FeelAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeelAck::SharedCtor() {
  _cached_size_ = 0;
  from_ = 0u;
  to_ = 0u;
  feel_ = 0u;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeelAck::~FeelAck() {
  SharedDtor();
}

void FeelAck::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void FeelAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeelAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeelAck_descriptor_;
}

const FeelAck& FeelAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

FeelAck* FeelAck::default_instance_ = NULL;

FeelAck* FeelAck::New() const {
  return new FeelAck;
}

void FeelAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_ = 0u;
    to_ = 0u;
    feel_ = 0u;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeelAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }
      
      // optional uint32 to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_feel;
        break;
      }
      
      // optional uint32 feel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feel_)));
          set_has_feel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str;
        break;
      }
      
      // optional string str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeelAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from(), output);
  }
  
  // optional uint32 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to(), output);
  }
  
  // optional uint32 feel = 3;
  if (has_feel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->feel(), output);
  }
  
  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeelAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from(), target);
  }
  
  // optional uint32 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to(), target);
  }
  
  // optional uint32 feel = 3;
  if (has_feel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->feel(), target);
  }
  
  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeelAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from());
    }
    
    // optional uint32 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to());
    }
    
    // optional uint32 feel = 3;
    if (has_feel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feel());
    }
    
    // optional string str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeelAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeelAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeelAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeelAck::MergeFrom(const FeelAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_feel()) {
      set_feel(from.feel());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeelAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeelAck::CopyFrom(const FeelAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeelAck::IsInitialized() const {
  
  return true;
}

void FeelAck::Swap(FeelAck* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(feel_, other->feel_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeelAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeelAck_descriptor_;
  metadata.reflection = FeelAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConcedeAck::kSeatFieldNumber;
#endif  // !_MSC_VER

ConcedeAck::ConcedeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConcedeAck::InitAsDefaultInstance() {
}

ConcedeAck::ConcedeAck(const ConcedeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConcedeAck::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcedeAck::~ConcedeAck() {
  SharedDtor();
}

void ConcedeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConcedeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcedeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcedeAck_descriptor_;
}

const ConcedeAck& ConcedeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TKJunQiPK_2eproto();  return *default_instance_;
}

ConcedeAck* ConcedeAck::default_instance_ = NULL;

ConcedeAck* ConcedeAck::New() const {
  return new ConcedeAck;
}

void ConcedeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcedeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConcedeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConcedeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConcedeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcedeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcedeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcedeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcedeAck::MergeFrom(const ConcedeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcedeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcedeAck::CopyFrom(const ConcedeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcedeAck::IsInitialized() const {
  
  return true;
}

void ConcedeAck::Swap(ConcedeAck* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcedeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcedeAck_descriptor_;
  metadata.reflection = ConcedeAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace msg
}  // namespace service
}  // namespace jj
}  // namespace cn

// @@protoc_insertion_point(global_scope)
